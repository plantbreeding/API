info:
  title: BrAPI
  version: ''
openapi: 3.0.0
paths:
  /observations:
    get: 
      summary: Get a filtered set of Observations 
      description: |-
        Retrieve all observations where there are measurements for the given observation variables. 

        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm 
      parameters:
      - description: The unique ID of an Observation
        in: query
        name: observationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string 
      - description: The unique ID of an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string 
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: Timestamp range start
        in: query
        name: observationTimeStampRangeStart
        required: false
        schema:
          format: date-time
          type: string
      - description: Timestamp range end
        in: query
        name: observationTimeStampRangeEnd
        required: false
        schema:
          format: date-time
          type: string
      - $ref: '#/components/parameters/observationUnitLevelName'
      - $ref: '#/components/parameters/observationUnitLevelOrder'
      - $ref: '#/components/parameters/observationUnitLevelCode'
      - $ref: '#/components/parameters/observationUnitLevelRelationshipName'
      - $ref: '#/components/parameters/observationUnitLevelRelationshipOrder'
      - $ref: '#/components/parameters/observationUnitLevelRelationshipCode'
      - $ref: '#/components/parameters/observationUnitLevelRelationshipDbId'
      - $ref: '#/components/parameters/commonCropName'
      - $ref: '#/components/parameters/programDbId'
      - $ref: '#/components/parameters/trialDbId'
      - $ref: '#/components/parameters/studyDbId'
      - $ref: '#/components/parameters/germplasmDbId'
      - $ref: '#/components/parameters/externalReferenceID'
      - $ref: '#/components/parameters/externalReferenceId'
      - $ref: '#/components/parameters/externalReferenceSource'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      tags:
      - Observations
    post:
      summary: Add new Observation entities
      description: |-
        Add new Observation entities
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObservationNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Observations
    put:
      summary: Update multiple Observation entities 
      description: |-
        Update multiple Observation entities simultaneously with a single call 
        
        Include as many `observationDbIds` in the request as needed. 
        
        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON. 
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                  $ref: '#/components/schemas/ObservationNewRequest'
              example:
                '<observationDbId_1>':
                  additionalInfo: {}
                  collector: 917d3ae0
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 2408ab11
                  germplasmName: A0000003
                  observationTimeStamp: '2020-08-12T18:10:40.413Z'
                  observationUnitDbId: 598111d4
                  observationUnitName: Plot 1
                  observationVariableDbId: c403d107
                  observationVariableName: Plant Height in meters
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: ef2829db
                  uploadedBy: a2f7f60b
                  value: '2.3'
                '<observationDbId_2>':
                  additionalInfo: {}
                  collector: 03ba8c2c
                  externalReferences:
                  - referenceID: 75a50e76
                    referenceSource: Remote Data Collection Upload Tool
                  germplasmDbId: 69310ca4
                  germplasmName: A0000438
                  observationTimeStamp: '2020-08-12T18:10:40.413Z'
                  observationUnitDbId: 1177a714
                  observationUnitName: Plot 13
                  observationVariableDbId: e4f8ba8c
                  observationVariableName: Carotenoid
                  season:
                    season: Spring
                    seasonDbId: Spring_2018
                    year: 2018
                  studyDbId: 6f9e267d
                  uploadedBy: 182c72ad
                  value: '2.5'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Observations
components:
  responses:
    ObservationListResponse:
      content:
        application/json:
          schema:
            title: ObservationListResponse
            type: object
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    description: The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.
                    items:
                      $ref: '#/components/schemas/Observation'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
      description: OK
      headers: {}
      
