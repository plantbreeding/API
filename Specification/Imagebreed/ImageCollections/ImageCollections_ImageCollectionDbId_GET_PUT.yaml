info:
  title: BrAPI
  version: ''
openapi: 3.0.0
paths:
  /imagecollections/{imageCollectionDbId}:
    get:
      summary: Get the an imageCollection metadata summary
      description: |-
        Get one imageCollection metadata object

        Implementation Notes

        - ''imageCollectionURL'' should be a complete URL describing the location of the imageCollection. There is no BrAPI call for 
        retrieving the imageCollection content, so it could be on a different path, or a different host.

        - ''descriptiveOntologyTerm'' can be thought of as Tags for the imageCollection. These could be simple descriptive 
        words, or ontology references, or full ontology URI''s.
      parameters:
      - description: The unique identifier for a imageCollection
        in: path
        name: imageCollectionDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ImageCollectionSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Image Collections
    put:
      summary: Update an existing imageCollection metadata record
      description: |-
        Update an existing imageCollection metadata record
        
        Implementation Notes
        
        - This endpoint should be implemented with 'PUT /imageCollections/{imageCollectionDbId}/imagecontent' for full imageCollection update capability
        
        - A server may choose to modify the imageCollection metadata object based on the actually imageCollection which has been uploaded. 
        
        - ImageCollection data may be stored in a database or file system. Servers should generate and provide the "imageCollectionURL" as an 
        absolute path for retrieving the imageCollection, wherever it happens to live. 
        
        - 'descriptiveOntologyTerm' can be thought of as Tags for the imageCollection. These could be simple descriptive words, or 
        ontology references, or full ontology URI's. 
        
        - The '/imageCollections' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON 
        only supports two of the possible geometries; Points and Polygons. 
        
        - With most imageCollections, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. 
        
        - For top down imageCollections (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and 
        latitude of the centroid of the imageCollection content, and the Polygon geometry may be used to indicate the border of the 
        imageCollection content.

        An example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImageCollection_Upload
      parameters:
      - description: The unique identifier for a imageCollection
        in: path
        name: imageCollectionDbId
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCollectionNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ImageCollectionSingleResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Image Collections
components:
  responses:
    ImageCollectionSingleResponse:
      content:
        application/json:
          schema:
            title: ImageCollectionSingleResponse
            type: object
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                $ref: '#/components/schemas/ImageCollection'
            required:
            - metadata
            - result
      description: OK
      headers: {}
