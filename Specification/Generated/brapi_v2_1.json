{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "BrAPI",
    "version" : "0.0.0"
  },
  "paths" : {
    "/breedingMethods" : {
      "get" : {
        "tags" : [ "BreedingMethods" ],
        "summary" : "Get a filtered list of BreedingMethod",
        "description" : "Get a list of BreedingMethod",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BreedingMethodListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/calls" : {
      "get" : {
        "tags" : [ "Calls" ],
        "summary" : "Get a filtered list of Call",
        "description" : "Get a list of Call",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expandHomozygote",
          "in" : "query",
          "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sepPhased",
          "in" : "query",
          "description" : "The string used as a separator for phased allele calls.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepUnphased",
          "in" : "query",
          "description" : "The string used as a separator for unphased allele calls.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "unknownString",
          "in" : "query",
          "description" : "The string used as a representation for missing data.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/callSets" : {
      "get" : {
        "tags" : [ "CallSets" ],
        "summary" : "Get a filtered list of CallSet",
        "description" : "Get a list of CallSet",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `Samples` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleName",
          "in" : "query",
          "description" : "A list of human readable names associated with `Samples`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetName",
          "in" : "query",
          "description" : "A list of human readable names associated with `CallSets`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crosses" : {
      "get" : {
        "tags" : [ "Crosses" ],
        "summary" : "Get a filtered list of Cross",
        "description" : "Get a list of Cross",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossDbId",
          "in" : "query",
          "description" : "Search for Cross with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossName",
          "in" : "query",
          "description" : "Search for Cross with this human readable name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Crosses" ],
        "summary" : "Create new Cross",
        "description" : "Add new Cross to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/CrossNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crossingProjects" : {
      "get" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Get a filtered list of CrossingProject",
        "description" : "Get a list of CrossingProject",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePotentialParent",
          "in" : "query",
          "description" : "If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Create new CrossingProject",
        "description" : "Add new CrossingProject to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/CrossingProjectNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get a filtered list of Event",
        "description" : "Get a list of Event",
        "parameters" : [ {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies an observation unit.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDbId",
          "in" : "query",
          "description" : "Filter based on an Event DbId.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Filter based on an Event Type",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateRangeStart",
          "in" : "query",
          "description" : "Filter based on an Event start date.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateRangeEnd",
          "in" : "query",
          "description" : "Filter based on an Event start date.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/EventListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/genomeMaps" : {
      "get" : {
        "tags" : [ "GenomeMaps" ],
        "summary" : "Get a filtered list of GenomeMap",
        "description" : "Get a list of GenomeMap",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `GenomeMap`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapPUI",
          "in" : "query",
          "description" : "The DOI or other permanent identifier for a `GenomeMap`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scientificName",
          "in" : "query",
          "description" : "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of map, usually \"Genetic\" or \"Physical\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GenomeMapListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasms" : {
      "get" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Get a filtered list of Germplasm",
        "description" : "Get a list of Germplasm",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmPUI",
          "in" : "query",
          "description" : "List of Permanent Unique Identifiers to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accessionNumber",
          "in" : "query",
          "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collection",
          "in" : "query",
          "description" : "A specific panel/collection/population name this germplasm belongs to.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "familyCode",
          "in" : "query",
          "description" : "A familyCode representing the family this germplasm belongs to.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "instituteCode",
          "in" : "query",
          "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "binomialName",
          "in" : "query",
          "description" : "List of the full binomial name (scientific name) to identify a germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "genu",
          "in" : "query",
          "description" : "List of Genus names to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "species",
          "in" : "query",
          "description" : "List of Species names to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "synonym",
          "in" : "query",
          "description" : "List of alternative names or IDs used to reference this germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentDbId",
          "in" : "query",
          "description" : "Search for Germplasm with these parents",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "progenyDbId",
          "in" : "query",
          "description" : "Search for Germplasm with these children",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Create new Germplasm",
        "description" : "Add new Germplasm to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/GermplasmNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasmAttributes" : {
      "get" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Get a filtered list of GermplasmAttribute",
        "description" : "Get a list of GermplasmAttribute",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "List of ontology IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodDbId",
          "in" : "query",
          "description" : "List of methods to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodName",
          "in" : "query",
          "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "The unique identifier for a Scale",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleName",
          "in" : "query",
          "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scalePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataType",
          "in" : "query",
          "description" : "List of scale data types to filter search results",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/TraitDataType"
          }
        }, {
          "name" : "traitClass",
          "in" : "query",
          "description" : "List of trait classes to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitDbId",
          "in" : "query",
          "description" : "The unique identifier for a Trait",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitName",
          "in" : "query",
          "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitAttribute",
          "in" : "query",
          "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitAttributePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitEntity",
          "in" : "query",
          "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitEntityPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeDbId",
          "in" : "query",
          "description" : "List of Germplasm Attribute IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeName",
          "in" : "query",
          "description" : "List of human readable Germplasm Attribute names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeCategory",
          "in" : "query",
          "description" : "General category for the attribute. very similar to Trait class.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Create new GermplasmAttribute",
        "description" : "Add new GermplasmAttribute to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/GermplasmAttributeNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasmAttributeValues" : {
      "get" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Get a filtered list of GermplasmAttributeValue",
        "description" : "Get a list of GermplasmAttributeValue",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeValueDbId",
          "in" : "query",
          "description" : "List of Germplasm Attribute Value IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeDbId",
          "in" : "query",
          "description" : "List of Germplasm Attribute IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeName",
          "in" : "query",
          "description" : "List of human readable Germplasm Attribute names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "List of ontology IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodDbId",
          "in" : "query",
          "description" : "List of methods to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "List of scales to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitDbId",
          "in" : "query",
          "description" : "List of trait unique ID to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitClass",
          "in" : "query",
          "description" : "List of trait classes to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataType",
          "in" : "query",
          "description" : "List of scale data types to filter search results",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/TraitDataType"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Create new GermplasmAttributeValue",
        "description" : "Add new GermplasmAttributeValue to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/GermplasmAttributeValueNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/images" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Get a filtered list of Image",
        "description" : "Get a list of Image",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "descriptiveOntologyTerm",
          "in" : "query",
          "description" : "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageFileName",
          "in" : "query",
          "description" : "Image file names to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageFileSizeMax",
          "in" : "query",
          "description" : "A maximum image file size to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "imageFileSizeMin",
          "in" : "query",
          "description" : "A minimum image file size to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "imageHeightMax",
          "in" : "query",
          "description" : "A maximum image height to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "imageHeightMin",
          "in" : "query",
          "description" : "A minimum image height to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "imageLocation",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/GeoJSONSearchArea"
          }
        }, {
          "name" : "imageName",
          "in" : "query",
          "description" : "Human readable names to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageTimeStampRangeEnd",
          "in" : "query",
          "description" : "The latest timestamp to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageTimeStampRangeStart",
          "in" : "query",
          "description" : "The earliest timestamp to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageWidthMax",
          "in" : "query",
          "description" : "A maximum image width to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "imageWidthMin",
          "in" : "query",
          "description" : "A minimum image width to search for.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "mimeType",
          "in" : "query",
          "description" : "A set of image file types to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationDbId",
          "in" : "query",
          "description" : "A list of observation Ids this image is associated with to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageDbId",
          "in" : "query",
          "description" : "A list of image Ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "A set of observation unit identifiers to search for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Create new Image",
        "description" : "Add new Image to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ImageNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/lists" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Get a filtered list of List",
        "description" : "Get a list of List",
        "parameters" : [ {
          "name" : "dateCreatedRangeStart",
          "in" : "query",
          "description" : "Define the beginning for an interval of time and only include Lists that are created within this interval.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateCreatedRangeEnd",
          "in" : "query",
          "description" : "Define the end for an interval of time and only include Lists that are created within this interval.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateModifiedRangeStart",
          "in" : "query",
          "description" : "Define the beginning for an interval of time and only include Lists that are modified within this interval.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateModifiedRangeEnd",
          "in" : "query",
          "description" : "Define the end for an interval of time and only include Lists that are modified within this interval.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listDbId",
          "in" : "query",
          "description" : "An array of primary database identifiers to identify a set of Lists",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listName",
          "in" : "query",
          "description" : "An array of human readable names to identify a set of Lists",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listOwnerName",
          "in" : "query",
          "description" : "An array of names for the people or entities who are responsible for a set of Lists",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listOwnerPersonDbId",
          "in" : "query",
          "description" : "An array of primary database identifiers to identify people or entities who are responsible for a set of Lists",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listSource",
          "in" : "query",
          "description" : "An array of terms identifying lists from different sources (ie 'USER', 'SYSTEM', etc)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listType",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ListType"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Create new List",
        "description" : "Add new List to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ListNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/locations" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get a filtered list of Location",
        "description" : "Get a list of Location",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The location ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abbreviation",
          "in" : "query",
          "description" : "A list of shortened human readable names for a set of Locations",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "altitudeMin",
          "in" : "query",
          "description" : "The minimum altitude to search for",
          "required" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "altitudeMax",
          "in" : "query",
          "description" : "The maximum altitude to search for",
          "required" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "countryCode",
          "in" : "query",
          "description" : "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "countryName",
          "in" : "query",
          "description" : "The full name of the country to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "coordinate",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/GeoJSONSearchArea"
          }
        }, {
          "name" : "instituteAddress",
          "in" : "query",
          "description" : "The street address of the institute to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "instituteName",
          "in" : "query",
          "description" : "The name of the institute to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationType",
          "in" : "query",
          "description" : "The type of location this represents (ex. Breeding Location, Storage Location, etc)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentLocationDbId",
          "in" : "query",
          "description" : "The unique identifier for a Location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentLocationName",
          "in" : "query",
          "description" : "A human readable name for a location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Create new Location",
        "description" : "Add new Location to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/LocationNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/markerPositions" : {
      "get" : {
        "tags" : [ "MarkerPositions" ],
        "summary" : "Get a filtered list of MarkerPosition",
        "description" : "Get a list of MarkerPosition",
        "parameters" : [ {
          "name" : "mapDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `GenomeMaps` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "linkageGroupName",
          "in" : "query",
          "description" : "A list of Uniquely Identifiable linkage group names",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `Variants` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minPosition",
          "in" : "query",
          "description" : "The minimum position of markers in a given map",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxPosition",
          "in" : "query",
          "description" : "The maximum position of markers in a given map",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/methods" : {
      "get" : {
        "tags" : [ "Methods" ],
        "summary" : "Get a filtered list of Method",
        "description" : "Get a list of Method",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "The unique identifier for a method.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Methods" ],
        "summary" : "Create new Method",
        "description" : "Add new Method to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/MethodNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observations" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get a filtered list of Observation",
        "description" : "Get a list of Observation",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The location ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The DbIds of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "The names of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationDbId",
          "in" : "query",
          "description" : "The unique id of an Observation",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique id of an Observation Unit",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationLevel",
          "in" : "query",
          "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ObservationUnitLevel"
          }
        }, {
          "name" : "observationLevelRelationship",
          "in" : "query",
          "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
          }
        }, {
          "name" : "observationTimeStampRangeEnd",
          "in" : "query",
          "description" : "Timestamp range end",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationTimeStampRangeStart",
          "in" : "query",
          "description" : "Timestamp range start",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Observations" ],
        "summary" : "Create new Observation",
        "description" : "Add new Observation to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ObservationNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationUnits" : {
      "get" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Get a filtered list of ObservationUnit",
        "description" : "Get a list of ObservationUnit",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The location ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The DbIds of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "The names of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique id of an observation unit",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitName",
          "in" : "query",
          "description" : "The human readable identifier for an Observation Unit",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationLevel",
          "in" : "query",
          "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ObservationUnitLevel"
          }
        }, {
          "name" : "observationLevelRelationship",
          "in" : "query",
          "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
          }
        }, {
          "name" : "includeObservation",
          "in" : "query",
          "description" : "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Create new ObservationUnit",
        "description" : "Add new ObservationUnit to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ObservationUnitNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationVariables" : {
      "get" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Get a filtered list of ObservationVariable",
        "description" : "Get a list of ObservationVariable",
        "parameters" : [ {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The DbIds of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "The names of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "List of ontology IDs to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodDbId",
          "in" : "query",
          "description" : "List of methods to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodName",
          "in" : "query",
          "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "methodPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "The unique identifier for a Scale",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleName",
          "in" : "query",
          "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scalePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataType",
          "in" : "query",
          "description" : "List of scale data types to filter search results",
          "required" : false,
          "schema" : {
            "type" : "object",
            "$ref" : "#/components/schemas/TraitDataType"
          }
        }, {
          "name" : "traitClass",
          "in" : "query",
          "description" : "List of trait classes to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitDbId",
          "in" : "query",
          "description" : "The unique identifier for a Trait",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitName",
          "in" : "query",
          "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitAttribute",
          "in" : "query",
          "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitAttributePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitEntity",
          "in" : "query",
          "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitEntityPUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Create new ObservationVariable",
        "description" : "Add new ObservationVariable to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ObservationVariableNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/ontologies" : {
      "get" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Get a filtered list of Ontology",
        "description" : "Get a list of Ontology",
        "parameters" : [ {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyName",
          "in" : "query",
          "description" : "The human readable identifier for an ontology definition.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Create new Ontology",
        "description" : "Add new Ontology to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/OntologyNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "pedigrees" : {
      "get" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Get a filtered list of PedigreeNode",
        "description" : "Get a list of PedigreeNode",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmPUI",
          "in" : "query",
          "description" : "List of Permanent Unique Identifiers to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accessionNumber",
          "in" : "query",
          "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collection",
          "in" : "query",
          "description" : "A specific panel/collection/population name this germplasm belongs to.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "familyCode",
          "in" : "query",
          "description" : "A familyCode representing the family this germplasm belongs to.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "instituteCode",
          "in" : "query",
          "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "binomialName",
          "in" : "query",
          "description" : "List of the full binomial name (scientific name) to identify a germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "genu",
          "in" : "query",
          "description" : "List of Genus names to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "species",
          "in" : "query",
          "description" : "List of Species names to identify germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "synonym",
          "in" : "query",
          "description" : "List of alternative names or IDs used to reference this germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParent",
          "in" : "query",
          "description" : "If this parameter is true, include the array of parents in the response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeSibling",
          "in" : "query",
          "description" : "If this parameter is true, include the array of siblings in the response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeProgeny",
          "in" : "query",
          "description" : "If this parameter is true, include the array of progeny in the response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeFullTree",
          "in" : "query",
          "description" : "If this parameter is true, recursively include ALL of the nodes available in this pedigree tree",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "pedigreeDepth",
          "in" : "query",
          "description" : "Recursively include this number of levels up the tree in the response (parents, grand-parents, great-grand-parents, etc)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "progenyDepth",
          "in" : "query",
          "description" : "Recursively include this number of levels down the tree in the response (children, grand-children, great-grand-children, etc)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Create new PedigreeNode",
        "description" : "Add new PedigreeNode to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/PedigreeNode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/persons" : {
      "get" : {
        "tags" : [ "Persons" ],
        "summary" : "Get a filtered list of Person",
        "description" : "Get a list of Person",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "emailAddress",
          "in" : "query",
          "description" : "email address for this person",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "firstName",
          "in" : "query",
          "description" : "Persons first name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Persons last name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mailingAddress",
          "in" : "query",
          "description" : "physical address of this person",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "middleName",
          "in" : "query",
          "description" : "Persons middle name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "personDbId",
          "in" : "query",
          "description" : "Unique ID for this person",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "phoneNumber",
          "in" : "query",
          "description" : "phone number of this person",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userID",
          "in" : "query",
          "description" : "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Persons" ],
        "summary" : "Create new Person",
        "description" : "Add new Person to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/PersonNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plannedCrosses" : {
      "get" : {
        "tags" : [ "PlannedCrosses" ],
        "summary" : "Get a filtered list of PlannedCross",
        "description" : "Get a list of PlannedCross",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plannedCrossDbId",
          "in" : "query",
          "description" : "Search for Planned Cross with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plannedCrossName",
          "in" : "query",
          "description" : "Search for Planned Cross with this human readable name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "TODO", "DONE", "SKIPPED" ]
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "PlannedCrosses" ],
        "summary" : "Create new PlannedCross",
        "description" : "Add new PlannedCross to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/PlannedCross"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plates" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Get a filtered list of Plate",
        "description" : "Get a list of Plate",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies an observation unit",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a plate of samples",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateName",
          "in" : "query",
          "description" : "The human readable name of a plate of samples",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateBarcode",
          "in" : "query",
          "description" : "A unique identifier physically attached to the plate",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a sample",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleName",
          "in" : "query",
          "description" : "The human readable name of the sample",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleGroupDbId",
          "in" : "query",
          "description" : "The unique identifier for a group of related Samples",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a germplasm",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Plates" ],
        "summary" : "Create new Plate",
        "description" : "Add new Plate to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/PlateNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/programs" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Get a filtered list of Program",
        "description" : "Get a list of Program",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abbreviation",
          "in" : "query",
          "description" : "A list of shortened human readable names for a set of Programs",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "leadPersonDbId",
          "in" : "query",
          "description" : "The person DbIds of the program leader to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "leadPersonName",
          "in" : "query",
          "description" : "The names of the program leader to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "objectife",
          "in" : "query",
          "description" : "A program objective to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programType",
          "in" : "query",
          "description" : "The type of program entity this object represents\n<br/> 'STANDARD' represents a standard, permanent breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding ",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "STANDARD", "PROJECT" ]
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Programs" ],
        "summary" : "Create new Program",
        "description" : "Add new Program to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ProgramNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/references" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Get a filtered list of Reference",
        "description" : "Get a list of Reference",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accession",
          "in" : "query",
          "description" : "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "md5checksum",
          "in" : "query",
          "description" : "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `References` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `ReferenceSets` within the given database server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDerived",
          "in" : "query",
          "description" : "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minLength",
          "in" : "query",
          "description" : "The minimum length of this `References` sequence.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxLength",
          "in" : "query",
          "description" : "The minimum length of this `References` sequence.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/referenceSets" : {
      "get" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Get a filtered list of ReferenceSet",
        "description" : "Get a list of ReferenceSet",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accession",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assemblyPUI",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "md5checksum",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The `ReferenceSets` to search.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Create new ReferenceSet",
        "description" : "Add new ReferenceSet to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ReferenceSetNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/samples" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Get a filtered list of Sample",
        "description" : "Get a list of Sample",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies an `ObservationUnit`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Plate` of `Samples`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateName",
          "in" : "query",
          "description" : "The human readable name of a `Plate` of `Samples`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Sample`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleName",
          "in" : "query",
          "description" : "The human readable name of the `Sample`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleGroupDbId",
          "in" : "query",
          "description" : "The unique identifier for a group of related `Samples`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Germplasm`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Samples" ],
        "summary" : "Create new Sample",
        "description" : "Add new Sample to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/SampleNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/scales" : {
      "get" : {
        "tags" : [ "Scales" ],
        "summary" : "Get a filtered list of Scale",
        "description" : "Get a list of Scale",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "The unique identifier for a scale.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Scales" ],
        "summary" : "Create new Scale",
        "description" : "Add new Scale to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/ScaleNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seasons" : {
      "get" : {
        "tags" : [ "Seasons" ],
        "summary" : "Get a filtered list of Season",
        "description" : "Get a list of Season",
        "parameters" : [ {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "season",
          "in" : "query",
          "description" : "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonName",
          "in" : "query",
          "description" : "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "year",
          "in" : "query",
          "description" : "The 4 digit year of a season. Example \"2017\"",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Seasons" ],
        "summary" : "Create new Season",
        "description" : "Add new Season to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/Season"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seedLots" : {
      "get" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Get a filtered list of SeedLot",
        "description" : "Get a list of SeedLot",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seedLotDbId",
          "in" : "query",
          "description" : "Unique id for a seed lot on this server",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossDbId",
          "in" : "query",
          "description" : "Search for Cross with this unique id",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossName",
          "in" : "query",
          "description" : "Search for Cross with this human readable name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Create new SeedLot",
        "description" : "Add new SeedLot to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/SeedLotNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/studies" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get a filtered list of Study",
        "description" : "Get a list of Study",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmDbId",
          "in" : "query",
          "description" : "List of IDs which uniquely identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "germplasmName",
          "in" : "query",
          "description" : "List of human readable names to identify germplasm to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The location ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The DbIds of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "The names of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "actife",
          "in" : "query",
          "description" : "A flag to indicate if a Study is currently active and ongoing",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a season",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyType",
          "in" : "query",
          "description" : "The type of study being performed. ex. \"Yield Trial\", etc",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyCode",
          "in" : "query",
          "description" : "A short human readable code for a study",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyPUI",
          "in" : "query",
          "description" : "Permanent unique identifier associated with study data. For example, a URI or DOI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Studies" ],
        "summary" : "Create new Study",
        "description" : "Add new Study to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/StudyNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/traits" : {
      "get" : {
        "tags" : [ "Traits" ],
        "summary" : "Get a filtered list of Trait",
        "description" : "Get a list of Trait",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ontologyDbId",
          "in" : "query",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitDbId",
          "in" : "query",
          "description" : "The unique identifier for a trait.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Traits" ],
        "summary" : "Create new Trait",
        "description" : "Add new Trait to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/TraitNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/trials" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Get a filtered list of Trial",
        "description" : "Get a list of Trial",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The location ids to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable names to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The DbIds of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "The names of Variables to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "actife",
          "in" : "query",
          "description" : "A flag to indicate if a Trial is currently active and ongoing",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "contactDbId",
          "in" : "query",
          "description" : "List of contact entities associated with this trial",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchDateRangeStart",
          "in" : "query",
          "description" : "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchDateRangeEnd",
          "in" : "query",
          "description" : "The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialPUI",
          "in" : "query",
          "description" : "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Trials" ],
        "summary" : "Create new Trial",
        "description" : "Add new Trial to database",
        "parameters" : [ {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "$ref" : "#/components/schemas/TrialNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variants" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Get a filtered list of Variant",
        "description" : "Get a list of Variant",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "The unique identifier representing a genotype `Reference`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The unique identifier representing a genotype `ReferenceSet`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `Variants`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "A list of IDs which uniquely identify `VariantSets`",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantSets" : {
      "get" : {
        "tags" : [ "VariantSets" ],
        "summary" : "Get a filtered list of VariantSet",
        "description" : "Get a list of VariantSet",
        "parameters" : [ {
          "name" : "commonCropName",
          "in" : "query",
          "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programDbId",
          "in" : "query",
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programName",
          "in" : "query",
          "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyDbId",
          "in" : "query",
          "description" : "List of study identifiers to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyName",
          "in" : "query",
          "description" : "List of study names to filter search results",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trialName",
          "in" : "query",
          "description" : "The human readable name of a trial to search for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "The unique identifier representing a CallSet",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The unique identifier representing a Variant",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "The unique identifier representing a VariantSet",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "The unique identifier representing a genotype Reference",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The unique identifier representing a genotype ReferenceSet",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/properties/externalReferenceID"
        }, {
          "$ref" : "#/components/properties/externalReferenceId"
        }, {
          "$ref" : "#/components/properties/externalReferenceSource"
        }, {
          "$ref" : "#/components/properties/page"
        }, {
          "$ref" : "#/components/properties/pageSize"
        }, {
          "$ref" : "#/components/properties/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/breedingMethods/{breedingMethodDbId}" : {
      "get" : {
        "tags" : [ "BreedingMethods" ],
        "summary" : "Get the details of a specific BreedingMethod",
        "description" : "Get details for a BreedingMethod",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BreedingMethodSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/callSets/{callSetDbId}" : {
      "get" : {
        "tags" : [ "CallSets" ],
        "summary" : "Get the details of a specific CallSet",
        "description" : "Get details for a CallSet",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crossingProjects/{crossingProjectDbId}" : {
      "get" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Get the details of a specific CrossingProject",
        "description" : "Get details for a CrossingProject",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Update the details for an existing CrossingProject",
        "description" : "Update the details for an existing CrossingProject",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/genomeMaps/{genomeMapDbId}" : {
      "get" : {
        "tags" : [ "GenomeMaps" ],
        "summary" : "Get the details of a specific GenomeMap",
        "description" : "Get details for a GenomeMap",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GenomeMapSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasms/{germplasmDbId}" : {
      "get" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Get the details of a specific Germplasm",
        "description" : "Get details for a Germplasm",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Update the details for an existing Germplasm",
        "description" : "Update the details for an existing Germplasm",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasmAttributes/{attributeDbId}" : {
      "get" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Get the details of a specific GermplasmAttribute",
        "description" : "Get details for a GermplasmAttribute",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Update the details for an existing GermplasmAttribute",
        "description" : "Update the details for an existing GermplasmAttribute",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasmAttributeValues/{attributeValueDbId}" : {
      "get" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Get the details of a specific GermplasmAttributeValue",
        "description" : "Get details for a GermplasmAttributeValue",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Update the details for an existing GermplasmAttributeValue",
        "description" : "Update the details for an existing GermplasmAttributeValue",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/images/{imageDbId}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Get the details of a specific Image",
        "description" : "Get details for a Image",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Images" ],
        "summary" : "Update the details for an existing Image",
        "description" : "Update the details for an existing Image",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/lists/{listDbId}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Get the details of a specific List",
        "description" : "Get details for a List",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Lists" ],
        "summary" : "Update the details for an existing List",
        "description" : "Update the details for an existing List",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/locations/{locationDbId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get the details of a specific Location",
        "description" : "Get details for a Location",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update the details for an existing Location",
        "description" : "Update the details for an existing Location",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/methods/{methodDbId}" : {
      "get" : {
        "tags" : [ "Methods" ],
        "summary" : "Get the details of a specific Method",
        "description" : "Get details for a Method",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Methods" ],
        "summary" : "Update the details for an existing Method",
        "description" : "Update the details for an existing Method",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observations/{observationDbId}" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get the details of a specific Observation",
        "description" : "Get details for a Observation",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Observations" ],
        "summary" : "Update the details for an existing Observation",
        "description" : "Update the details for an existing Observation",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationUnits/{observationUnitDbId}" : {
      "get" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Get the details of a specific ObservationUnit",
        "description" : "Get details for a ObservationUnit",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Update the details for an existing ObservationUnit",
        "description" : "Update the details for an existing ObservationUnit",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationVariables/{observationVariableDbId}" : {
      "get" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Get the details of a specific ObservationVariable",
        "description" : "Get details for a ObservationVariable",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Update the details for an existing ObservationVariable",
        "description" : "Update the details for an existing ObservationVariable",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/ontologies/{ontologyDbId}" : {
      "get" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Get the details of a specific Ontology",
        "description" : "Get details for a Ontology",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Update the details for an existing Ontology",
        "description" : "Update the details for an existing Ontology",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "pedigrees/{pedigreeNodeDbId}" : {
      "get" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Get the details of a specific PedigreeNode",
        "description" : "Get details for a PedigreeNode",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Update the details for an existing PedigreeNode",
        "description" : "Update the details for an existing PedigreeNode",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/persons/{personDbId}" : {
      "get" : {
        "tags" : [ "Persons" ],
        "summary" : "Get the details of a specific Person",
        "description" : "Get details for a Person",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Persons" ],
        "summary" : "Update the details for an existing Person",
        "description" : "Update the details for an existing Person",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plannedCrosses/{plannedCrossDbId}" : {
      "put" : {
        "tags" : [ "PlannedCrosses" ],
        "summary" : "Update the details for an existing PlannedCross",
        "description" : "Update the details for an existing PlannedCross",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plates/{plateDbId}" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Get the details of a specific Plate",
        "description" : "Get details for a Plate",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Plates" ],
        "summary" : "Update the details for an existing Plate",
        "description" : "Update the details for an existing Plate",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/programs/{programDbId}" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Get the details of a specific Program",
        "description" : "Get details for a Program",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Programs" ],
        "summary" : "Update the details for an existing Program",
        "description" : "Update the details for an existing Program",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/references/{referenceDbId}" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Get the details of a specific Reference",
        "description" : "Get details for a Reference",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/referenceSets/{referenceSetDbId}" : {
      "get" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Get the details of a specific ReferenceSet",
        "description" : "Get details for a ReferenceSet",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Update the details for an existing ReferenceSet",
        "description" : "Update the details for an existing ReferenceSet",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/samples/{sampleDbId}" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Get the details of a specific Sample",
        "description" : "Get details for a Sample",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Samples" ],
        "summary" : "Update the details for an existing Sample",
        "description" : "Update the details for an existing Sample",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/scales/{scaleDbId}" : {
      "get" : {
        "tags" : [ "Scales" ],
        "summary" : "Get the details of a specific Scale",
        "description" : "Get details for a Scale",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Scales" ],
        "summary" : "Update the details for an existing Scale",
        "description" : "Update the details for an existing Scale",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seasons/{seasonDbId}" : {
      "get" : {
        "tags" : [ "Seasons" ],
        "summary" : "Get the details of a specific Season",
        "description" : "Get details for a Season",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Seasons" ],
        "summary" : "Update the details for an existing Season",
        "description" : "Update the details for an existing Season",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seedLots/{seedLotDbId}" : {
      "get" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Get the details of a specific SeedLot",
        "description" : "Get details for a SeedLot",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Update the details for an existing SeedLot",
        "description" : "Update the details for an existing SeedLot",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/studies/{studyDbId}" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get the details of a specific Study",
        "description" : "Get details for a Study",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Studies" ],
        "summary" : "Update the details for an existing Study",
        "description" : "Update the details for an existing Study",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/traits/{traitDbId}" : {
      "get" : {
        "tags" : [ "Traits" ],
        "summary" : "Get the details of a specific Trait",
        "description" : "Get details for a Trait",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Traits" ],
        "summary" : "Update the details for an existing Trait",
        "description" : "Update the details for an existing Trait",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/trials/{trialDbId}" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Get the details of a specific Trial",
        "description" : "Get details for a Trial",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Trials" ],
        "summary" : "Update the details for an existing Trial",
        "description" : "Update the details for an existing Trial",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variants/{variantDbId}" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Get the details of a specific Variant",
        "description" : "Get details for a Variant",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantSets/{variantSetDbId}" : {
      "get" : {
        "tags" : [ "VariantSets" ],
        "summary" : "Get the details of a specific VariantSet",
        "description" : "Get details for a VariantSet",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "VariantSets" ],
        "summary" : "Update the details for an existing VariantSet",
        "description" : "Update the details for an existing VariantSet",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/calls" : {
      "post" : {
        "tags" : [ "Calls" ],
        "summary" : "Submit a search request for `Call`",
        "description" : "Submit a search request for `Call`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/call/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/callSets" : {
      "post" : {
        "tags" : [ "CallSets" ],
        "summary" : "Submit a search request for `CallSet`",
        "description" : "Submit a search request for `CallSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/crossingProjects" : {
      "post" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Submit a search request for `CrossingProject`",
        "description" : "Submit a search request for `CrossingProject`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/crossingProject/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/events" : {
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Submit a search request for `Event`",
        "description" : "Submit a search request for `Event`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/event/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/EventListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/genomeMaps" : {
      "post" : {
        "tags" : [ "GenomeMaps" ],
        "summary" : "Submit a search request for `GenomeMap`",
        "description" : "Submit a search request for `GenomeMap`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/genomeMap/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GenomeMapListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasms" : {
      "post" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Submit a search request for `Germplasm`",
        "description" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasmAttributes" : {
      "post" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Submit a search request for `GermplasmAttribute`",
        "description" : "Submit a search request for `GermplasmAttribute`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttribute/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasmAttributeValues" : {
      "post" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Submit a search request for `GermplasmAttributeValue`",
        "description" : "Submit a search request for `GermplasmAttributeValue`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttributeValue/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/images" : {
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Submit a search request for `Image`",
        "description" : "Submit a search request for `Image`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/image/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/lists" : {
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Submit a search request for `List`",
        "description" : "Submit a search request for `List`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/list/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/locations" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Submit a search request for `Location`",
        "description" : "Submit a search request for `Location`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/location/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/markerPositions" : {
      "post" : {
        "tags" : [ "MarkerPositions" ],
        "summary" : "Submit a search request for `MarkerPosition`",
        "description" : "Submit a search request for `MarkerPosition`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerPosition/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observations" : {
      "post" : {
        "tags" : [ "Observations" ],
        "summary" : "Submit a search request for `Observation`",
        "description" : "Submit a search request for `Observation`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observation/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationUnits" : {
      "post" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Submit a search request for `ObservationUnit`",
        "description" : "Submit a search request for `ObservationUnit`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationUnit/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationVariables" : {
      "post" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Submit a search request for `ObservationVariable`",
        "description" : "Submit a search request for `ObservationVariable`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationVariable/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/pedigreeNodes" : {
      "post" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Submit a search request for `PedigreeNode`",
        "description" : "Submit a search request for `PedigreeNode`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/pedigreeNode/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/persons" : {
      "post" : {
        "tags" : [ "Persons" ],
        "summary" : "Submit a search request for `Person`",
        "description" : "Submit a search request for `Person`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/person/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plannedCrosses" : {
      "post" : {
        "tags" : [ "PlannedCrosses" ],
        "summary" : "Submit a search request for `PlannedCross`",
        "description" : "Submit a search request for `PlannedCross`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plannedCross/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plates" : {
      "post" : {
        "tags" : [ "Plates" ],
        "summary" : "Submit a search request for `Plate`",
        "description" : "Submit a search request for `Plate`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plate/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/programs" : {
      "post" : {
        "tags" : [ "Programs" ],
        "summary" : "Submit a search request for `Program`",
        "description" : "Submit a search request for `Program`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/program/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/references" : {
      "post" : {
        "tags" : [ "References" ],
        "summary" : "Submit a search request for `Reference`",
        "description" : "Submit a search request for `Reference`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/reference/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/referenceSets" : {
      "post" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Submit a search request for `ReferenceSet`",
        "description" : "Submit a search request for `ReferenceSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referenceSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/samples" : {
      "post" : {
        "tags" : [ "Samples" ],
        "summary" : "Submit a search request for `Sample`",
        "description" : "Submit a search request for `Sample`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/sample/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/seasons" : {
      "post" : {
        "tags" : [ "Seasons" ],
        "summary" : "Submit a search request for `Season`",
        "description" : "Submit a search request for `Season`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/season/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/seedLots" : {
      "post" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Submit a search request for `SeedLot`",
        "description" : "Submit a search request for `SeedLot`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/seedLot/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/studies" : {
      "post" : {
        "tags" : [ "Studies" ],
        "summary" : "Submit a search request for `Study`",
        "description" : "Submit a search request for `Study`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/study/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/trials" : {
      "post" : {
        "tags" : [ "Trials" ],
        "summary" : "Submit a search request for `Trial`",
        "description" : "Submit a search request for `Trial`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/trial/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variants" : {
      "post" : {
        "tags" : [ "Variants" ],
        "summary" : "Submit a search request for `Variant`",
        "description" : "Submit a search request for `Variant`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variant/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variantSets" : {
      "post" : {
        "tags" : [ "VariantSets" ],
        "summary" : "Submit a search request for `VariantSet`",
        "description" : "Submit a search request for `VariantSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/calls/{callDbId}" : {
      "get" : {
        "tags" : [ "Calls" ],
        "summary" : "Submit a search request for `Call`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/call/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Call` search request <br/>\nClients should submit a search request using the corresponding `POST /search/call` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/callSets/{callSetDbId}" : {
      "get" : {
        "tags" : [ "CallSets" ],
        "summary" : "Submit a search request for `CallSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `CallSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/callSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/crossingProjects/{crossingProjectDbId}" : {
      "get" : {
        "tags" : [ "CrossingProjects" ],
        "summary" : "Submit a search request for `CrossingProject`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/crossingProject/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `CrossingProject` search request <br/>\nClients should submit a search request using the corresponding `POST /search/crossingProject` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/events/{eventDbId}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Submit a search request for `Event`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/event/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Event` search request <br/>\nClients should submit a search request using the corresponding `POST /search/event` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/EventListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/genomeMaps/{genomeMapDbId}" : {
      "get" : {
        "tags" : [ "GenomeMaps" ],
        "summary" : "Submit a search request for `GenomeMap`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/genomeMap/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `GenomeMap` search request <br/>\nClients should submit a search request using the corresponding `POST /search/genomeMap` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GenomeMapListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasms/{germplasmDbId}" : {
      "get" : {
        "tags" : [ "Germplasms" ],
        "summary" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Germplasm` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasmAttributes/{attributeDbId}" : {
      "get" : {
        "tags" : [ "GermplasmAttributes" ],
        "summary" : "Submit a search request for `GermplasmAttribute`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttribute/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `GermplasmAttribute` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasmAttribute` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasmAttributeValues/{attributeValueDbId}" : {
      "get" : {
        "tags" : [ "GermplasmAttributeValues" ],
        "summary" : "Submit a search request for `GermplasmAttributeValue`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttributeValue/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `GermplasmAttributeValue` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasmAttributeValue` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/images/{imageDbId}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Submit a search request for `Image`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/image/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Image` search request <br/>\nClients should submit a search request using the corresponding `POST /search/image` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/lists/{listDbId}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Submit a search request for `List`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/list/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `List` search request <br/>\nClients should submit a search request using the corresponding `POST /search/list` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/locations/{locationDbId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Submit a search request for `Location`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/location/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Location` search request <br/>\nClients should submit a search request using the corresponding `POST /search/location` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/markerPositions/{markerPositionDbId}" : {
      "get" : {
        "tags" : [ "MarkerPositions" ],
        "summary" : "Submit a search request for `MarkerPosition`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerPosition/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `MarkerPosition` search request <br/>\nClients should submit a search request using the corresponding `POST /search/markerPosition` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observations/{observationDbId}" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Submit a search request for `Observation`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observation/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Observation` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observation` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationUnits/{observationUnitDbId}" : {
      "get" : {
        "tags" : [ "ObservationUnits" ],
        "summary" : "Submit a search request for `ObservationUnit`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationUnit/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `ObservationUnit` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationUnit` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationVariables/{observationVariableDbId}" : {
      "get" : {
        "tags" : [ "ObservationVariables" ],
        "summary" : "Submit a search request for `ObservationVariable`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationVariable/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `ObservationVariable` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationVariable` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/pedigreeNodes/{pedigreeNodeDbId}" : {
      "get" : {
        "tags" : [ "PedigreeNodes" ],
        "summary" : "Submit a search request for `PedigreeNode`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/pedigreeNode/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `PedigreeNode` search request <br/>\nClients should submit a search request using the corresponding `POST /search/pedigreeNode` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeNodeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/persons/{personDbId}" : {
      "get" : {
        "tags" : [ "Persons" ],
        "summary" : "Submit a search request for `Person`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/person/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Person` search request <br/>\nClients should submit a search request using the corresponding `POST /search/person` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plannedCrosses/{plannedCrossDbId}" : {
      "get" : {
        "tags" : [ "PlannedCrosses" ],
        "summary" : "Submit a search request for `PlannedCross`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plannedCross/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `PlannedCross` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plannedCross` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plates/{plateDbId}" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Submit a search request for `Plate`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plate/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Plate` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plate` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/programs/{programDbId}" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Submit a search request for `Program`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/program/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Program` search request <br/>\nClients should submit a search request using the corresponding `POST /search/program` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/references/{referenceDbId}" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Submit a search request for `Reference`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/reference/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Reference` search request <br/>\nClients should submit a search request using the corresponding `POST /search/reference` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/referenceSets/{referenceSetDbId}" : {
      "get" : {
        "tags" : [ "ReferenceSets" ],
        "summary" : "Submit a search request for `ReferenceSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referenceSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `ReferenceSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/referenceSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/samples/{sampleDbId}" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Submit a search request for `Sample`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/sample/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Sample` search request <br/>\nClients should submit a search request using the corresponding `POST /search/sample` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/seasons/{seasonDbId}" : {
      "get" : {
        "tags" : [ "Seasons" ],
        "summary" : "Submit a search request for `Season`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/season/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Season` search request <br/>\nClients should submit a search request using the corresponding `POST /search/season` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/seedLots/{seedLotDbId}" : {
      "get" : {
        "tags" : [ "SeedLots" ],
        "summary" : "Submit a search request for `SeedLot`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/seedLot/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `SeedLot` search request <br/>\nClients should submit a search request using the corresponding `POST /search/seedLot` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/studies/{studyDbId}" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Submit a search request for `Study`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/study/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Study` search request <br/>\nClients should submit a search request using the corresponding `POST /search/study` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/trials/{trialDbId}" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Submit a search request for `Trial`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/trial/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Trial` search request <br/>\nClients should submit a search request using the corresponding `POST /search/trial` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variants/{variantDbId}" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Submit a search request for `Variant`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variant/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `Variant` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variant` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variantSets/{variantSetDbId}" : {
      "get" : {
        "tags" : [ "VariantSets" ],
        "summary" : "Submit a search request for `VariantSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "description" : "Get the results of a `VariantSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variantSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AdditionalInfo" : {
        "type" : "object",
        "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
        "properties" : {
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "AlleleMatrix" : {
        "type" : "object",
        "properties" : {
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dataMatrices" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DataMatrix"
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean"
          },
          "pagination" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Pagination"
            }
          },
          "sepPhased" : {
            "type" : "string"
          },
          "sepUnphased" : {
            "type" : "string"
          },
          "unknownString" : {
            "type" : "string"
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "callSetDbIds", "variantSetDbIds" ]
      },
      "Analysis" : {
        "type" : "object",
        "properties" : {
          "analysisDbId" : {
            "type" : "string"
          },
          "analysisName" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "software" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          },
          "updated" : {
            "type" : "string"
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          }
        },
        "required" : [ "analysisDbId" ]
      },
      "Attribute" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeCategory" : {
            "type" : "string"
          },
          "attributeDbId" : {
            "type" : "string"
          },
          "attributeDescription" : {
            "type" : "string"
          },
          "attributeName" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "attributeName", "methodName", "scaleDbId", "scaleName", "traitName" ]
      },
      "AvailableFormat" : {
        "type" : "object",
        "properties" : {
          "dataFormat" : {
            "type" : "string",
            "description" : "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)",
            "enum" : [ "DartSeq", "VCF", "Hapmap", "tabular", "JSON" ]
          },
          "expandHomozygotes" : {
            "type" : "boolean"
          },
          "fileFormat" : {
            "type" : "string",
            "description" : "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
            "enum" : [ "text/csv", "text/tsv", "application/excel", "application/zip", "application/json" ]
          },
          "fileURL" : {
            "type" : "string"
          },
          "sepPhased" : {
            "type" : "string"
          },
          "sepUnphased" : {
            "type" : "string"
          },
          "unknownString" : {
            "type" : "string"
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          }
        }
      },
      "BreedingMethod" : {
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string"
          },
          "breedingMethodDbId" : {
            "type" : "string"
          },
          "breedingMethodName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "germplasm" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Germplasm"
            }
          },
          "pedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          }
        },
        "required" : [ "abbreviation", "breedingMethodDbId", "breedingMethodName", "description" ]
      },
      "Call" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSetDbId" : {
            "type" : "string"
          },
          "callSetName" : {
            "type" : "string"
          },
          "genotypeMetadata" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GenotypeMetadata"
            }
          },
          "genotypeValue" : {
            "type" : "string"
          },
          "phaseSet" : {
            "type" : "string"
          },
          "variantDbId" : {
            "type" : "string"
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          }
        },
        "required" : [ "callSetDbId", "variantDbId", "variantSetDbId" ]
      },
      "CallSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean"
          },
          "sepPhased" : {
            "type" : "string"
          },
          "sepUnphased" : {
            "type" : "string"
          },
          "unknownString" : {
            "type" : "string"
          },
          "variantDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CallSet" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSetDbId" : {
            "type" : "string"
          },
          "callSetName" : {
            "type" : "string"
          },
          "calls" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Call"
            }
          },
          "created" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "sampleDbId" : {
            "type" : "string"
          },
          "sampleName" : {
            "type" : "string"
          },
          "samplePUI" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "updated" : {
            "type" : "string"
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "callSetDbId" ]
      },
      "CallSetSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "callSetNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Contact" : {
        "type" : "object",
        "properties" : {
          "contactDbId" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "instituteName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "orcid" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "contactDbId" ]
      },
      "ContentMixture" : {
        "type" : "object",
        "properties" : {
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "mixturePercentage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seedLotDbId" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          }
        }
      },
      "ContentTypes" : {
        "type" : "string",
        "enum" : [ "application/json", "text/csv", "text/tsv", "application/flapjack" ]
      },
      "Context" : {
        "type" : "array",
        "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
        "example" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ],
        "items" : {
          "type" : "string",
          "format" : "uri"
        },
        "title" : "context"
      },
      "Cross" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "crossAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossAttribute"
            }
          },
          "crossName" : {
            "type" : "string"
          },
          "crossType" : {
            "type" : "string",
            "description" : "The type of cross make. Accepted values for this field are 'BIPARENTAL', 'SELF', 'OPEN_POLLINATED', 'BULK',  'BULK_SELFED',  'BULK_OPEN_POLLINATED' and 'DOUBLE_HAPLOID'.",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "plannedCrossDbId" : {
            "type" : "string"
          },
          "plannedCrossName" : {
            "type" : "string"
          },
          "pollinationEvents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PollinationEvent"
            }
          }
        },
        "required" : [ "crossDbId" ]
      },
      "CrossAttribute" : {
        "type" : "object",
        "properties" : {
          "crossAttributeName" : {
            "type" : "string"
          },
          "crossAttributeValue" : {
            "type" : "string"
          },
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          }
        }
      },
      "CrossNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "crossAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossAttribute"
            }
          },
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          },
          "crossType" : {
            "type" : "string",
            "description" : "The type of cross make. Accepted values for this field are 'BIPARENTAL', 'SELF', 'OPEN_POLLINATED', 'BULK',  'BULK_SELFED',  'BULK_OPEN_POLLINATED' and 'DOUBLE_HAPLOID'.",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "plannedCrossDbId" : {
            "type" : "string"
          },
          "plannedCrossName" : {
            "type" : "string"
          },
          "pollinationEvents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PollinationEvent"
            }
          }
        },
        "required" : [ "crossDbId", "crossDbId" ]
      },
      "CrossParent" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "parentType" : {
            "type" : "string",
            "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
            "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
          }
        }
      },
      "CrossType" : {
        "type" : "string",
        "description" : "The type of cross make. Accepted values for this field are 'BIPARENTAL', 'SELF', 'OPEN_POLLINATED', 'BULK',  'BULK_SELFED',  'BULK_OPEN_POLLINATED' and 'DOUBLE_HAPLOID'.",
        "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
      },
      "CrossingProject" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "crosses" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Cross"
            }
          },
          "crossingProjectDescription" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "pedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "plannedCrosses" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PlannedCross"
            }
          },
          "potentialParents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossParent"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          }
        },
        "required" : [ "crossingProjectDbId", "crossingProjectName" ]
      },
      "CrossingProjectNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "crosses" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Cross"
            }
          },
          "crossingProjectDbId" : {
            "type" : "string"
          },
          "crossingProjectDescription" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "pedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "plannedCrosses" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PlannedCross"
            }
          },
          "potentialParents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossParent"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          }
        },
        "required" : [ "crossingProjectDbId", "crossingProjectDbId", "crossingProjectName" ]
      },
      "CrossingProjectSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossingProjectDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossingProjectNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "includePotentialParents" : {
            "type" : "boolean"
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DataLink" : {
        "type" : "object",
        "properties" : {
          "dataFormat" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "fileFormat" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "provenance" : {
            "type" : "string"
          },
          "scientificType" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "DataMatrix" : {
        "type" : "object",
        "properties" : {
          "alleleMatrix" : {
            "type" : "object",
            "properties" : {
              "callSets" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "dataMatrices" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/DataMatrix"
                }
              },
              "expandHomozygotes" : {
                "type" : "boolean"
              },
              "pagination" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Pagination"
                }
              },
              "sepPhased" : {
                "type" : "string"
              },
              "sepUnphased" : {
                "type" : "string"
              },
              "unknownString" : {
                "type" : "string"
              },
              "variantSets" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "variants" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "required" : [ "callSetDbIds", "variantSetDbIds" ]
          },
          "dataMatrix" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "dataMatrixAbbreviation" : {
            "type" : "string"
          },
          "dataMatrixName" : {
            "type" : "string"
          },
          "dataType" : {
            "type" : "string",
            "description" : "The type of field represented in this data matrix. This is intended to help parse the data out of JSON.",
            "enum" : [ "string", "integer", "float", "boolean" ]
          }
        }
      },
      "DatasetAuthorships" : {
        "type" : "object",
        "properties" : {
          "datasetPUI" : {
            "type" : "string"
          },
          "license" : {
            "type" : "string"
          },
          "publicReleaseDate" : {
            "type" : "string"
          },
          "submissionDate" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        }
      },
      "DocumentationLink" : {
        "type" : "object",
        "properties" : {
          "URL" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "OBO", "RDF", "WEBPAGE" ]
          }
        }
      },
      "Donor" : {
        "type" : "object",
        "properties" : {
          "donorAccessionNumber" : {
            "type" : "string"
          },
          "donorInstituteCode" : {
            "type" : "string"
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          }
        }
      },
      "EnvironmentParameters" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "environmentParametersDbId" : {
            "type" : "string"
          },
          "parameterName" : {
            "type" : "string"
          },
          "parameterPUI" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "unit" : {
            "type" : "string"
          },
          "unitPUI" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "valuePUI" : {
            "type" : "string"
          }
        },
        "required" : [ "description", "environmentParametersDbId", "parameterName" ]
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "eventDateRange" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/EventDateRange"
            }
          },
          "eventDbId" : {
            "type" : "string"
          },
          "eventDescription" : {
            "type" : "string"
          },
          "eventParameters" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/EventParameter"
            }
          },
          "eventType" : {
            "type" : "string"
          },
          "eventTypeDbId" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "eventDbId", "eventType" ]
      },
      "EventDateRange" : {
        "type" : "object",
        "properties" : {
          "discreteDates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "endDate" : {
            "type" : "string"
          },
          "eventDbId" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          }
        }
      },
      "EventParameter" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "eventDbId" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "units" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "valueDescription" : {
            "type" : "string"
          },
          "valuesByDate" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "EventSearchRequest" : {
        "type" : "object",
        "properties" : {
          "dateRangeEnd" : {
            "type" : "string"
          },
          "dateRangeStart" : {
            "type" : "string"
          },
          "eventDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "eventTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ExperimentalDesign" : {
        "type" : "object",
        "properties" : {
          "PUI" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          }
        }
      },
      "ExternalReference" : {
        "type" : "object",
        "properties" : {
          "referenceId" : {
            "type" : "string"
          },
          "referenceSource" : {
            "type" : "string"
          }
        }
      },
      "GenomeMap" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "comments" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "linkageGroupCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mapDbId" : {
            "type" : "string"
          },
          "mapName" : {
            "type" : "string"
          },
          "mapPUI" : {
            "type" : "string"
          },
          "markerCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markerPositions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/MarkerPosition"
            }
          },
          "publishedDate" : {
            "type" : "string"
          },
          "scientificName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "unit" : {
            "type" : "string"
          }
        },
        "required" : [ "commonCropName", "mapDbId", "type" ]
      },
      "GenomeMapSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mapDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mapPUI" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scientificName" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GenotypeMetadata" : {
        "type" : "object",
        "properties" : {
          "call" : {
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "properties" : {
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              },
              "callSetDbId" : {
                "type" : "string"
              },
              "callSetName" : {
                "type" : "string"
              },
              "genotypeMetadata" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GenotypeMetadata"
                }
              },
              "genotypeValue" : {
                "type" : "string"
              },
              "phaseSet" : {
                "type" : "string"
              },
              "variantDbId" : {
                "type" : "string"
              },
              "variantSetDbId" : {
                "type" : "string"
              },
              "variantSetName" : {
                "type" : "string"
              }
            },
            "required" : [ "callSetDbId", "variantDbId", "variantSetDbId" ]
          },
          "dataType" : {
            "type" : "string",
            "description" : "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
            "enum" : [ "string", "integer", "float", "boolean" ]
          },
          "fieldAbbreviation" : {
            "type" : "string"
          },
          "fieldName" : {
            "type" : "string"
          },
          "fieldValue" : {
            "type" : "string"
          }
        }
      },
      "GeoJSON" : {
        "type" : "object",
        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
        "properties" : {
          "geometry" : {
            "type" : "object",
            "oneOf" : [ {
              "type" : "object",
              "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties" : {
                "coordinates" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                },
                "type" : {
                  "type" : "string"
                }
              },
              "required" : [ "type" ]
            }, {
              "type" : "object",
              "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties" : {
                "coordinates" : {
                  "type" : "array",
                  "items" : {
                    "type" : "array",
                    "items" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "type" : "string"
                }
              },
              "required" : [ "type" ]
            } ]
          },
          "germplasmOrigin" : {
            "type" : "object",
            "properties" : {
              "coordinateUncertainty" : {
                "type" : "string"
              },
              "coordinates" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GeoJSON"
                }
              },
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              }
            }
          },
          "imageDbId" : {
            "type" : "string"
          },
          "imageName" : {
            "type" : "string"
          },
          "observationDbId" : {
            "type" : "string"
          },
          "observationUnit" : {
            "type" : "object",
            "properties" : {
              "entryType" : {
                "type" : "string",
                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                "enum" : [ "CHECK", "TEST", "FILLER" ]
              },
              "geoCoordinates" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GeoJSON"
                }
              },
              "observationLevel" : {
                "type" : "object",
                "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                "properties" : {
                  "levelCode" : {
                    "type" : "string"
                  },
                  "levelName" : {
                    "type" : "string"
                  },
                  "levelOrder" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              },
              "observationLevelRelationships" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                }
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "positionCoordinateX" : {
                "type" : "string"
              },
              "positionCoordinateXType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              },
              "positionCoordinateY" : {
                "type" : "string"
              },
              "positionCoordinateYType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              }
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "GeoJSONGeometry" : {
        "type" : "object",
        "oneOf" : [ {
          "type" : "object",
          "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
          "properties" : {
            "coordinates" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            },
            "type" : {
              "type" : "string"
            }
          },
          "required" : [ "type" ]
        }, {
          "type" : "object",
          "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
          "properties" : {
            "coordinates" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            },
            "type" : {
              "type" : "string"
            }
          },
          "required" : [ "type" ]
        } ]
      },
      "Germplasm" : {
        "type" : "object",
        "properties" : {
          "accessionNumber" : {
            "type" : "string"
          },
          "acquisitionDate" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeValues" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmAttributeValue"
            }
          },
          "biologicalStatusOfAccessionCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
            "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
          },
          "biologicalStatusOfAccessionDescription" : {
            "type" : "string"
          },
          "breedingMethodDbId" : {
            "type" : "string"
          },
          "breedingMethodName" : {
            "type" : "string"
          },
          "collection" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "countryOfOriginCode" : {
            "type" : "string"
          },
          "defaultDisplayName" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "donors" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Donor"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "genus" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmOrigin" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmOrigin"
            }
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "germplasmPreprocessing" : {
            "type" : "string"
          },
          "instituteCode" : {
            "type" : "string"
          },
          "instituteName" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "parentPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "pedigree" : {
            "type" : "string"
          },
          "progenyPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedSource" : {
            "type" : "string"
          },
          "seedSourceDescription" : {
            "type" : "string"
          },
          "siblingPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "species" : {
            "type" : "string"
          },
          "speciesAuthority" : {
            "type" : "string"
          },
          "storageTypes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/StorageType"
            }
          },
          "subtaxa" : {
            "type" : "string"
          },
          "subtaxaAuthority" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Synonym"
            }
          },
          "taxonIds" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/TaxonId"
            }
          }
        },
        "required" : [ "commonCropName", "germplasmDbId", "germplasmName", "germplasmPUI" ]
      },
      "GermplasmAttribute" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeCategory" : {
            "type" : "string"
          },
          "attributeDescription" : {
            "type" : "string"
          },
          "attributeName" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "attributeValues" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmAttributeValue"
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "attributeDbId", "attributeName", "methodName", "scaleDbId", "scaleName", "traitName" ]
      },
      "GermplasmAttributeNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeCategory" : {
            "type" : "string"
          },
          "attributeDbId" : {
            "type" : "string"
          },
          "attributeDescription" : {
            "type" : "string"
          },
          "attributeName" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "attributeValues" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmAttributeValue"
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "attributeDbId", "attributeName", "methodName", "scaleDbId", "scaleName", "traitName" ]
      },
      "GermplasmAttributeSearchRequest" : {
        "type" : "object",
        "properties" : {
          "attributeCategories" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributeDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributeNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/TraitDataType"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scaleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scalePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitEntities" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitEntityPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GermplasmAttributeValue" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeDbId" : {
            "type" : "string"
          },
          "attributeName" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "determinedDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "attributeName", "attributeValueDbId" ]
      },
      "GermplasmAttributeValueNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeDbId" : {
            "type" : "string"
          },
          "attributeName" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "attributeValueDbId" : {
            "type" : "string"
          },
          "determinedDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "attributeName", "attributeValueDbId" ]
      },
      "GermplasmAttributeValueSearchRequest" : {
        "type" : "object",
        "properties" : {
          "attributeDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributeNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributeValueDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/TraitDataType"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GermplasmChild" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "parentType" : {
            "type" : "string",
            "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
            "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
          },
          "pedigreeNodeDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "germplasmDbId", "germplasmName", "germplasmPUI", "parentType" ]
      },
      "GermplasmNewRequest" : {
        "type" : "object",
        "properties" : {
          "accessionNumber" : {
            "type" : "string"
          },
          "acquisitionDate" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "attributeValues" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmAttributeValue"
            }
          },
          "biologicalStatusOfAccessionCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
            "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
          },
          "biologicalStatusOfAccessionDescription" : {
            "type" : "string"
          },
          "breedingMethodDbId" : {
            "type" : "string"
          },
          "breedingMethodName" : {
            "type" : "string"
          },
          "collection" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "countryOfOriginCode" : {
            "type" : "string"
          },
          "defaultDisplayName" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "donors" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Donor"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "genus" : {
            "type" : "string"
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmOrigin" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmOrigin"
            }
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "germplasmPreprocessing" : {
            "type" : "string"
          },
          "instituteCode" : {
            "type" : "string"
          },
          "instituteName" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "parentPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "pedigree" : {
            "type" : "string"
          },
          "progenyPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedSource" : {
            "type" : "string"
          },
          "seedSourceDescription" : {
            "type" : "string"
          },
          "siblingPedigreeNodes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/PedigreeNode"
            }
          },
          "species" : {
            "type" : "string"
          },
          "speciesAuthority" : {
            "type" : "string"
          },
          "storageTypes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/StorageType"
            }
          },
          "subtaxa" : {
            "type" : "string"
          },
          "subtaxaAuthority" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Synonym"
            }
          },
          "taxonIds" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/TaxonId"
            }
          }
        },
        "required" : [ "commonCropName", "germplasmDbId", "germplasmDbId", "germplasmName", "germplasmPUI" ]
      },
      "GermplasmOrigin" : {
        "type" : "object",
        "properties" : {
          "coordinateUncertainty" : {
            "type" : "string"
          },
          "coordinates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GeoJSON"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          }
        }
      },
      "GermplasmParent" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "parentType" : {
            "type" : "string",
            "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
            "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
          },
          "pedigreeNodeDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "germplasmDbId", "germplasmName", "germplasmPUI", "parentType" ]
      },
      "GermplasmSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessionNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "binomialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "collections" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "familyCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "genus" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instituteCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "parentDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "progenyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "species" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GrowthFacility" : {
        "type" : "object",
        "properties" : {
          "PUI" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          }
        }
      },
      "Image" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "copyright" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "imageFileName" : {
            "type" : "string"
          },
          "imageFileSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageHeight" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageLocation" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "imageName" : {
            "type" : "string"
          },
          "imageTimeStamp" : {
            "type" : "string"
          },
          "imageURL" : {
            "type" : "string"
          },
          "imageWidth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mimeType" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "imageDbId" ]
      },
      "ImageNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "copyright" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "imageDbId" : {
            "type" : "string"
          },
          "imageFileName" : {
            "type" : "string"
          },
          "imageFileSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageHeight" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageLocation" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "imageName" : {
            "type" : "string"
          },
          "imageTimeStamp" : {
            "type" : "string"
          },
          "imageURL" : {
            "type" : "string"
          },
          "imageWidth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mimeType" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "imageDbId", "imageDbId" ]
      },
      "ImageSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "imageDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "imageFileNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "imageFileSizeMax" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageFileSizeMin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageHeightMax" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageHeightMin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageLocation" : {
            "type" : "object",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "imageNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "imageTimeStampRangeEnd" : {
            "type" : "string"
          },
          "imageTimeStampRangeStart" : {
            "type" : "string"
          },
          "imageWidthMax" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imageWidthMin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mimeTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "LastUpdate" : {
        "type" : "object",
        "properties" : {
          "lastUpdateDbId" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        },
        "required" : [ "lastUpdateDbId" ]
      },
      "List" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dateCreated" : {
            "type" : "string"
          },
          "dateModified" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "listDescription" : {
            "type" : "string"
          },
          "listName" : {
            "type" : "string"
          },
          "listOwnerName" : {
            "type" : "string"
          },
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "listSource" : {
            "type" : "string"
          },
          "listType" : {
            "type" : "string",
            "description" : "The type of objects that are referenced in a List",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          },
          "personDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "listDbId", "listName", "listType" ]
      },
      "ListNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dateCreated" : {
            "type" : "string"
          },
          "dateModified" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "listDbId" : {
            "type" : "string"
          },
          "listDescription" : {
            "type" : "string"
          },
          "listName" : {
            "type" : "string"
          },
          "listOwnerName" : {
            "type" : "string"
          },
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "listSource" : {
            "type" : "string"
          },
          "listType" : {
            "type" : "string",
            "description" : "The type of objects that are referenced in a List",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          },
          "personDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "listDbId", "listDbId", "listName", "listType" ]
      },
      "ListSearchRequest" : {
        "type" : "object",
        "properties" : {
          "dateCreatedRangeEnd" : {
            "type" : "string"
          },
          "dateCreatedRangeStart" : {
            "type" : "string"
          },
          "dateModifiedRangeEnd" : {
            "type" : "string"
          },
          "dateModifiedRangeStart" : {
            "type" : "string"
          },
          "listDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listOwnerNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listOwnerPersonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listSources" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listType" : {
            "type" : "string",
            "description" : "The type of objects that are referenced in a List",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          }
        }
      },
      "ListType" : {
        "type" : "string",
        "description" : "The type of objects that are referenced in a List",
        "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
      },
      "Location" : {
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "childLocations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Location"
            }
          },
          "coordinateDescription" : {
            "type" : "string"
          },
          "coordinateUncertainty" : {
            "type" : "string"
          },
          "coordinates" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "countryCode" : {
            "type" : "string"
          },
          "countryName" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "environmentType" : {
            "type" : "string"
          },
          "exposure" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "instituteAddress" : {
            "type" : "string"
          },
          "instituteName" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "locationType" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "seedLots" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLot"
            }
          },
          "siteStatus" : {
            "type" : "string"
          },
          "slope" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Study"
            }
          },
          "topography" : {
            "type" : "string"
          }
        },
        "required" : [ "locationDbId", "locationName" ]
      },
      "LocationNewRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "childLocations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Location"
            }
          },
          "coordinateDescription" : {
            "type" : "string"
          },
          "coordinateUncertainty" : {
            "type" : "string"
          },
          "coordinates" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "countryCode" : {
            "type" : "string"
          },
          "countryName" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "environmentType" : {
            "type" : "string"
          },
          "exposure" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "instituteAddress" : {
            "type" : "string"
          },
          "instituteName" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "locationType" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "seedLots" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLot"
            }
          },
          "siteStatus" : {
            "type" : "string"
          },
          "slope" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Study"
            }
          },
          "topography" : {
            "type" : "string"
          }
        },
        "required" : [ "locationDbId", "locationDbId", "locationName" ]
      },
      "LocationSearchRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "altitudeMax" : {
            "type" : "number"
          },
          "altitudeMin" : {
            "type" : "number"
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "coordinates" : {
            "type" : "object",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "countryCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "countryNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instituteAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instituteNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "parentLocationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "parentLocationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MarkerPosition" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "linkageGroupName" : {
            "type" : "string"
          },
          "map" : {
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "properties" : {
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              },
              "comments" : {
                "type" : "string"
              },
              "commonCropName" : {
                "type" : "string"
              },
              "documentationURL" : {
                "type" : "string"
              },
              "linkageGroupCount" : {
                "type" : "integer",
                "format" : "int32"
              },
              "mapDbId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "mapPUI" : {
                "type" : "string"
              },
              "markerCount" : {
                "type" : "integer",
                "format" : "int32"
              },
              "markerPositions" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/MarkerPosition"
                }
              },
              "publishedDate" : {
                "type" : "string"
              },
              "scientificName" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string"
              },
              "unit" : {
                "type" : "string"
              }
            },
            "required" : [ "commonCropName", "mapDbId", "type" ]
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "variantDbId" : {
            "type" : "string"
          }
        }
      },
      "MarkerPositionSearchRequest" : {
        "type" : "object",
        "properties" : {
          "linkageGroupNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mapDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "maxPosition" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minPosition" : {
            "type" : "integer",
            "format" : "int32"
          },
          "variantDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MetadataField" : {
        "type" : "object",
        "properties" : {
          "dataType" : {
            "type" : "string",
            "description" : "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
            "enum" : [ "string", "integer", "float", "boolean" ]
          },
          "fieldAbbreviation" : {
            "type" : "string"
          },
          "fieldName" : {
            "type" : "string"
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          }
        }
      },
      "Method" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "bibliographicalReference" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "formula" : {
            "type" : "string"
          },
          "methodClass" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "methodDbId", "methodName" ]
      },
      "MethodNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "bibliographicalReference" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "formula" : {
            "type" : "string"
          },
          "methodClass" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          }
        },
        "required" : [ "methodDbId", "methodName" ]
      },
      "Observation" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "collector" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "geoCoordinates" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "images" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationTimeStamp" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observationVariableDbId" : {
            "type" : "string"
          },
          "observationVariableName" : {
            "type" : "string"
          },
          "observationVariablePUI" : {
            "type" : "string"
          },
          "seasonDbId" : {
            "type" : "string"
          },
          "seasonName" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "uploadedBy" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "observationDbId" ]
      },
      "ObservationNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "collector" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "geoCoordinates" : {
            "type" : "object",
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "properties" : {
              "geometry" : {
                "type" : "object",
                "oneOf" : [ {
                  "type" : "object",
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                }, {
                  "type" : "object",
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "type" ]
                } ]
              },
              "germplasmOrigin" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string"
                  },
                  "coordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "germplasmDbId" : {
                    "type" : "string"
                  },
                  "germplasmName" : {
                    "type" : "string"
                  },
                  "germplasmPUI" : {
                    "type" : "string"
                  }
                }
              },
              "imageDbId" : {
                "type" : "string"
              },
              "imageName" : {
                "type" : "string"
              },
              "observationDbId" : {
                "type" : "string"
              },
              "observationUnit" : {
                "type" : "object",
                "properties" : {
                  "entryType" : {
                    "type" : "string",
                    "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                    "enum" : [ "CHECK", "TEST", "FILLER" ]
                  },
                  "geoCoordinates" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/GeoJSON"
                    }
                  },
                  "observationLevel" : {
                    "type" : "object",
                    "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
                    "properties" : {
                      "levelCode" : {
                        "type" : "string"
                      },
                      "levelName" : {
                        "type" : "string"
                      },
                      "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                      }
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                  },
                  "observationUnitDbId" : {
                    "type" : "string"
                  },
                  "observationUnitName" : {
                    "type" : "string"
                  },
                  "observationUnitPUI" : {
                    "type" : "string"
                  },
                  "positionCoordinateX" : {
                    "type" : "string"
                  },
                  "positionCoordinateXType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  },
                  "positionCoordinateY" : {
                    "type" : "string"
                  },
                  "positionCoordinateYType" : {
                    "type" : "string",
                    "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                    "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                  }
                }
              },
              "type" : {
                "type" : "string"
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "images" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationDbId" : {
            "type" : "string"
          },
          "observationTimeStamp" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observationVariableDbId" : {
            "type" : "string"
          },
          "observationVariableName" : {
            "type" : "string"
          },
          "observationVariablePUI" : {
            "type" : "string"
          },
          "seasonDbId" : {
            "type" : "string"
          },
          "seasonName" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "uploadedBy" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "observationDbId", "observationDbId" ]
      },
      "ObservationSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
            }
          },
          "observationLevels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitLevel"
            }
          },
          "observationTimeStampRangeEnd" : {
            "type" : "string"
          },
          "observationTimeStampRangeStart" : {
            "type" : "string"
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ObservationUnit" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          },
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "images" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Image"
            }
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observationUnitPosition" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitPosition"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedLotDbId" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "treatments" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Treatment"
            }
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "observationUnitDbId" ]
      },
      "ObservationUnitHierarchyLevel" : {
        "type" : "object",
        "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
        "properties" : {
          "levelName" : {
            "type" : "string"
          },
          "levelOrder" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ObservationUnitLevel" : {
        "type" : "object",
        "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
        "properties" : {
          "levelCode" : {
            "type" : "string"
          },
          "levelName" : {
            "type" : "string"
          },
          "levelOrder" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ObservationUnitLevelRelationship" : {
        "type" : "object",
        "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** ",
        "properties" : {
          "levelCode" : {
            "type" : "string"
          },
          "levelName" : {
            "type" : "string"
          },
          "levelOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          }
        }
      },
      "ObservationUnitNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          },
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "images" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Image"
            }
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "observationUnitPosition" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitPosition"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedLotDbId" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "treatments" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Treatment"
            }
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "observationUnitDbId", "observationUnitDbId" ]
      },
      "ObservationUnitPosition" : {
        "type" : "object",
        "properties" : {
          "entryType" : {
            "type" : "string",
            "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
            "enum" : [ "CHECK", "TEST", "FILLER" ]
          },
          "geoCoordinates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GeoJSON"
            }
          },
          "observationLevel" : {
            "type" : "object",
            "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" ",
            "properties" : {
              "levelCode" : {
                "type" : "string"
              },
              "levelName" : {
                "type" : "string"
              },
              "levelOrder" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
            }
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "positionCoordinateX" : {
            "type" : "string"
          },
          "positionCoordinateXType" : {
            "type" : "string",
            "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
            "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
          },
          "positionCoordinateY" : {
            "type" : "string"
          },
          "positionCoordinateYType" : {
            "type" : "string",
            "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
            "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
          }
        }
      },
      "ObservationUnitSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "includeObservations" : {
            "type" : "boolean"
          },
          "locationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
            }
          },
          "observationLevels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitLevel"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ObservationVariable" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "observationVariableName" : {
            "type" : "string"
          },
          "observationVariablePUI" : {
            "type" : "string"
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "methodName", "observationVariableDbId", "observationVariableName", "scaleDbId", "scaleName", "traitName" ]
      },
      "ObservationVariableNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "observationVariableDbId" : {
            "type" : "string"
          },
          "observationVariableName" : {
            "type" : "string"
          },
          "observationVariablePUI" : {
            "type" : "string"
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "methodName", "observationVariableDbId", "observationVariableDbId", "observationVariableName", "scaleDbId", "scaleName", "traitName" ]
      },
      "ObservationVariableSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/TraitDataType"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "methodPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scaleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scalePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitEntities" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitEntityPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Ontology" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "authors" : {
            "type" : "string"
          },
          "copyright" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "licence" : {
            "type" : "string"
          },
          "ontologyName" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        },
        "required" : [ "ontologyDbId", "ontologyName" ]
      },
      "OntologyNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "authors" : {
            "type" : "string"
          },
          "copyright" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "licence" : {
            "type" : "string"
          },
          "ontologyDbId" : {
            "type" : "string"
          },
          "ontologyName" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        },
        "required" : [ "ontologyDbId", "ontologyDbId", "ontologyName" ]
      },
      "OntologyReference" : {
        "type" : "object",
        "properties" : {
          "documentationLinks" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DocumentationLink"
            }
          },
          "ontologyDbId" : {
            "type" : "string"
          },
          "ontologyName" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        },
        "required" : [ "ontologyDbId", "ontologyName" ]
      },
      "OntologyTerm" : {
        "type" : "object",
        "properties" : {
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "term" : {
            "type" : "string"
          },
          "termURI" : {
            "type" : "string"
          }
        }
      },
      "Pagination" : {
        "type" : "object",
        "properties" : {
          "alleleMatrix" : {
            "type" : "object",
            "properties" : {
              "callSets" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "dataMatrices" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/DataMatrix"
                }
              },
              "expandHomozygotes" : {
                "type" : "boolean"
              },
              "pagination" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Pagination"
                }
              },
              "sepPhased" : {
                "type" : "string"
              },
              "sepUnphased" : {
                "type" : "string"
              },
              "unknownString" : {
                "type" : "string"
              },
              "variantSets" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "variants" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "required" : [ "callSetDbIds", "variantSetDbIds" ]
          },
          "dimension" : {
            "type" : "string",
            "description" : "The dimension of the matrix being paginated",
            "enum" : [ "CALLSETS", "VARIANTS" ]
          },
          "page" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ParentType" : {
        "type" : "string",
        "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
        "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
      },
      "PedigreeNode" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "breedingMethodDbId" : {
            "type" : "string"
          },
          "breedingMethodName" : {
            "type" : "string"
          },
          "crossingProjectDbId" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "crossingYear" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultDisplayName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "familyCode" : {
            "type" : "string"
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "parents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmParent"
            }
          },
          "pedigreeNodeDbId" : {
            "type" : "string"
          },
          "pedigreeString" : {
            "type" : "string"
          },
          "progeny" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/GermplasmChild"
            }
          },
          "siblings" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Germplasm"
            }
          }
        },
        "required" : [ "germplasmDbId", "germplasmName", "germplasmPUI" ]
      },
      "PedigreeNodeSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessionNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "binomialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "collections" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "familyCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "genus" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "includeFullTree" : {
            "type" : "boolean"
          },
          "includeParents" : {
            "type" : "boolean"
          },
          "includeProgeny" : {
            "type" : "boolean"
          },
          "includeSiblings" : {
            "type" : "boolean"
          },
          "instituteCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pedigreeDepth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "progenyDepth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "species" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Person" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "description" : {
            "type" : "string"
          },
          "emailAddress" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "lists" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/List"
            }
          },
          "mailingAddress" : {
            "type" : "string"
          },
          "middleName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "programs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Program"
            }
          },
          "userID" : {
            "type" : "string"
          }
        },
        "required" : [ "personDbId" ]
      },
      "PersonNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "description" : {
            "type" : "string"
          },
          "emailAddress" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "lists" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/List"
            }
          },
          "mailingAddress" : {
            "type" : "string"
          },
          "middleName" : {
            "type" : "string"
          },
          "personDbId" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "programs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Program"
            }
          },
          "userID" : {
            "type" : "string"
          }
        },
        "required" : [ "personDbId", "personDbId" ]
      },
      "PersonSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "firstNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "lastNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mailingAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "middleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "personDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "userIDs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PlannedCross" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "crossType" : {
            "type" : "string",
            "description" : "The type of cross make. Accepted values for this field are 'BIPARENTAL', 'SELF', 'OPEN_POLLINATED', 'BULK',  'BULK_SELFED',  'BULK_OPEN_POLLINATED' and 'DOUBLE_HAPLOID'.",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crosses" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Cross"
            }
          },
          "crossingProjectDbId" : {
            "type" : "string"
          },
          "crossingProjectName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string"
              },
              "germplasmName" : {
                "type" : "string"
              },
              "germplasmPUI" : {
                "type" : "string"
              },
              "observationUnitDbId" : {
                "type" : "string"
              },
              "observationUnitName" : {
                "type" : "string"
              },
              "observationUnitPUI" : {
                "type" : "string"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. ",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
              }
            }
          },
          "plannedCrossDbId" : {
            "type" : "string"
          },
          "plannedCrossName" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
            "enum" : [ "TODO", "DONE", "SKIPPED" ]
          }
        },
        "required" : [ "plannedCrossDbId" ]
      },
      "PlannedCrossSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossingProjectDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossingProjectNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plannedCrossDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plannedCrossNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "statuses" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "TODO", "DONE", "SKIPPED" ]
            }
          }
        }
      },
      "Plate" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "plateBarcode" : {
            "type" : "string"
          },
          "plateFormat" : {
            "type" : "string",
            "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "enum" : [ "PLATE_96", "TUBES" ]
          },
          "plateName" : {
            "type" : "string"
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "enum" : [ "DNA", "RNA", "TISSUE", "MIXED" ]
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "plateDbId", "plateName" ]
      },
      "PlateNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "plateBarcode" : {
            "type" : "string"
          },
          "plateDbId" : {
            "type" : "string"
          },
          "plateFormat" : {
            "type" : "string",
            "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "enum" : [ "PLATE_96", "TUBES" ]
          },
          "plateName" : {
            "type" : "string"
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "enum" : [ "DNA", "RNA", "TISSUE", "MIXED" ]
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "plateDbId", "plateName" ]
      },
      "PlateSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plateBarcodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plateDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plateNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleGroupDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PollinationEvent" : {
        "type" : "object",
        "properties" : {
          "crossDbId" : {
            "type" : "string"
          },
          "crossName" : {
            "type" : "string"
          },
          "pollinationNumber" : {
            "type" : "string"
          },
          "pollinationSuccessful" : {
            "type" : "boolean"
          },
          "pollinationTimeStamp" : {
            "type" : "string"
          }
        }
      },
      "Program" : {
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "crossingProjects" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossingProject"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "fundingInformation" : {
            "type" : "string"
          },
          "objective" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "personDbId" : {
            "type" : "string"
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "programName" : {
            "type" : "string"
          },
          "programType" : {
            "type" : "string",
            "description" : "The type of program entity this object represents\n<br/> 'STANDARD' represents a standard, permanent breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   ",
            "enum" : [ "STANDARD", "PROJECT" ]
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedLots" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLot"
            }
          },
          "trials" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Trial"
            }
          }
        },
        "required" : [ "programDbId", "programName" ]
      },
      "ProgramNewRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "crossingProjects" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CrossingProject"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "fundingInformation" : {
            "type" : "string"
          },
          "objective" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "personDbId" : {
            "type" : "string"
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "programType" : {
            "type" : "string",
            "description" : "The type of program entity this object represents\n<br/> 'STANDARD' represents a standard, permanent breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   ",
            "enum" : [ "STANDARD", "PROJECT" ]
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seedLots" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLot"
            }
          },
          "trials" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Trial"
            }
          }
        },
        "required" : [ "programDbId", "programDbId", "programName" ]
      },
      "ProgramSearchRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "leadPersonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "leadPersonNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "objectives" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "STANDARD", "PROJECT" ]
            }
          }
        }
      },
      "Publication" : {
        "type" : "object",
        "properties" : {
          "publicationPUI" : {
            "type" : "string"
          },
          "publicationReference" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "isDerived" : {
            "type" : "boolean"
          },
          "length" : {
            "type" : "integer",
            "format" : "int32"
          },
          "md5checksum" : {
            "type" : "string"
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "sourceAccessions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sourceDivergence" : {
            "type" : "number"
          },
          "sourceGermplasm" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Germplasm"
            }
          },
          "sourceURI" : {
            "type" : "string"
          },
          "species" : {
            "type" : "object",
            "properties" : {
              "referenceDbId" : {
                "type" : "string"
              },
              "referenceName" : {
                "type" : "string"
              },
              "referenceSetDbId" : {
                "type" : "string"
              },
              "referenceSetName" : {
                "type" : "string"
              },
              "term" : {
                "type" : "string"
              },
              "termURI" : {
                "type" : "string"
              }
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Variant"
            }
          }
        },
        "required" : [ "referenceDbId", "referenceName" ]
      },
      "ReferenceSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "isDerived" : {
            "type" : "boolean"
          },
          "maxLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "md5checksums" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "minLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ReferenceSet" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "assemblyPUI" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "isDerived" : {
            "type" : "boolean"
          },
          "md5checksum" : {
            "type" : "string"
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "sourceAccessions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sourceGermplasm" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Germplasm"
            }
          },
          "sourceURI" : {
            "type" : "string"
          },
          "species" : {
            "type" : "object",
            "properties" : {
              "referenceDbId" : {
                "type" : "string"
              },
              "referenceName" : {
                "type" : "string"
              },
              "referenceSetDbId" : {
                "type" : "string"
              },
              "referenceSetName" : {
                "type" : "string"
              },
              "term" : {
                "type" : "string"
              },
              "termURI" : {
                "type" : "string"
              }
            }
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/VariantSet"
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Variant"
            }
          }
        },
        "required" : [ "referenceSetDbId", "referenceSetName" ]
      },
      "ReferenceSetNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "assemblyPUI" : {
            "type" : "string"
          },
          "commonCropName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "isDerived" : {
            "type" : "boolean"
          },
          "md5checksum" : {
            "type" : "string"
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "sourceAccessions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sourceGermplasm" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Germplasm"
            }
          },
          "sourceURI" : {
            "type" : "string"
          },
          "species" : {
            "type" : "object",
            "properties" : {
              "referenceDbId" : {
                "type" : "string"
              },
              "referenceName" : {
                "type" : "string"
              },
              "referenceSetDbId" : {
                "type" : "string"
              },
              "referenceSetName" : {
                "type" : "string"
              },
              "term" : {
                "type" : "string"
              },
              "termURI" : {
                "type" : "string"
              }
            }
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/VariantSet"
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Variant"
            }
          }
        },
        "required" : [ "referenceSetDbId", "referenceSetDbId", "referenceSetName" ]
      },
      "ReferenceSetSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "assemblyPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "md5checksums" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Sample" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CallSet"
            }
          },
          "column" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "plateDbId" : {
            "type" : "string"
          },
          "plateName" : {
            "type" : "string"
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "sampleBarcode" : {
            "type" : "string"
          },
          "sampleDescription" : {
            "type" : "string"
          },
          "sampleGroupId" : {
            "type" : "string"
          },
          "sampleName" : {
            "type" : "string"
          },
          "samplePUI" : {
            "type" : "string"
          },
          "sampleTimestamp" : {
            "type" : "string"
          },
          "sampleType" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "takenBy" : {
            "type" : "string"
          },
          "tissueType" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          },
          "well" : {
            "type" : "string"
          }
        },
        "required" : [ "sampleDbId", "sampleName" ]
      },
      "SampleNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CallSet"
            }
          },
          "column" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          },
          "plateDbId" : {
            "type" : "string"
          },
          "plateName" : {
            "type" : "string"
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "sampleBarcode" : {
            "type" : "string"
          },
          "sampleDbId" : {
            "type" : "string"
          },
          "sampleDescription" : {
            "type" : "string"
          },
          "sampleGroupId" : {
            "type" : "string"
          },
          "sampleName" : {
            "type" : "string"
          },
          "samplePUI" : {
            "type" : "string"
          },
          "sampleTimestamp" : {
            "type" : "string"
          },
          "sampleType" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "takenBy" : {
            "type" : "string"
          },
          "tissueType" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          },
          "well" : {
            "type" : "string"
          }
        },
        "required" : [ "sampleDbId", "sampleName" ]
      },
      "SampleSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plateDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "plateNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleGroupDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Scale" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "dataType" : {
            "type" : "string",
            "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "units" : {
            "type" : "string"
          },
          "validValues" : {
            "type" : "object",
            "properties" : {
              "categories" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ValidValuesCategory"
                }
              },
              "maximumValue" : {
                "type" : "string"
              },
              "minimumValue" : {
                "type" : "string"
              },
              "scaleDbId" : {
                "type" : "string"
              },
              "scaleName" : {
                "type" : "string"
              },
              "scalePUI" : {
                "type" : "string"
              }
            }
          }
        },
        "required" : [ "scaleDbId", "scaleName" ]
      },
      "ScaleNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "dataType" : {
            "type" : "string",
            "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "units" : {
            "type" : "string"
          },
          "validValues" : {
            "type" : "object",
            "properties" : {
              "categories" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ValidValuesCategory"
                }
              },
              "maximumValue" : {
                "type" : "string"
              },
              "minimumValue" : {
                "type" : "string"
              },
              "scaleDbId" : {
                "type" : "string"
              },
              "scaleName" : {
                "type" : "string"
              },
              "scalePUI" : {
                "type" : "string"
              }
            }
          }
        },
        "required" : [ "scaleDbId", "scaleDbId", "scaleName" ]
      },
      "Season" : {
        "type" : "object",
        "properties" : {
          "seasonDbId" : {
            "type" : "string"
          },
          "seasonName" : {
            "type" : "string"
          },
          "year" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "seasonDbId" ]
      },
      "SeasonSearchRequest" : {
        "type" : "object",
        "properties" : {
          "seasonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seasonNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seasons" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "years" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SeedLot" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "amount" : {
            "type" : "number"
          },
          "contentMixture" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ContentMixture"
            }
          },
          "createdDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "fromSeedLotTransactions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLotTransaction"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "seedLotDescription" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          },
          "sourceCollection" : {
            "type" : "string"
          },
          "storageLocation" : {
            "type" : "string"
          },
          "toSeedLotTransactions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLotTransaction"
            }
          },
          "units" : {
            "type" : "string"
          }
        },
        "required" : [ "seedLotDbId", "seedLotName" ]
      },
      "SeedLotNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "amount" : {
            "type" : "number"
          },
          "contentMixture" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ContentMixture"
            }
          },
          "createdDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "fromSeedLotTransactions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLotTransaction"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "seedLotDbId" : {
            "type" : "string"
          },
          "seedLotDescription" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          },
          "sourceCollection" : {
            "type" : "string"
          },
          "storageLocation" : {
            "type" : "string"
          },
          "toSeedLotTransactions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/SeedLotTransaction"
            }
          },
          "units" : {
            "type" : "string"
          }
        },
        "required" : [ "seedLotDbId", "seedLotDbId", "seedLotName" ]
      },
      "SeedLotSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "crossNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seedLotDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SeedLotTransaction" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "amount" : {
            "type" : "number"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "seedLotDbId" : {
            "type" : "string"
          },
          "seedLotName" : {
            "type" : "string"
          },
          "transactionDbId" : {
            "type" : "string"
          },
          "transactionDescription" : {
            "type" : "string"
          },
          "transactionTimestamp" : {
            "type" : "string"
          },
          "units" : {
            "type" : "string"
          }
        },
        "required" : [ "transactionDbId" ]
      },
      "StorageType" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)",
            "enum" : [ "10", "11", "12", "13", "20", "30", "40", "50", "99" ]
          },
          "description" : {
            "type" : "string"
          },
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          }
        }
      },
      "Study" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CallSet"
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "culturalPractices" : {
            "type" : "string"
          },
          "dataLinks" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DataLink"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string"
          },
          "environmentParameters" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/EnvironmentParameters"
            }
          },
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "experimentalDesign" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string"
              },
              "description" : {
                "type" : "string"
              },
              "studyDbId" : {
                "type" : "string"
              },
              "studyName" : {
                "type" : "string"
              },
              "studyPUI" : {
                "type" : "string"
              }
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthFacility" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string"
              },
              "description" : {
                "type" : "string"
              },
              "studyDbId" : {
                "type" : "string"
              },
              "studyName" : {
                "type" : "string"
              },
              "studyPUI" : {
                "type" : "string"
              }
            }
          },
          "lastUpdateDbId" : {
            "type" : "string"
          },
          "license" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationLevels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitHierarchyLevel"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "observationUnitsDescription" : {
            "type" : "string"
          },
          "observationVariables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seasons" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "startDate" : {
            "type" : "string"
          },
          "studyCode" : {
            "type" : "string"
          },
          "studyDescription" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "studyType" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/VariantSet"
            }
          }
        },
        "required" : [ "studyDbId", "studyName" ]
      },
      "StudyNewRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/CallSet"
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "culturalPractices" : {
            "type" : "string"
          },
          "dataLinks" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DataLink"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string"
          },
          "environmentParameters" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/EnvironmentParameters"
            }
          },
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "experimentalDesign" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string"
              },
              "description" : {
                "type" : "string"
              },
              "studyDbId" : {
                "type" : "string"
              },
              "studyName" : {
                "type" : "string"
              },
              "studyPUI" : {
                "type" : "string"
              }
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthFacility" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string"
              },
              "description" : {
                "type" : "string"
              },
              "studyDbId" : {
                "type" : "string"
              },
              "studyName" : {
                "type" : "string"
              },
              "studyPUI" : {
                "type" : "string"
              }
            }
          },
          "lastUpdateDbId" : {
            "type" : "string"
          },
          "license" : {
            "type" : "string"
          },
          "locationDbId" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "observationLevels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnitHierarchyLevel"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "observationUnitsDescription" : {
            "type" : "string"
          },
          "observationVariables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observations" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Observation"
            }
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "seasons" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "startDate" : {
            "type" : "string"
          },
          "studyCode" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyDescription" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "studyType" : {
            "type" : "string"
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          },
          "variantSets" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/VariantSet"
            }
          }
        },
        "required" : [ "studyDbId", "studyDbId", "studyName" ]
      },
      "StudySearchRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Synonym" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "synonym" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "TaxonId" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string"
          },
          "germplasmName" : {
            "type" : "string"
          },
          "germplasmPUI" : {
            "type" : "string"
          },
          "sourceName" : {
            "type" : "string"
          },
          "taxonId" : {
            "type" : "string"
          }
        },
        "required" : [ "sourceName", "taxonId" ]
      },
      "Trait" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "alternativeAbbreviations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attribute" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "string"
          },
          "entityPUI" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "mainAbbreviation" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitClass" : {
            "type" : "string"
          },
          "traitDescription" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "traitDbId", "traitName" ]
      },
      "TraitDataType" : {
        "type" : "string",
        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
        "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
      },
      "TraitNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "alternativeAbbreviations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attribute" : {
            "type" : "string"
          },
          "attributePUI" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "string"
          },
          "entityPUI" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "mainAbbreviation" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitClass" : {
            "type" : "string"
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitDescription" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "traitDbId", "traitName" ]
      },
      "Treatment" : {
        "type" : "object",
        "properties" : {
          "factor" : {
            "type" : "string"
          },
          "modality" : {
            "type" : "string"
          },
          "observationUnitDbId" : {
            "type" : "string"
          },
          "observationUnitName" : {
            "type" : "string"
          },
          "observationUnitPUI" : {
            "type" : "string"
          }
        }
      },
      "Trial" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "datasetAuthorships" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DatasetAuthorships"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "publications" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Publication"
            }
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "startDate" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Study"
            }
          },
          "trialDescription" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "trialDbId", "trialName" ]
      },
      "TrialNewRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "datasetAuthorships" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/DatasetAuthorships"
            }
          },
          "documentationURL" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "observationUnits" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ObservationUnit"
            }
          },
          "plates" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Plate"
            }
          },
          "programDbId" : {
            "type" : "string"
          },
          "programName" : {
            "type" : "string"
          },
          "publications" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Publication"
            }
          },
          "samples" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Sample"
            }
          },
          "startDate" : {
            "type" : "string"
          },
          "studies" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Study"
            }
          },
          "trialDbId" : {
            "type" : "string"
          },
          "trialDescription" : {
            "type" : "string"
          },
          "trialName" : {
            "type" : "string"
          },
          "trialPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "trialDbId", "trialDbId", "trialName" ]
      },
      "TrialSearchRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "contactDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "searchDateRangeEnd" : {
            "type" : "string"
          },
          "searchDateRangeStart" : {
            "type" : "string"
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialPUIs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ValidValues" : {
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ValidValuesCategory"
            }
          },
          "maximumValue" : {
            "type" : "string"
          },
          "minimumValue" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          }
        }
      },
      "ValidValuesCategory" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "validValues" : {
            "type" : "object",
            "properties" : {
              "categories" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ValidValuesCategory"
                }
              },
              "maximumValue" : {
                "type" : "string"
              },
              "minimumValue" : {
                "type" : "string"
              },
              "scaleDbId" : {
                "type" : "string"
              },
              "scaleName" : {
                "type" : "string"
              },
              "scalePUI" : {
                "type" : "string"
              }
            }
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Variable" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "commonCropName" : {
            "type" : "string"
          },
          "contextOfUse" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string"
          },
          "documentationURL" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "growthStage" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "methodDbId" : {
            "type" : "string"
          },
          "methodName" : {
            "type" : "string"
          },
          "methodPUI" : {
            "type" : "string"
          },
          "ontologyReferenceDbId" : {
            "type" : "string"
          },
          "scaleDbId" : {
            "type" : "string"
          },
          "scaleName" : {
            "type" : "string"
          },
          "scalePUI" : {
            "type" : "string"
          },
          "scientist" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "submissionTimestamp" : {
            "type" : "string"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "traitDbId" : {
            "type" : "string"
          },
          "traitName" : {
            "type" : "string"
          },
          "traitPUI" : {
            "type" : "string"
          }
        },
        "required" : [ "methodName", "scaleDbId", "scaleName", "traitName" ]
      },
      "Variant" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "analysis" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "calls" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Call"
            }
          },
          "ciend" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "cipos" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "created" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "filtersApplied" : {
            "type" : "boolean"
          },
          "filtersFailed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filtersPassed" : {
            "type" : "boolean"
          },
          "markerPositions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/MarkerPosition"
            }
          },
          "referenceBases" : {
            "type" : "string"
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceName" : {
            "type" : "string"
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "start" : {
            "type" : "integer",
            "format" : "int32"
          },
          "svlen" : {
            "type" : "integer",
            "format" : "int32"
          },
          "updated" : {
            "type" : "string"
          },
          "variantDbId" : {
            "type" : "string"
          },
          "variantNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          },
          "variantType" : {
            "type" : "string"
          }
        },
        "required" : [ "variantDbId" ]
      },
      "VariantSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "end" : {
            "type" : "integer",
            "format" : "int32"
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbId" : {
            "type" : "string"
          },
          "referenceDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "integer",
            "format" : "int32"
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "VariantSet" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "properties" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "analysis" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Analysis"
            }
          },
          "callSetCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "callSets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "calls" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Call"
            }
          },
          "externalReferences" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "metadataFields" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/MetadataField"
            }
          },
          "referenceSetDbId" : {
            "type" : "string"
          },
          "referenceSetName" : {
            "type" : "string"
          },
          "studyDbId" : {
            "type" : "string"
          },
          "studyName" : {
            "type" : "string"
          },
          "studyPUI" : {
            "type" : "string"
          },
          "variantCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "variantSetDbId" : {
            "type" : "string"
          },
          "variantSetName" : {
            "type" : "string"
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/Variant"
            }
          }
        },
        "required" : [ "variantSetDbId" ]
      },
      "VariantSetSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "basePagination" : {
        "type" : "object",
        "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero).",
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "default" : 0,
            "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "default" : 1000,
            "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example" : 1000
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "The total number of elements that are available on the server and match the requested query parameters.",
            "example" : 10
          },
          "totalPages" : {
            "type" : "integer",
            "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example" : 1
          }
        },
        "required" : [ "currentPage", "pageSize" ]
      },
      "dataFile" : {
        "type" : "object",
        "description" : "A dataFile contains a URL and the relevant file metadata to represent a file",
        "properties" : {
          "fileURL" : {
            "type" : "string",
            "format" : "uri",
            "description" : "The absolute URL where the file is located",
            "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
          },
          "fileName" : {
            "type" : "string",
            "description" : "The name of the file",
            "example" : "datafile.xlsx"
          },
          "fileSize" : {
            "type" : "integer",
            "description" : "The size of the file in bytes",
            "example" : 4398
          },
          "fileDescription" : {
            "type" : "string",
            "description" : "A human readable description of the file contents",
            "example" : "This is an Excel data file"
          },
          "fileType" : {
            "type" : "string",
            "description" : "The type or format of the file. Preferably MIME Type.",
            "example" : "application/vnd.ms-excel"
          },
          "fileMD5Hash" : {
            "type" : "string",
            "description" : "The MD5 Hash of the file contents to be used as a check sum",
            "example" : "c2365e900c81a89cf74d83dab60df146"
          }
        },
        "required" : [ "fileURL" ]
      },
      "metadata" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/metadataBase"
        }, {
          "type" : "object",
          "properties" : {
            "pagination" : {
              "$ref" : "#/components/schemas/basePagination"
            }
          }
        } ]
      },
      "metadataBase" : {
        "type" : "object",
        "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information.",
        "properties" : {
          "datafiles" : {
            "type" : "array",
            "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example" : [ ],
            "items" : {
              "$ref" : "#/components/schemas/dataFile"
            }
          },
          "status" : {
            "type" : "array",
            "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items" : {
              "$ref" : "#/components/schemas/status"
            }
          }
        }
      },
      "metadataTokenPagination" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/metadataBase"
        }, {
          "type" : "object",
          "properties" : {
            "pagination" : {
              "$ref" : "#/components/schemas/tokenPagination"
            }
          }
        } ]
      },
      "status" : {
        "type" : "object",
        "description" : "An array of status messages to convey technical logging information from the server to the client.",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A short message concerning the status of this request/response",
            "example" : "Request accepted, response successful"
          },
          "messageType" : {
            "type" : "string",
            "description" : "The logging level for the attached message",
            "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ],
            "example" : "INFO"
          }
        },
        "required" : [ "message", "messageType" ]
      },
      "tokenPagination" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/basePagination"
        }, {
          "type" : "object",
          "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
          "example" : {
            "currentPage" : 0,
            "pageSize" : 1000,
            "totalCount" : 10,
            "totalPages" : 1
          },
          "properties" : {
            "nextPageToken" : {
              "type" : "string",
              "deprecated" : true,
              "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
              "example" : "cb668f63"
            },
            "currentPageToken" : {
              "type" : "string",
              "deprecated" : true,
              "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
              "example" : "48bc6ac1"
            },
            "prevPageToken" : {
              "type" : "string",
              "deprecated" : true,
              "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
              "example" : "9659857e"
            }
          },
          "required" : [ "nextPageToken" ]
        } ]
      }
    },
    "responses" : {
      "ObservationVariableSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/ObservationVariable"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationVariableSingleResponse"
            }
          }
        }
      },
      "SeedLotSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/SeedLot"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SeedLotSingleResponse"
            }
          }
        }
      },
      "VariantSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Variant"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "VariantSingleResponse"
            }
          }
        }
      },
      "202AcceptedSearchResponse" : {
        "description" : "Accepted",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "searchResultsDbId" : {
                      "type" : "string",
                      "example" : "551ae08c"
                    }
                  }
                }
              },
              "title" : "202AcceptedSearchResponse"
            }
          }
        }
      },
      "StudySingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Study"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "StudySingleResponse"
            }
          }
        }
      },
      "MethodSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Method"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "MethodSingleResponse"
            }
          }
        }
      },
      "TrialListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Trial"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "TrialListResponse"
            }
          }
        }
      },
      "SeedLotListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/SeedLot"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SeedLotListResponse"
            }
          }
        }
      },
      "VariantSetListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/VariantSet"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "VariantSetListResponse"
            }
          }
        }
      },
      "SampleSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Sample"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SampleSingleResponse"
            }
          }
        }
      },
      "CallSetSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/CallSet"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CallSetSingleResponse"
            }
          }
        }
      },
      "VariantSetSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/VariantSet"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "VariantSetSingleResponse"
            }
          }
        }
      },
      "CallSetListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/CallSet"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CallSetListResponse"
            }
          }
        }
      },
      "ReferenceSetSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/ReferenceSet"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ReferenceSetSingleResponse"
            }
          }
        }
      },
      "ObservationVariableListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ObservationVariable"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationVariableListResponse"
            }
          }
        }
      },
      "EventSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Event"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "EventSingleResponse"
            }
          }
        }
      },
      "ImageSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Image"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ImageSingleResponse"
            }
          }
        }
      },
      "PlateListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Plate"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PlateListResponse"
            }
          }
        }
      },
      "SeasonListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Season"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SeasonListResponse"
            }
          }
        }
      },
      "ObservationUnitListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ObservationUnit"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationUnitListResponse"
            }
          }
        }
      },
      "ReferenceListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Reference"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ReferenceListResponse"
            }
          }
        }
      },
      "ObservationListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Observation"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationListResponse"
            }
          }
        }
      },
      "GenomeMapSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/GenomeMap"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GenomeMapSingleResponse"
            }
          }
        }
      },
      "PersonListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Person"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PersonListResponse"
            }
          }
        }
      },
      "PlannedCrossListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/PlannedCross"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PlannedCrossListResponse"
            }
          }
        }
      },
      "LocationListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Location"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "LocationListResponse"
            }
          }
        }
      },
      "403Forbidden" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
          }
        }
      },
      "OntologySingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Ontology"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "OntologySingleResponse"
            }
          }
        }
      },
      "CrossSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Cross"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CrossSingleResponse"
            }
          }
        }
      },
      "ProgramListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Program"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ProgramListResponse"
            }
          }
        }
      },
      "ObservationUnitSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/ObservationUnit"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationUnitSingleResponse"
            }
          }
        }
      },
      "ScaleListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Scale"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ScaleListResponse"
            }
          }
        }
      },
      "ListListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/List"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ListListResponse"
            }
          }
        }
      },
      "400BadRequest" : {
        "description" : "Bad Request",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
          }
        }
      },
      "MethodListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Method"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "MethodListResponse"
            }
          }
        }
      },
      "CrossingProjectListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/CrossingProject"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CrossingProjectListResponse"
            }
          }
        }
      },
      "GermplasmAttributeSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/GermplasmAttribute"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmAttributeSingleResponse"
            }
          }
        }
      },
      "TraitSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Trait"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "TraitSingleResponse"
            }
          }
        }
      },
      "401Unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
          }
        }
      },
      "GermplasmAttributeListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GermplasmAttribute"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmAttributeListResponse"
            }
          }
        }
      },
      "GermplasmListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Germplasm"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmListResponse"
            }
          }
        }
      },
      "CrossingProjectSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/CrossingProject"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CrossingProjectSingleResponse"
            }
          }
        }
      },
      "TraitListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Trait"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "TraitListResponse"
            }
          }
        }
      },
      "PedigreeNodeSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/PedigreeNode"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PedigreeNodeSingleResponse"
            }
          }
        }
      },
      "SampleListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Sample"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SampleListResponse"
            }
          }
        }
      },
      "ReferenceSetListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/ReferenceSet"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ReferenceSetListResponse"
            }
          }
        }
      },
      "TrialSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Trial"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "TrialSingleResponse"
            }
          }
        }
      },
      "GermplasmSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Germplasm"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmSingleResponse"
            }
          }
        }
      },
      "PlannedCrossSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/PlannedCross"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PlannedCrossSingleResponse"
            }
          }
        }
      },
      "ReferenceSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Reference"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ReferenceSingleResponse"
            }
          }
        }
      },
      "SeasonSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Season"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "SeasonSingleResponse"
            }
          }
        }
      },
      "OntologyListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Ontology"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "OntologyListResponse"
            }
          }
        }
      },
      "404NotFound" : {
        "description" : "Not Found",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
          }
        }
      },
      "StudyListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Study"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "StudyListResponse"
            }
          }
        }
      },
      "ScaleSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Scale"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ScaleSingleResponse"
            }
          }
        }
      },
      "BreedingMethodSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/BreedingMethod"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "BreedingMethodSingleResponse"
            }
          }
        }
      },
      "LocationSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Location"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "LocationSingleResponse"
            }
          }
        }
      },
      "PersonSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Person"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PersonSingleResponse"
            }
          }
        }
      },
      "MarkerPositionSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/MarkerPosition"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "MarkerPositionSingleResponse"
            }
          }
        }
      },
      "ImageListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Image"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ImageListResponse"
            }
          }
        }
      },
      "PlateSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Plate"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PlateSingleResponse"
            }
          }
        }
      },
      "VariantListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Variant"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "VariantListResponse"
            }
          }
        }
      },
      "GermplasmAttributeValueListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GermplasmAttributeValue"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmAttributeValueListResponse"
            }
          }
        }
      },
      "GermplasmAttributeValueSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/GermplasmAttributeValue"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GermplasmAttributeValueSingleResponse"
            }
          }
        }
      },
      "BreedingMethodListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/BreedingMethod"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "BreedingMethodListResponse"
            }
          }
        }
      },
      "CallSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Call"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "CallSingleResponse"
            }
          }
        }
      },
      "GenomeMapListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/GenomeMap"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "GenomeMapListResponse"
            }
          }
        }
      },
      "PedigreeNodeListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/PedigreeNode"
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "PedigreeNodeListResponse"
            }
          }
        }
      },
      "ObservationSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Observation"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ObservationSingleResponse"
            }
          }
        }
      },
      "ListSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/List"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ListSingleResponse"
            }
          }
        }
      },
      "ProgramSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "'@context'" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Context"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/Program"
                      }
                    }
                  },
                  "required" : [ "data" ]
                }
              },
              "required" : [ "metadata", "result" ],
              "title" : "ProgramSingleResponse"
            }
          }
        }
      }
    },
    "parameters" : {
      "externalReferenceID" : {
        "name" : "externalReferenceID",
        "in" : "query",
        "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required" : false,
        "deprecated" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "externalReferenceId" : {
        "name" : "externalReferenceId",
        "in" : "query",
        "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "externalReferenceSource" : {
        "name" : "externalReferenceSource",
        "in" : "query",
        "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "acceptHeader" : {
        "name" : "Accept",
        "in" : "header",
        "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/ContentTypes"
        },
        "example" : "application/json"
      },
      "searchResultsDbId" : {
        "name" : "searchResultsDbId",
        "in" : "path",
        "description" : "Unique identifier which references the search results",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "pageSize" : {
        "name" : "pageSize",
        "in" : "query",
        "description" : "The size of the pages to be returned. Default is `1000`.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer"
        },
        "example" : 1000
      },
      "authorizationHeader" : {
        "name" : "Authorization",
        "in" : "header",
        "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "pattern" : "^Bearer .*$"
        },
        "example" : "Bearer XXXX"
      },
      "pageToken" : {
        "name" : "pageToken",
        "in" : "query",
        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
        "required" : false,
        "deprecated" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        },
        "example" : "33c27874"
      },
      "page" : {
        "name" : "page",
        "in" : "query",
        "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer"
        },
        "example" : "0"
      }
    },
    "securitySchemes" : {
      "AuthorizationToken" : {
        "type" : "http",
        "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
        "scheme" : "bearer",
        "bearerFormat" : "nonce token or JWT"
      }
    }
  }
}