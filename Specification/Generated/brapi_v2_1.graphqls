"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

interface Attribute implements Variable {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "General category for the attribute. very similar to Trait class."
  attributeCategory: String
  "The ID which uniquely identifies this attribute within the given database server"
  attributeDbId: String
  "A human readable description of this attribute"
  attributeDescription: String
  "A human readable name for this attribute"
  attributeName: String
  "The Permanent Unique Identifier of an Attribute, usually in the form of a URI"
  attributePUI: String
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: Method
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: Scale
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: Trait
}

"""
The exact level and level code of an observation unit. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
"""
interface ObservationUnitHierarchyLevel {
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
}

interface Variable {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: Method
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: Scale
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: Trait
}

union GeoJSONGeometry = GeoJSONPoint | GeoJSONPolygon

"A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
type AdditionalInfo {
  additionalProperties: String
}

type AlleleMatrix {
  "A list of unique identifiers for the CallSets contained in the matrix response. This array should match the ordering for columns in the matrix. A CallSet is a unique combination of a Sample and a sequencing event. CallSets often have a 1-to-1 relationship with Samples, but this is not always the case."
  callSets: [CallSet]
  "The 'dataMatrices' are an array of matrix objects that hold the allele data and associated metadata. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows."
  dataMatrices: [DataMatrix]
  "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)"
  expandHomozygotes: Boolean
  "Pagination for the matrix"
  pagination: [Pagination]
  "The string used as a separator for phased allele calls."
  sepPhased: String
  "The string used as a separator for unphased allele calls."
  sepUnphased: String
  "The string used as a representation for missing data."
  unknownString: String
  "A list of unique identifiers for the VariantSets contained in the matrix response. A VariantSet is a data set originating from a sequencing event. Often, users will only be interested in data from a single VariantSet, but in some cases a user might be interested in a matrix with data from multiple VariantSets."
  variantSets: [VariantSet]
  "A list of unique identifiers for the Variants contained in the matrix response. This array should match the ordering for rows in the matrix."
  variants: [Variant]
}

type Analysis {
  "Unique identifier for this analysis description"
  analysisDbId: String
  "A human readable name for this analysis"
  analysisName: String
  "The time at which this record was created, in ISO 8601 format."
  created: String
  "A human readable description of the analysis"
  description: String
  "The software run to generate this analysis."
  software: [String]
  "The type of analysis."
  type: String
  "The time at which this record was last updated, in ISO 8601 format."
  updated: String
  "Analysis associated with a variant set"
  variantSet: VariantSet
}

type AvailableFormat {
  "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)"
  dataFormat: DataFormat
  "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)"
  expandHomozygotes: Boolean
  "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response."
  fileFormat: FileFormat
  "A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file."
  fileURL: String
  "The string used as a separator for phased allele calls."
  sepPhased: String
  "The string used as a separator for unphased allele calls."
  sepUnphased: String
  "The string used as a representation for missing data."
  unknownString: String
  "Formats associated with a variant set"
  variantSet: VariantSet
}

type BreedingMethod {
  "A shortened version of the human readable name for a Breeding Method"
  abbreviation: String
  "the unique identifier for this breeding method"
  breedingMethodDbId: String
  "the human readable identifier for this breeding method"
  breedingMethodName: String
  "human readable description of the breeding method"
  description: String
  "germplasm"
  germplasm: [Germplasm]
  "pedigreeNodes"
  pedigreeNodes: [PedigreeNode]
}

type BreedingMethodsListResponse {
  data: [BreedingMethod]
}

type Call {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  """
  The ID of the call set this variant call belongs to.
  
  If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
  """
  callSet: CallSet
  "Genotype Metadata are additional layers of metadata associated with each genotype."
  genotypeMetadata: [GenotypeMetadata]
  "The value of this genotype call"
  genotypeValue: String
  """
  If this field is populated, this variant call's genotype ordering implies the phase of the bases and 
  is consistent with any other variant calls on the same contig which have the same phase set string.
  """
  phaseSet: String
  "The ID of the variant this call belongs to."
  variant: Variant
  "The unique identifier for a VariantSet"
  variantSet: VariantSet
}

type CallSet {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  alleleMatrices: [AlleleMatrix]
  "The ID which uniquely identifies a CallSet within the given database server"
  callSetDbId: String
  "The human readable name which identifies a germplasm within the given database server"
  callSetName: String
  calls: [Call]
  "The date this call set was created"
  created: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The Biosample entity the call set data was generated from."
  sample: Sample
  "The ID which uniquely identifies a study within the given database server"
  study: Study
  "The time at which this call set was last updated"
  updated: String
  "The IDs of the variantSets this callSet has calls in."
  variantSets: [VariantSet]
}

type CallSetsListResponse {
  data: [CallSet]
  page: [CallSet]
}

type CallSetsSearchResponse {
  data: [CallSet]
  searchResultsDbId: [CallSet]
}

type CallsListResponse {
  data: [Call]
  page: [Call]
}

type CallsSearchResponse {
  data: [Call]
  searchResultsDbId: [Call]
}

type Contact {
  """
  The ID which uniquely identifies this contact
  
  MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
  """
  contactDbId: String
  """
  The contacts email address
  
  MIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.
  """
  email: String
  """
  The name of the institution which this contact is part of
  
  MIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to
  """
  instituteName: String
  """
  The full name of this contact person
  
  MIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)
  """
  name: String
  """
  The Open Researcher and Contributor ID for this contact person (orcid.org)
  
  MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
  """
  orcid: String
  """
  The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)
  
  MIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation
  """
  type: String
}

type ContentMixture {
  "The cross for the germplasm using in this content mixture"
  cross: Cross
  "The germplasm using in this content mixture"
  germplasm: Germplasm
  "The percentage of the given germplasm in the seed lot mixture."
  mixturePercentage: Int
  "associated seedLot"
  seedLot: SeedLot
}

type Cross {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Set of custom attributes associated with a cross"
  crossAttributes: [CrossAttribute]
  "the unique identifier for a cross"
  crossDbId: String
  "the human readable name for a cross"
  crossName: String
  "the type of cross"
  crossType: CrossType
  "the unique identifier for a crossing project"
  crossingProject: CrossingProject
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "observationUnits"
  observationUnits: [ObservationUnit]
  "the first parent used in the cross"
  parent1: CrossParent
  "the second parent used in the cross"
  parent2: CrossParent
  "the unique identifier for a planned cross"
  plannedCross: PlannedCross
  "The list of pollination events that occurred for this cross"
  pollinationEvents: [PollinationEvent]
}

type CrossAttribute {
  "a custom attributes associated with a cross"
  cross: Cross
  "the human readable name of a cross attribute"
  crossAttributeName: String
  "the value of a cross attribute"
  crossAttributeValue: String
}

type CrossParent {
  "the germplasm of the cross parent"
  germplasm: Germplasm
  "the Observation Unit of the cross parent"
  observationUnit: ObservationUnit
  "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc."
  parentType: ParentType
}

type CrossesListResponse {
  data: [Cross]
  page: [Cross]
}

type CrossingProject {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "the common name of a crop (for multi-crop systems)"
  commonCropName: String
  "crosses"
  crosses: [Cross]
  "The unique identifier for a crossing project"
  crossingProjectDbId: String
  "the description for a crossing project"
  crossingProjectDescription: String
  "The human readable name for a crossing project"
  crossingProjectName: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "pedigreeNodes"
  pedigreeNodes: [PedigreeNode]
  "plannedCrosses"
  plannedCrosses: [PlannedCross]
  """
  A list of all the potential parents in the crossing block, available in the crossing project
  <br/> If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.
  """
  potentialParents: [CrossParent]
  "the unique identifier for a program"
  program: Program
}

type CrossingProjectsListResponse {
  data: [CrossingProject]
  page: [CrossingProject]
}

type CrossingProjectsSearchResponse {
  data: [CrossingProject]
  searchResultsDbId: [CrossingProject]
}

type DataLink {
  """
  The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  dataFormat: String
  """
  The general description of this data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  description: String
  """
  The MIME type of the file (ie text/csv, application/excel, application/zip).
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  fileFormat: String
  """
  The name of the external data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  name: String
  "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow."
  provenance: String
  "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc"
  scientificType: String
  """
  URL describing the location of this data file to view or download
  
  MIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.
  """
  url: String
  """
  The version number for this data 
  
  MIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).
  """
  version: String
}

type DataMatrix {
  "Data matrices associated with an alleleMatrix"
  alleleMatrix: AlleleMatrix
  "The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows."
  dataMatrix: [[String]]
  """
  The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word "GT" is reserved for the allele matrix. Examples of other metadata matrices include: "GQ", "RD", and "HQ"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixAbbreviation: String
  """
  The name of the field represented in this data matrix. The key word "Genotype" is reserved for the allele matrix. Examples of other metadata matrices include: "Genotype Quality", "Read Depth", and "Haplotype Quality"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixName: String
  "The type of field represented in this data matrix. This is intended to help parse the data out of JSON."
  dataType: DataType
}

type DatasetAuthorships {
  "The DOI or other permanent unique identifier for this published dataset"
  datasetPUI: String
  "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended."
  license: String
  "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described."
  publicReleaseDate: String
  "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository."
  submissionDate: String
  "Dataset authorships associated with a trial"
  trial: Trial
}

type DocumentationLink {
  URL: String
  "associated ontology reference"
  ontologyReference: OntologyReference
  type: Type
}

type Donor {
  """
  The accession number assigned by the donor
  
  MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.
  """
  donorAccessionNumber: String
  """
  The institute code for the donor institute
  <br/>MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.
  """
  donorInstituteCode: String
  "donoers associated with a germplasm"
  germplasm: Germplasm
}

type EnvironmentParameters {
  "Human-readable value of the environment parameter (defined above) constant within the experiment"
  description: String
  "Human-readable value of the environment parameter (defined above) constant within the experiment"
  environmentParametersDbId: String
  """
  Name of the environment parameter constant within the experiment
  
  MIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. 
  """
  parameterName: String
  "URI pointing to an ontology class for the parameter"
  parameterPUI: String
  "Environment parameters associated with a study"
  study: Study
  "Unit of the value for this parameter"
  unit: String
  "URI pointing to an ontology class for the unit"
  unitPUI: String
  """
  Numerical or categorical value
  
  MIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.
  """
  value: String
  "URI pointing to an ontology class for the parameter value"
  valuePUI: String
}

type Event {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "An object describing when a particular Event has taken place. An Event can occur at one or more discrete time points (`discreteDates`) or an event can happen continuously over a longer period of time (`startDate`, `endDate`)"
  eventDateRange: [EventDateRange]
  "Internal database identifier"
  eventDbId: String
  """
  A detailed, human-readable description of this event
  <br/>MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. 
  """
  eventDescription: String
  "A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI"
  eventParameters: [EventParameter]
  """
  An identifier for this event type, in the form of an ontology class reference
  <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  <br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventType: String
  """
  An identifier for this event type, in the form of an ontology class reference
  <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  <br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventTypeDbId: String
  "A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study"
  observationUnits: [ObservationUnit]
  "The study in which the event occurred"
  study: Study
}

type EventDateRange {
  """
  A list of dates when the event occurred
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  discreteDates: [String]
  """
  The end of a continuous or regularly repetitive event
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  endDate: String
  "associated event"
  event: Event
  """
  The beginning of a continuous or regularly repetitive event
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  startDate: String
}

type EventParameter {
  """
  The shortened code name of an event parameter
  <br>ICASA "Code_Display"
  """
  code: String
  "A human readable description of this event parameter. This description is usually associated with the 'name' and 'code' of an event parameter."
  description: String
  "associated event"
  event: Event
  """
  The full name of an event parameter
  <br>ICASA "Variable_Name"
  """
  name: String
  """
  The units or data type of the 'value'. 
  <br>If the 'value' comes from a standardized vocabulary or an encoded list of values, then 'unit' should be 'code'. 
  <br>If the 'value' IS NOT a number, then 'unit' should specify a data type eg. 'text', 'boolean', 'date', etc. 
  <br>If the value IS a number, then 'unit' should specify the units used eg. 'ml', 'cm', etc
  <br>ICASA "Unit_or_type"
  """
  units: String
  "The single value of this event parameter. This single value is accurate for all the dates in the date range. If 'value' is populated then 'valuesByDate' should NOT be populated."
  value: String
  "If the event parameter 'unit' field is 'code', then use 'valueDescription' to add a human readable description to the value."
  valueDescription: String
  "An array of values corresponding to each timestamp in the 'discreteDates' array of this event. The 'valuesByDate' array should exactly match the size of the 'discreteDates' array. If 'valuesByDate' is populated then 'value' should NOT be populated."
  valuesByDate: [String]
}

type EventsListResponse {
  data: [Event]
  page: [Event]
}

type EventsSearchResponse {
  data: [Event]
  searchResultsDbId: [Event]
}

type ExperimentalDesign {
  "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology."
  PUI: String
  "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'."
  description: String
  "Experimental design associated with a study"
  study: Study
}

type ExternalReference {
  "The external reference ID. Could be a simple string or a URI."
  referenceId: String
  "An identifier for the source system or database of this reference"
  referenceSource: String
}

type GenomeMap {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Additional comments about a `GenomeMap`"
  comments: String
  "The common name of the `Crop`"
  commonCropName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "The number of linkage groups present in a `GenomeMap`"
  linkageGroupCount: Int
  "The unique identifier for a `GenomeMap`"
  mapDbId: String
  "The human readable identifier for a `GenomeMap`"
  mapName: String
  "The DOI or other permanent identifier for a `GenomeMap`"
  mapPUI: String
  "The number of markers present in a `GenomeMap`"
  markerCount: Int
  "markerPositions"
  markerPositions: [MarkerPosition]
  "The date this `GenomeMap` was published"
  publishedDate: String
  "Full scientific binomial format name. This includes Genus, Species, and Sub-species"
  scientificName: String
  "The type of map this represents, usually \"Genetic\" or \"Physical\""
  type: String
  "The units used to describe the data in a `GenomeMap`"
  unit: String
}

type GenomeMapsListResponse {
  data: [GenomeMap]
  page: [GenomeMap]
}

type GenomeMapsSearchResponse {
  data: [GenomeMap]
  searchResultsDbId: [GenomeMap]
}

type GenotypeMetadata {
  "Genotype metadata associated with a call"
  call: Call
  "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON."
  dataType: DataType
  """
  The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: "GQ", "RD", and "HQ"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  fieldAbbreviation: String
  """
  The name of the field represented in this Genotype Field. Examples include: "Genotype Quality", "Read Depth", and "Haplotype Quality"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  fieldName: String
  "The additional metadata value associated with this genotype call"
  fieldValue: String
}

"""
One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

Copied from RFC 7946 Section 3.1.1

A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
type GeoJSON {
  "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed."
  geometry: GeoJSONGeometry
  "Geometry associated with an image"
  germplasmOrigin: GermplasmOrigin
  "Geometry associated with an image"
  image: Image
  "Geometry associated with an image"
  observation: Observation
  "Geometry associated with an image"
  observationUnit: ObservationUnitPosition
  "The literal string \"Feature\""
  type: String
}

"""
Copied from RFC 7946 Section 3.1.1

A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
type GeoJSONPoint {
  "A single position"
  coordinates: [Float]
  "The literal string \"Point\""
  type: String
}

"""
An array of Linear Rings. Each Linear Ring is an array of Points. 

A Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
type GeoJSONPolygon {
  "An array of linear rings"
  coordinates: [[[Float]]]
  "The literal string \"Polygon\""
  type: String
}

type Germplasm {
  """
  The unique identifier for a material or germplasm within a genebank
  
  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
  """
  accessionNumber: String
  """
  The date a material or germplasm was acquired by the genebank 
  
  MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].
  """
  acquisitionDate: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "attributeValues"
  attributeValues: [GermplasmAttributeValue]
  """
  MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. 
  
  100) Wild 
  110) Natural 
  120) Semi-natural/wild 
  130) Semi-natural/sown 
  200) Weedy 
  300) Traditional cultivar/landrace 
  400) Breeding/research material 
  410) Breeders line 
  411) Synthetic population 
  412) Hybrid 
  413) Founder stock/base population 
  414) Inbred line (parent of hybrid cultivar) 
  415) Segregating population 
  416) Clonal selection 
  420) Genetic stock 
  421) Mutant (e.g. induced/insertion mutants, tilling populations) 
  422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) 
  423) Other genetic stocks (e.g. mapping populations) 
  500) Advanced or improved cultivar (conventional breeding methods) 
  600) GMO (by genetic engineering) 
  999) Other (Elaborate in REMARKS field)
  """
  biologicalStatusOfAccessionCode: BiologicalStatusOfAccessionCode
  "Supplemental text description for 'biologicalStatusOfAccessionCode'"
  biologicalStatusOfAccessionDescription: String
  "The unique identifier for the breeding method used to create this germplasm"
  breedingMethod: BreedingMethod
  "A specific panel/collection/population name this germplasm belongs to."
  collection: String
  """
  Common name for the crop 
  
  MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: "malting barley", "mas".
  """
  commonCropName: String
  """
  3-letter ISO 3166-1 code of the country in which the sample was originally collected 
  
  MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was "collected".
  """
  countryOfOriginCode: String
  "Human readable name used for display purposes"
  defaultDisplayName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "List of donor institutes"
  donors: [Donor]
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  """
  Genus name for taxon. Initial uppercase letter required.
  
  MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.
  
  MIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.
  """
  genus: String
  """
  The ID which uniquely identifies a germplasm within the given database server 
  <br>MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
  """
  germplasmDbId: String
  """
  Name of the germplasm. It can be the preferred name and does not have to be unique.
  
  MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.
  """
  germplasmName: String
  "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm."
  germplasmOrigin: [GermplasmOrigin]
  """
  The Permanent Unique Identifier which represents a germplasm
  
  MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
  
  MIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source
  
  MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.
  """
  germplasmPUI: String
  "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary."
  germplasmPreprocessing: String
  """
  The code for the institute that maintains the material. 
  
  MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".
  """
  instituteCode: String
  "The name of the institute that maintains the material"
  instituteName: String
  "observationUnits"
  observationUnits: [ObservationUnit]
  "observations"
  observations: [Observation]
  "parentPedigreeNodes"
  parentPedigreeNodes: [PedigreeNode]
  """
  The cross name and optional selection history.
  
  MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.
  """
  pedigree: String
  "progenyPedigreeNodes"
  progenyPedigreeNodes: [PedigreeNode]
  "Germplasm associated with a reference"
  reference: Reference
  "Germplasm associated with a reference"
  referenceSet: ReferenceSet
  "samples"
  samples: [Sample]
  """
  An identifier for the source of the biological material
  <br/>MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: "mother_accession X father_accession", or, if father is unknown, as "mother_accession X UNKNOWN". For in situ material, the region of provenance may be used when an accession is not available.
  """
  seedSource: String
  """
  Description of the material source
  
  MIAPPE V1.1 (DM-56) Material source description - Description of the material source
  """
  seedSourceDescription: String
  "siblingPedigreeNodes"
  siblingPedigreeNodes: [PedigreeNode]
  """
  Specific epithet portion of the scientific name in lowercase letters.
  
  MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: "sp." 
  
  MIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.
  """
  species: String
  """
  The authority organization responsible for tracking and maintaining the species name 
  
  MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.
  """
  speciesAuthority: String
  "The type of storage this germplasm is kept in at a genebank."
  storageTypes: [StorageType]
  """
  Subtaxon can be used to store any additional taxonomic identifier.
  
  MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").
  
  MIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).
  """
  subtaxa: String
  """
  The authority organization responsible for tracking and maintaining the subtaxon information
  
  MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.
  """
  subtaxaAuthority: String
  """
  List of alternative names or IDs used to reference this germplasm
  
  MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.
  """
  synonyms: [Synonym]
  """
  The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as "ncbiTaxon" preferably with a purl. The rank of this ID should be species.
  
  MIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.
  """
  taxonIds: [TaxonId]
}

type GermplasmAttribute {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "General category for the attribute. very similar to Trait class."
  attributeCategory: String
  "The ID which uniquely identifies this attribute within the given database server"
  attributeDbId: String
  "A human readable description of this attribute"
  attributeDescription: String
  "A human readable name for this attribute"
  attributeName: String
  "The Permanent Unique Identifier of an Attribute, usually in the form of a URI"
  attributePUI: String
  "attributeValues"
  attributeValues: [GermplasmAttributeValue]
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: Method
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: Scale
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: Trait
}

type GermplasmAttributeValue {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The ID which uniquely identifies this attribute within the given database server"
  attribute: GermplasmAttribute
  "The ID which uniquely identifies this attribute value within the given database server"
  attributeValueDbId: String
  "The date the value of this attribute was determined for a given germplasm"
  determinedDate: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The ID which uniquely identifies a germplasm within the given database server"
  germplasm: Germplasm
  "The value of this attribute for a given germplasm"
  value: String
}

type GermplasmAttributeValuesListResponse {
  data: [GermplasmAttributeValue]
  page: [GermplasmAttributeValue]
}

type GermplasmAttributeValuesSearchResponse {
  data: [GermplasmAttributeValue]
  searchResultsDbId: [GermplasmAttributeValue]
}

type GermplasmAttributesListResponse {
  data: [GermplasmAttribute]
  page: [GermplasmAttribute]
}

type GermplasmAttributesSearchResponse {
  data: [GermplasmAttribute]
  searchResultsDbId: [GermplasmAttribute]
}

type GermplasmChild {
  "The child germplasm"
  childGermplasm: Germplasm
  """
  The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. 
  
  In a pedigree record, the 'parentType' describes each parent of a particular germplasm. 
  
  In a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. 
  For example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers 
  to the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.
  In this way, A could be a male parent to B, but a female parent to C. 
  """
  parentType: ParentType
  "associated pedigreeNode"
  pedigreeNode: PedigreeNode
}

type GermplasmOrigin {
  "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown."
  coordinateUncertainty: String
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  coordinates: [GeoJSON]
  "associated germplasm"
  germplasm: Germplasm
}

type GermplasmParent {
  "The parent germplasm"
  parentGermplasm: Germplasm
  """
  The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. 
  
  In a pedigree record, the 'parentType' describes each parent of a particular germplasm. 
  
  In a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. 
  For example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers 
  to the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.
  In this way, A could be a male parent to B, but a female parent to C. 
  """
  parentType: ParentType
  "associated pedigreeNode"
  pedigreeNode: PedigreeNode
}

type GermplasmsListResponse {
  data: [Germplasm]
  page: [Germplasm]
}

type GermplasmsSearchResponse {
  data: [Germplasm]
  searchResultsDbId: [Germplasm]
}

type GrowthFacility {
  "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology."
  PUI: String
  "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out."
  description: String
  "Growth facility associated with a study"
  study: Study
}

type Image {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'"
  copyright: String
  "The human readable description of an image."
  description: String
  "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL."
  descriptiveOntologyTerms: [String]
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The unique identifier of an image"
  imageDbId: String
  "The name of the image file. Might be the same as 'imageName', but could be different."
  imageFileName: String
  "The size of the image in Bytes."
  imageFileSize: Int
  "The height of the image in Pixels."
  imageHeight: Int
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  imageLocation: GeoJSON
  "The human readable name of an image. Might be the same as 'imageFileName', but could be different."
  imageName: String
  "The date and time the image was taken"
  imageTimeStamp: String
  "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server."
  imageURL: String
  "The width of the image in Pixels."
  imageWidth: Int
  "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc"
  mimeType: String
  "The related observation unit identifier, if relevant."
  observationUnit: ObservationUnit
  "A list of observation Ids this image is associated with, if applicable."
  observations: [Observation]
}

type ImagesListResponse {
  data: [Image]
  page: [Image]
}

type ImagesSearchResponse {
  data: [Image]
  searchResultsDbId: [Image]
}

type LastUpdate {
  "The date and time when this study was last modified"
  lastUpdateDbId: String
  "Last update associated with a study"
  study: Study
  timestamp: String
  version: String
}

type List {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The array of DbIds of the BrAPI objects contained in a List"
  data: [String]
  "Timestamp when the entity was first created"
  dateCreated: String
  "Timestamp when the entity was last updated"
  dateModified: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The unique identifier for a List"
  listDbId: String
  "Description of a List"
  listDescription: String
  "Human readable name of a List"
  listName: String
  "Human readable name of a List Owner. (usually a user or person)"
  listOwnerName: String
  "The unique identifier for a List Owner. (usually a user or person)"
  listOwnerPerson: Person
  "The number of elements in a List"
  listSize: Int
  "The description of where a List originated from"
  listSource: String
  "A flag to indicate the type of objects that are referenced in a List"
  listType: ListType
}

type ListsListResponse {
  data: [List]
  page: [List]
}

type ListsSearchResponse {
  data: [List]
  searchResultsDbId: [List]
}

type Location {
  "A shortened version of the human readable name for a Location"
  abbreviation: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  childLocations: [Location]
  "Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)"
  coordinateDescription: String
  "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown."
  coordinateUncertainty: String
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  coordinates: GeoJSON
  """
  [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec
  <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.'
  """
  countryCode: String
  """
  The full name of the country where a Location is located
  <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
  """
  countryName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)"
  environmentType: String
  "Describes the level of protection/exposure for things like sun light and wind at a particular Location"
  exposure: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  """
  The street address of the institute at a particular Location
  <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteAddress: String
  """
  The full name of the institute at a particular Location
  <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteName: String
  "The unique identifier for a Location"
  locationDbId: String
  """
  A human readable name for a Location
  <br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
  """
  locationName: String
  "A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)"
  locationType: String
  "observationUnits"
  observationUnits: [ObservationUnit]
  """
  The unique identifier for a Location
  <br/> The Parent Location defines the encompassing Location that a smaller Location belongs to. 
  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
  """
  parentLocation: Location
  "seedLots"
  seedLots: [SeedLot]
  "Description of the accessibility of the location (ex. Public, Private)"
  siteStatus: String
  "Describes the approximate slope (height/distance) of a Location."
  slope: String
  studies: [Study]
  "Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)"
  topography: String
}

type LocationsListResponse {
  data: [Location]
  page: [Location]
}

type LocationsSearchResponse {
  data: [Location]
  searchResultsDbId: [Location]
}

type MarkerPosition {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  """
  The Uniquely Identifiable name of a `LinkageGroup`
  <br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
  """
  linkageGroupName: String
  "The ID which uniquely identifies a `GenomeMap`"
  map: GenomeMap
  "The position of a marker or variant within a `LinkageGroup`"
  position: Int
  """
  The ID which uniquely identifies a `Variant` within the given database server
  <br> A `Variant` can also represent a Marker 
  """
  variant: Variant
}

type MarkerPositionsListResponse {
  data: [MarkerPosition]
  page: [MarkerPosition]
}

type MarkerPositionsSearchResponse {
  data: [MarkerPosition]
  searchResultsDbId: [MarkerPosition]
}

type MetadataField {
  "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON."
  dataType: DataType
  "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\""
  fieldAbbreviation: String
  "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\""
  fieldName: String
  "Formats associated with a variant set"
  variantSet: VariantSet
}

type Method {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  """
  Bibliographical reference describing the method.
  <br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
  """
  bibliographicalReference: String
  """
  Method description
  <br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
  """
  description: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation"
  formula: String
  "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)"
  methodClass: String
  "Method unique identifier"
  methodDbId: String
  """
  Human readable name for the method
  <br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation
  """
  methodName: String
  "The Permanent Unique Identifier of a Method, usually in the form of a URI"
  methodPUI: String
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
}

type MethodsListResponse {
  data: [Method]
  page: [Method]
}

type Mutation {
  "Create a new BreedingMethod"
  createBreedingMethod(breedingMethodInput: BreedingMethodInput): BreedingMethod
  "Create a new CrossingProject"
  createCrossingProject(commonCropName: String, crossingProjectInput: CrossingProjectInput): CrossingProject
  "Create a new Germplasm"
  createGermplasm(commonCropName: String, germplasmInput: GermplasmInput): Germplasm
  "Create a new GermplasmAttribute"
  createGermplasmAttribute(commonCropName: String, germplasmAttributeInput: GermplasmAttributeInput): GermplasmAttribute
  "Create a new GermplasmAttributeValue"
  createGermplasmAttributeValue(germplasmAttributeValueInput: GermplasmAttributeValueInput): GermplasmAttributeValue
  "Create a new Image"
  createImage(imageInput: ImageInput): Image
  "Create a new List"
  createList(listInput: ListInput): List
  "Create a new Location"
  createLocation(locationInput: LocationInput): Location
  "Create a new Method"
  createMethod(methodInput: MethodInput): Method
  "Create a new Observation"
  createObservation(observationInput: ObservationInput): Observation
  "Create a new ObservationUnit"
  createObservationUnit(observationUnitInput: ObservationUnitInput): ObservationUnit
  "Create a new ObservationVariable"
  createObservationVariable(commonCropName: String, observationVariableInput: ObservationVariableInput): ObservationVariable
  "Create a new Ontology"
  createOntology(ontologyInput: OntologyInput): Ontology
  "Create a new Person"
  createPerson(personInput: PersonInput): Person
  "Create a new PlannedCross"
  createPlannedCross(plannedCrossInput: PlannedCrossInput): PlannedCross
  "Create a new Plate"
  createPlate(plateInput: PlateInput): Plate
  "Create a new Program"
  createProgram(commonCropName: String, programInput: ProgramInput): Program
  "Create a new ReferenceSet"
  createReferenceSet(commonCropName: String, referenceSetInput: ReferenceSetInput): ReferenceSet
  "Create a new Sample"
  createSample(sampleInput: SampleInput): Sample
  "Create a new Scale"
  createScale(scaleInput: ScaleInput): Scale
  "Create a new Season"
  createSeason(seasonInput: SeasonInput): Season
  "Create a new SeedLot"
  createSeedLot(seedLotInput: SeedLotInput): SeedLot
  "Create a new Study"
  createStudy(commonCropName: String, studyInput: StudyInput): Study
  "Create a new Trait"
  createTrait(traitInput: TraitInput): Trait
  "Create a new Trial"
  createTrial(commonCropName: String, trialInput: TrialInput): Trial
  "Create a new VariantSet"
  createVariantSet(variantSetInput: VariantSetInput): VariantSet
  "Update the details for an existing BreedingMethod"
  updateBreedingMethod(breedingMethodInput: BreedingMethodInput): BreedingMethod
  "Update the details for an existing CrossingProject"
  updateCrossingProject(commonCropName: String, crossingProjectInput: CrossingProjectInput): CrossingProject
  "Update the details for an existing Germplasm"
  updateGermplasm(commonCropName: String, germplasmInput: GermplasmInput): Germplasm
  "Update the details for an existing GermplasmAttribute"
  updateGermplasmAttribute(commonCropName: String, germplasmAttributeInput: GermplasmAttributeInput): GermplasmAttribute
  "Update the details for an existing GermplasmAttributeValue"
  updateGermplasmAttributeValue(germplasmAttributeValueInput: GermplasmAttributeValueInput): GermplasmAttributeValue
  "Update the details for an existing Image"
  updateImage(imageInput: ImageInput): Image
  "Update the details for an existing List"
  updateList(listInput: ListInput): List
  "Update the details for an existing Location"
  updateLocation(locationInput: LocationInput): Location
  "Update the details for an existing Method"
  updateMethod(methodInput: MethodInput): Method
  "Update the details for an existing Observation"
  updateObservation(observationInput: ObservationInput): Observation
  "Update the details for an existing ObservationUnit"
  updateObservationUnit(observationUnitInput: ObservationUnitInput): ObservationUnit
  "Update the details for an existing ObservationVariable"
  updateObservationVariable(commonCropName: String, observationVariableInput: ObservationVariableInput): ObservationVariable
  "Update the details for an existing Ontology"
  updateOntology(ontologyInput: OntologyInput): Ontology
  "Update the details for an existing Person"
  updatePerson(personInput: PersonInput): Person
  "Update the details for an existing PlannedCross"
  updatePlannedCross(plannedCrossInput: PlannedCrossInput): PlannedCross
  "Update the details for an existing Plate"
  updatePlate(plateInput: PlateInput): Plate
  "Update the details for an existing Program"
  updateProgram(commonCropName: String, programInput: ProgramInput): Program
  "Update the details for an existing ReferenceSet"
  updateReferenceSet(commonCropName: String, referenceSetInput: ReferenceSetInput): ReferenceSet
  "Update the details for an existing Sample"
  updateSample(sampleInput: SampleInput): Sample
  "Update the details for an existing Scale"
  updateScale(scaleInput: ScaleInput): Scale
  "Update the details for an existing Season"
  updateSeason(seasonInput: SeasonInput): Season
  "Update the details for an existing SeedLot"
  updateSeedLot(seedLotInput: SeedLotInput): SeedLot
  "Update the details for an existing Study"
  updateStudy(commonCropName: String, studyInput: StudyInput): Study
  "Update the details for an existing Trait"
  updateTrait(traitInput: TraitInput): Trait
  "Update the details for an existing Trial"
  updateTrial(commonCropName: String, trialInput: TrialInput): Trial
  "Update the details for an existing VariantSet"
  updateVariantSet(variantSetInput: VariantSetInput): VariantSet
}

type Observation {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The name or identifier of the entity which collected the observation"
  collector: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  geoCoordinates: GeoJSON
  "The ID which uniquely identifies a germplasm"
  germplasm: Germplasm
  "images"
  images: [Image]
  "The ID which uniquely identifies an observation"
  observationDbId: String
  "The date and time when this observation was made"
  observationTimeStamp: String
  "The ID which uniquely identifies an observation unit"
  observationUnit: ObservationUnit
  "The ID which uniquely identifies an observation variable"
  observationVariable: ObservationVariable
  season: Season
  "The ID which uniquely identifies a study within the given database server"
  study: Study
  "The name or id of the user who uploaded the observation to the database system"
  uploadedBy: String
  "The value of the data collected as an observation"
  value: String
}

type ObservationUnit {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "the unique identifier for a cross"
  cross: Cross
  "events"
  events: [Event]
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The ID which uniquely identifies a germplasm"
  germplasm: Germplasm
  "images"
  images: [Image]
  "The ID which uniquely identifies a location, associated with this study"
  location: Location
  """
  The ID which uniquely identifies an observation unit
  
  MIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. 
  """
  observationUnitDbId: String
  "A human readable name for an observation unit"
  observationUnitName: String
  """
  A Permanent Unique Identifier for an observation unit
  
  MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.
  """
  observationUnitPUI: String
  """
  All positional and layout information related to this Observation Unit 
  
  MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) 
  or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. 
  Levels of observation must be consistent with those listed in the Study section.
  """
  observationUnitPosition: [ObservationUnitPosition]
  "observations"
  observations: [Observation]
  "The ID which uniquely identifies a program"
  program: Program
  "samples"
  samples: [Sample]
  "The unique identifier for the originating Seed Lot"
  seedLot: SeedLot
  "The ID which uniquely identifies a study within the given database server"
  study: Study
  """
  List of treatments applied to an observation unit.
  
  MIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.
  """
  treatments: [Treatment]
  "The ID which uniquely identifies a trial"
  trial: Trial
}

"""
The exact level and level code of an observation unit. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
"""
type ObservationUnitLevel implements ObservationUnitHierarchyLevel {
  """
  An ID code or number to represent a real thing that may or may not be an an observation unit.
  <br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  <br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. 
  """
  levelCode: String
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
}

"""
Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
at the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify 
this observation unit by each level of the hierarchy where it exists. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
"""
type ObservationUnitLevelRelationship {
  """
  An ID code or number to represent a real thing that may or may not be an an observation unit.
  <br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  <br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. 
  """
  levelCode: String
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
  """
  The an observation unit
  <br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. 
  <br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.
  """
  observationUnit: ObservationUnit
}

type ObservationUnitPosition {
  "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\""
  entryType: EntryType
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  geoCoordinates: [GeoJSON]
  """
  The exact level and level code of an observation unit. 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  
  MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
  The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
  Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
  """
  observationLevel: ObservationUnitLevel
  """
  Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
  defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
  `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
  at the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify 
  this observation unit by each level of the hierarchy where it exists. 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  """
  observationLevelRelationships: [ObservationUnitLevelRelationship]
  "associated observation Unit"
  observationUnit: ObservationUnit
  "The X position coordinate for an observation unit. Different systems may use different coordinate systems."
  positionCoordinateX: String
  """
  The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  PLANTED_ROW - The physical planted row number 
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateXType: PositionCoordinateXType
  "The Y position coordinate for an observation unit. Different systems may use different coordinate systems."
  positionCoordinateY: String
  """
  The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  PLANTED_ROW - The physical planted row number  
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateYType: PositionCoordinateYType
}

type ObservationUnitsListResponse {
  data: [ObservationUnit]
  page: [ObservationUnit]
}

type ObservationUnitsSearchResponse {
  data: [ObservationUnit]
  searchResultsDbId: [ObservationUnit]
}

type ObservationVariable implements Variable {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: Method
  """
  Variable unique identifier
  
  MIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.
  """
  observationVariableDbId: String
  """
  Variable name (usually a short name)
  
  MIAPPE V1.1 (DM-84) Variable name - Name of the variable.
  """
  observationVariableName: String
  "The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI"
  observationVariablePUI: String
  "observations"
  observations: [Observation]
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: Scale
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  studies: [Study]
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: Trait
}

type ObservationVariablesListResponse {
  data: [ObservationVariable]
  page: [ObservationVariable]
}

type ObservationVariablesSearchResponse {
  data: [ObservationVariable]
  searchResultsDbId: [ObservationVariable]
}

type ObservationsListResponse {
  data: [Observation]
  page: [Observation]
}

type ObservationsSearchResponse {
  data: [Observation]
  searchResultsDbId: [Observation]
}

type OntologiesListResponse {
  data: [Ontology]
  page: [Ontology]
}

type Ontology {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Ontology's list of authors (no specific format)"
  authors: String
  "Ontology copyright"
  copyright: String
  "Human readable description of Ontology"
  description: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Ontology licence"
  licence: String
  "Ontology database unique identifier"
  ontologyDbId: String
  "Ontology name"
  ontologyName: String
  "Ontology version (no specific format)"
  version: String
}

type OntologyReference {
  "links to various ontology documentation"
  documentationLinks: [DocumentationLink]
  "The Ontology for this reference"
  ontology: Ontology
  "The ID which uniquely identifies a ontology reference"
  ontologyReferenceDbId: String
  "Ontology version (no specific format)"
  version: String
}

type OntologyTerm {
  "Species associated with a reference"
  reference: Reference
  "Species associated with a referenceSet"
  referenceSet: ReferenceSet
  "Ontology term - the label of the ontology term the termId is pointing to."
  term: String
  "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation."
  termURI: String
}

type PageInfo {
  currentPage: Int
  pageSize: Int
  totalCount: Int
  totalPages: Int
}

type Pagination {
  "Pagination associated with an alleleMatrix"
  alleleMatrix: AlleleMatrix
  "The dimension of the matrix being paginated"
  dimension: Dimension
  "the requested page number (zero indexed)"
  page: Int
  "the maximum number of elements per page in this dimension of the matrix"
  pageSize: Int
  "The total number of elements that are available on the server and match the requested query parameters."
  totalCount: Int
  """
  The total number of pages of elements available on the server. This should be calculated with the following formula. 
  <br/>totalPages = CEILING( totalCount / requested_page_size)
  """
  totalPages: Int
}

type PedigreeNode {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The unique identifier for the breeding method used to create this germplasm"
  breedingMethod: BreedingMethod
  "The crossing project used to generate this germplasm"
  crossingProject: CrossingProject
  "The year the parents were originally crossed"
  crossingYear: Int
  "Human readable name used for display purposes"
  defaultDisplayName: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The code representing the family of this germplasm"
  familyCode: String
  "The ID which uniquely identifies a germplasm"
  germplasm: Germplasm
  """
  A list of parent germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> Typically, this array should only have one parent (clonal or self) or two parents (cross). In some special cases, there may be more parents, usually when the exact parent is not known. 
  <br/> If the parameter 'includeParents' is set to false, then this array should be empty, null, or not present in the response.
  """
  parents: [GermplasmParent]
  "The ID which uniquely identifies a pedigree node"
  pedigreeNodeDbId: String
  "The string representation of the pedigree for this germplasm in PURDY notation"
  pedigreeString: String
  """
  A list of germplasm references that are direct children of this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> The given germplasm could have a large number of progeny, across a number of different breeding methods. The 'parentType' shows 
        the type of parent this germplasm is to each of the child germplasm references.
  <br/> If the parameter 'includeProgeny' is set to false, then this array should be empty, null, or not present in the response.
  """
  progeny: [GermplasmChild]
  """
  A list of sibling germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> Siblings share at least one parent with the given germplasm. 
  <br/> If the parameter 'includeSiblings' is set to false, then this array should be empty, null, or not present in the response.
  """
  siblings: [Germplasm]
}

type PedigreeNodesListResponse {
  data: [PedigreeNode]
  page: [PedigreeNode]
}

type PedigreeNodesSearchResponse {
  data: [PedigreeNode]
  searchResultsDbId: [PedigreeNode]
}

type Person {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "description of this person"
  description: String
  "email address for this person"
  emailAddress: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Persons first name"
  firstName: String
  "Persons last name"
  lastName: String
  lists: [List]
  "physical address of this person"
  mailingAddress: String
  "Persons middle name"
  middleName: String
  "Unique ID for a person"
  personDbId: String
  "phone number of this person"
  phoneNumber: String
  programs: [Program]
  "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system."
  userID: String
}

type PersonsListResponse {
  data: [Person]
  page: [Person]
}

type PersonsSearchResponse {
  data: [Person]
  searchResultsDbId: [Person]
}

type PlannedCross {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "the type of cross"
  crossType: CrossType
  "crosses"
  crosses: [Cross]
  "the unique identifier for a crossing project"
  crossingProject: CrossingProject
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "the first parent used in the cross"
  parent1: CrossParent
  "the second parent used in the cross"
  parent2: CrossParent
  "the unique identifier for a planned cross"
  plannedCrossDbId: String
  "the human readable name for a planned cross"
  plannedCrossName: String
  "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED')."
  status: PlannedCrossStatus
}

type PlannedCrossesListResponse {
  data: [PlannedCross]
  page: [PlannedCross]
}

type PlannedCrossesSearchResponse {
  data: [PlannedCross]
  searchResultsDbId: [PlannedCross]
}

type Plate {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "A unique identifier physically attached to a `Plate`"
  plateBarcode: String
  "The ID which uniquely identifies a `Plate`"
  plateDbId: String
  "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format"
  plateFormat: PlateFormat
  "A human readable name for a `Plate`"
  plateName: String
  "The ID which uniquely identifies a `Program` within the given database server"
  program: Program
  "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc"
  sampleType: SampleType
  "samples"
  samples: [Sample]
  "The ID which uniquely identifies a `Study` within the given database server"
  study: Study
  "The ID which uniquely identifies a `Trial` within the given database server"
  trial: Trial
}

type PlatesListResponse {
  data: [Plate]
  page: [Plate]
}

type PlatesSearchResponse {
  data: [Plate]
  searchResultsDbId: [Plate]
}

type PollinationEvent {
  "Pollination events associated with a cross"
  cross: Cross
  "The unique identifier for this pollination event"
  pollinationNumber: String
  "True if the pollination was successful"
  pollinationSuccessful: Boolean
  "The timestamp when the pollination took place"
  pollinationTimeStamp: String
}

type Program {
  "A shortened version of the human readable name for a Program"
  abbreviation: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Common name for the crop which this program is for"
  commonCropName: String
  "crossingProjects"
  crossingProjects: [CrossingProject]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Information describing the grant or funding source for this program"
  fundingInformation: String
  "The unique identifier of the program leader"
  leadPerson: Person
  "The primary objective of the program"
  objective: String
  "observationUnits"
  observationUnits: [ObservationUnit]
  "plates"
  plates: [Plate]
  "The ID which uniquely identifies the program"
  programDbId: String
  "Human readable name of the program"
  programName: String
  """
  The type of program entity this object represents
  <br/> 'STANDARD' represents a standard, permanent breeding program
  <br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   
  """
  programType: ProgramType
  "samples"
  samples: [Sample]
  "seedLots"
  seedLots: [SeedLot]
  trials: [Trial]
}

type ProgramsListResponse {
  data: [Program]
  page: [Program]
}

type ProgramsSearchResponse {
  data: [Program]
  searchResultsDbId: [Program]
}

type Publication {
  publicationPUI: String
  publicationReference: String
  "Publications associated with a trial"
  trial: Trial
}

type Query {
  "Returns a BreedingMethod object by id"
  breedingMethod(breedingMethodDbId: ID, commonCropName: String): BreedingMethod
  "Returns BreedingMethod objects"
  breedingMethods(breedingMethodsInput: BreedingMethodsInput): BreedingMethodsListResponse
  "Returns a CallSet object by id"
  callSet(callSetDbId: ID, commonCropName: String): CallSet
  "Returns CallSet objects"
  callSets(callSetsInput: CallSetsInput, paging: PageInput): CallSetsListResponse
  "Returns CallSet objects"
  callSetsSearch(callSetInput: CallSetsInput): CallSetsSearchResponse
  "Returns Call objects"
  calls(callsInput: CallsInput, paging: PageInput): CallsListResponse
  "Returns Call objects"
  callsSearch(callInput: CallsInput): CallsSearchResponse
  "Returns Cross objects"
  crosses(crossesInput: CrossesInput, paging: PageInput): CrossesListResponse
  "Returns a CrossingProject object by id"
  crossingProject(commonCropName: String, crossingProjectDbId: ID): CrossingProject
  "Returns CrossingProject objects"
  crossingProjects(crossingProjectsInput: CrossingProjectsInput, paging: PageInput): CrossingProjectsListResponse
  "Returns CrossingProject objects"
  crossingProjectsSearch(crossingProjectInput: CrossingProjectsInput): CrossingProjectsSearchResponse
  "Returns Event objects"
  events(eventsInput: EventsInput, paging: PageInput): EventsListResponse
  "Returns Event objects"
  eventsSearch(eventInput: EventsInput): EventsSearchResponse
  "Returns a GenomeMap object by id"
  genomeMap(commonCropName: String, genomeMapDbId: ID): GenomeMap
  "Returns GenomeMap objects"
  genomeMaps(genomeMapsInput: GenomeMapsInput, paging: PageInput): GenomeMapsListResponse
  "Returns GenomeMap objects"
  genomeMapsSearch(genomeMapInput: GenomeMapsInput): GenomeMapsSearchResponse
  "Returns a Germplasm object by id"
  germplasm(commonCropName: String, germplasmDbId: ID): Germplasm
  "Returns a GermplasmAttribute object by id"
  germplasmAttribute(commonCropName: String, germplasmAttributeDbId: ID): GermplasmAttribute
  "Returns a GermplasmAttributeValue object by id"
  germplasmAttributeValue(commonCropName: String, germplasmAttributeValueDbId: ID): GermplasmAttributeValue
  "Returns GermplasmAttributeValue objects"
  germplasmAttributeValues(germplasmAttributeValuesInput: GermplasmAttributeValuesInput, paging: PageInput): GermplasmAttributeValuesListResponse
  "Returns GermplasmAttributeValue objects"
  germplasmAttributeValuesSearch(germplasmAttributeValueInput: GermplasmAttributeValuesInput): GermplasmAttributeValuesSearchResponse
  "Returns GermplasmAttribute objects"
  germplasmAttributes(germplasmAttributesInput: GermplasmAttributesInput, paging: PageInput): GermplasmAttributesListResponse
  "Returns GermplasmAttribute objects"
  germplasmAttributesSearch(germplasmAttributeInput: GermplasmAttributesInput): GermplasmAttributesSearchResponse
  "Returns Germplasm objects"
  germplasms(germplasmsInput: GermplasmsInput, paging: PageInput): GermplasmsListResponse
  "Returns Germplasm objects"
  germplasmsSearch(germplasmInput: GermplasmsInput): GermplasmsSearchResponse
  "Returns a Image object by id"
  image(commonCropName: String, imageDbId: ID): Image
  "Returns Image objects"
  images(imagesInput: ImagesInput, paging: PageInput): ImagesListResponse
  "Returns Image objects"
  imagesSearch(imageInput: ImagesInput): ImagesSearchResponse
  "Returns a List object by id"
  list(commonCropName: String, listDbId: ID): List
  "Returns List objects"
  lists(listsInput: ListsInput, paging: PageInput): ListsListResponse
  "Returns List objects"
  listsSearch(listInput: ListsInput): ListsSearchResponse
  "Returns a Location object by id"
  location(commonCropName: String, locationDbId: ID): Location
  "Returns Location objects"
  locations(locationsInput: LocationsInput, paging: PageInput): LocationsListResponse
  "Returns Location objects"
  locationsSearch(locationInput: LocationsInput): LocationsSearchResponse
  "Returns MarkerPosition objects"
  markerPositions(markerPositionsInput: MarkerPositionsInput, paging: PageInput): MarkerPositionsListResponse
  "Returns MarkerPosition objects"
  markerPositionsSearch(markerPositionInput: MarkerPositionsInput): MarkerPositionsSearchResponse
  "Returns a Method object by id"
  method(commonCropName: String, methodDbId: ID): Method
  "Returns Method objects"
  methods(methodsInput: MethodsInput, paging: PageInput): MethodsListResponse
  "Returns a Observation object by id"
  observation(commonCropName: String, observationDbId: ID): Observation
  "Returns a ObservationUnit object by id"
  observationUnit(commonCropName: String, observationUnitDbId: ID): ObservationUnit
  "Returns ObservationUnit objects"
  observationUnits(observationUnitsInput: ObservationUnitsInput, paging: PageInput): ObservationUnitsListResponse
  "Returns ObservationUnit objects"
  observationUnitsSearch(observationUnitInput: ObservationUnitsInput): ObservationUnitsSearchResponse
  "Returns a ObservationVariable object by id"
  observationVariable(commonCropName: String, observationVariableDbId: ID): ObservationVariable
  "Returns ObservationVariable objects"
  observationVariables(observationVariablesInput: ObservationVariablesInput, paging: PageInput): ObservationVariablesListResponse
  "Returns ObservationVariable objects"
  observationVariablesSearch(observationVariableInput: ObservationVariablesInput): ObservationVariablesSearchResponse
  "Returns Observation objects"
  observations(observationsInput: ObservationsInput, paging: PageInput): ObservationsListResponse
  "Returns Observation objects"
  observationsSearch(observationInput: ObservationsInput): ObservationsSearchResponse
  "Returns Ontology objects"
  ontologies(ontologiesInput: OntologiesInput, paging: PageInput): OntologiesListResponse
  "Returns a Ontology object by id"
  ontology(commonCropName: String, ontologyDbId: ID): Ontology
  "Returns a PedigreeNode object by id"
  pedigreeNode(commonCropName: String, pedigreeNodeDbId: ID): PedigreeNode
  "Returns PedigreeNode objects"
  pedigreeNodes(paging: PageInput, pedigreeNodesInput: PedigreeNodesInput): PedigreeNodesListResponse
  "Returns PedigreeNode objects"
  pedigreeNodesSearch(pedigreeNodeInput: PedigreeNodesInput): PedigreeNodesSearchResponse
  "Returns a Person object by id"
  person(commonCropName: String, personDbId: ID): Person
  "Returns Person objects"
  persons(paging: PageInput, personsInput: PersonsInput): PersonsListResponse
  "Returns Person objects"
  personsSearch(personInput: PersonsInput): PersonsSearchResponse
  "Returns PlannedCross objects"
  plannedCrosses(paging: PageInput, plannedCrossesInput: PlannedCrossesInput): PlannedCrossesListResponse
  "Returns PlannedCross objects"
  plannedCrossesSearch(plannedCrossInput: PlannedCrossesInput): PlannedCrossesSearchResponse
  "Returns a Plate object by id"
  plate(commonCropName: String, plateDbId: ID): Plate
  "Returns Plate objects"
  plates(paging: PageInput, platesInput: PlatesInput): PlatesListResponse
  "Returns Plate objects"
  platesSearch(plateInput: PlatesInput): PlatesSearchResponse
  "Returns a Program object by id"
  program(commonCropName: String, programDbId: ID): Program
  "Returns Program objects"
  programs(paging: PageInput, programsInput: ProgramsInput): ProgramsListResponse
  "Returns Program objects"
  programsSearch(programInput: ProgramsInput): ProgramsSearchResponse
  "Returns a Reference object by id"
  reference(commonCropName: String, referenceDbId: ID): Reference
  "Returns a ReferenceSet object by id"
  referenceSet(commonCropName: String, referenceSetDbId: ID): ReferenceSet
  "Returns ReferenceSet objects"
  referenceSets(paging: PageInput, referenceSetsInput: ReferenceSetsInput): ReferenceSetsListResponse
  "Returns ReferenceSet objects"
  referenceSetsSearch(referenceSetInput: ReferenceSetsInput): ReferenceSetsSearchResponse
  "Returns Reference objects"
  references(paging: PageInput, referencesInput: ReferencesInput): ReferencesListResponse
  "Returns Reference objects"
  referencesSearch(referenceInput: ReferencesInput): ReferencesSearchResponse
  "Returns a Sample object by id"
  sample(commonCropName: String, sampleDbId: ID): Sample
  "Returns Sample objects"
  samples(paging: PageInput, samplesInput: SamplesInput): SamplesListResponse
  "Returns Sample objects"
  samplesSearch(sampleInput: SamplesInput): SamplesSearchResponse
  "Returns a Scale object by id"
  scale(commonCropName: String, scaleDbId: ID): Scale
  "Returns Scale objects"
  scales(paging: PageInput, scalesInput: ScalesInput): ScalesListResponse
  "Returns a Season object by id"
  season(commonCropName: String, seasonDbId: ID): Season
  "Returns Season objects"
  seasons(paging: PageInput, seasonsInput: SeasonsInput): SeasonsListResponse
  "Returns Season objects"
  seasonsSearch(seasonInput: SeasonsInput): SeasonsSearchResponse
  "Returns a SeedLot object by id"
  seedLot(commonCropName: String, seedLotDbId: ID): SeedLot
  "Returns SeedLot objects"
  seedLots(paging: PageInput, seedLotsInput: SeedLotsInput): SeedLotsListResponse
  "Returns SeedLot objects"
  seedLotsSearch(seedLotInput: SeedLotsInput): SeedLotsSearchResponse
  "Returns Study objects"
  studies(paging: PageInput, studiesInput: StudiesInput): StudiesListResponse
  "Returns Study objects"
  studiesSearch(studyInput: StudiesInput): StudiesSearchResponse
  "Returns a Study object by id"
  study(commonCropName: String, studyDbId: ID): Study
  "Returns a Trait object by id"
  trait(commonCropName: String, traitDbId: ID): Trait
  "Returns Trait objects"
  traits(paging: PageInput, traitsInput: TraitsInput): TraitsListResponse
  "Returns a Trial object by id"
  trial(commonCropName: String, trialDbId: ID): Trial
  "Returns Trial objects"
  trials(paging: PageInput, trialsInput: TrialsInput): TrialsListResponse
  "Returns Trial objects"
  trialsSearch(trialInput: TrialsInput): TrialsSearchResponse
  "Returns a Variant object by id"
  variant(commonCropName: String, variantDbId: ID): Variant
  "Returns a VariantSet object by id"
  variantSet(commonCropName: String, variantSetDbId: ID): VariantSet
  "Returns VariantSet objects"
  variantSets(paging: PageInput, variantSetsInput: VariantSetsInput): VariantSetsListResponse
  "Returns VariantSet objects"
  variantSetsSearch(variantSetInput: VariantSetsInput): VariantSetsSearchResponse
  "Returns Variant objects"
  variants(paging: PageInput, variantsInput: VariantsInput): VariantsListResponse
  "Returns Variant objects"
  variantsSearch(variantInput: VariantsInput): VariantsSearchResponse
}

type Reference {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Common name for the crop"
  commonCropName: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases."
  isDerived: Boolean
  "The length of this `Reference` sequence."
  length: Int
  "The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM)."
  md5checksum: String
  "The unique identifier for a `Reference`"
  referenceDbId: String
  "The human readable name of a `Reference` within a `ReferenceSet`."
  referenceName: String
  "The unique identifier for a `ReferenceSet`"
  referenceSet: ReferenceSet
  "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`."
  sourceAccessions: [String]
  "The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from."
  sourceDivergence: Float
  "All known corresponding Germplasm"
  sourceGermplasm: [Germplasm]
  "The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI."
  sourceURI: String
  "An ontology term describing an attribute."
  species: OntologyTerm
  "variants"
  variants: [Variant]
}

type ReferenceSet {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`."
  assemblyPUI: String
  "Common name for the crop"
  commonCropName: String
  "Optional free text description of this reference set."
  description: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`)."
  isDerived: Boolean
  """
  Order-independent MD5 checksum which identifies this `ReferenceSet`.
  
  To compute this checksum, make a list of `Reference.md5checksum` for all
  `Reference` s in this set. Then sort that list, and take the MD5 hash of
  all the strings concatenated together. Express the hash as a lower-case
  hexadecimal string.
  """
  md5checksum: String
  "The unique identifier for a ReferenceSet"
  referenceSetDbId: String
  "The human readable name of a ReferenceSet"
  referenceSetName: String
  "references"
  references: Reference
  "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`."
  sourceAccessions: [String]
  "All known corresponding Germplasm"
  sourceGermplasm: [Germplasm]
  "Specifies a FASTA format file/string."
  sourceURI: String
  "An ontology term describing an attribute."
  species: OntologyTerm
  "variantSets"
  variantSets: [VariantSet]
  "variants"
  variants: [Variant]
}

type ReferenceSetsListResponse {
  data: [ReferenceSet]
  page: [ReferenceSet]
}

type ReferenceSetsSearchResponse {
  data: [ReferenceSet]
  searchResultsDbId: [ReferenceSet]
}

type ReferencesListResponse {
  data: [Reference]
  page: [Reference]
}

type ReferencesSearchResponse {
  data: [Reference]
  searchResultsDbId: [Reference]
}

type Sample {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  callSets: [CallSet]
  "The Column identifier for this `Sample` location in the `Plate`"
  column: Int
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The ID which uniquely identifies a `Germplasm`"
  germplasm: Germplasm
  "The ID which uniquely identifies an `ObservationUnit`"
  observationUnit: ObservationUnit
  "The ID which uniquely identifies a `Plate` of `Sample`"
  plate: Plate
  "The ID which uniquely identifies a `Program` within the given database server"
  program: Program
  "The Row identifier for this `Sample` location in the `Plate`"
  row: String
  "A unique identifier physically attached to the `Sample`"
  sampleBarcode: String
  """
  The ID which uniquely identifies a `Sample`
  <br> MIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.
  """
  sampleDbId: String
  """
  Description of a `Sample`
  <br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.
  """
  sampleDescription: String
  "The ID which uniquely identifies a group of `Samples`"
  sampleGroupId: String
  "The human readable name of the `Sample`"
  sampleName: String
  """
  A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)
  <br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. 
  """
  samplePUI: String
  """
  The date and time a `Sample` was collected from the field
  <br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested
  """
  sampleTimestamp: String
  "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc"
  sampleType: String
  "The ID which uniquely identifies a `Study` within the given database server"
  study: Study
  "The name or identifier of the entity which took the `Sample` from the field"
  takenBy: String
  """
  The type of tissue sampled. ex. 'Leaf', 'Root', etc.
  <br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).
  """
  tissueType: String
  "The ID which uniquely identifies a `Trial` within the given database server"
  trial: Trial
  "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`."
  well: String
}

type SamplesListResponse {
  data: [Sample]
  page: [Sample]
}

type SamplesSearchResponse {
  data: [Sample]
  searchResultsDbId: [Sample]
}

type Scale {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  """
  <p>Class of the scale, entries can be</p>
  <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
  <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
  <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
  <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
  <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
  <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
  <p>"Text" - A free text is used to express the trait.</p>
  """
  dataType: DataType
  "For numerical, number of decimal places to be reported"
  decimalPlaces: Int
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID."
  scaleDbId: String
  """
  Name of the scale
  <br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
  """
  scaleName: String
  "The Permanent Unique Identifier of a Scale, usually in the form of a URI"
  scalePUI: String
  """
  This field can be used to describe the units used for this scale. This should be the abbreviated 
  form of the units, intended to be displayed with every value using this scale. Usually this only 
  applies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.
  """
  units: String
  validValues: ValidValues
}

type ScalesListResponse {
  data: [Scale]
  page: [Scale]
}

type Season {
  "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'"
  seasonDbId: String
  "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc."
  seasonName: String
  "The 4 digit year of the season."
  year: Int
}

type SeasonsListResponse {
  data: [Season]
  page: [Season]
}

type SeasonsSearchResponse {
  data: [Season]
  searchResultsDbId: [Season]
}

type SeedLot {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The current balance of the amount of material in a SeedLot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed)."
  amount: Float
  """
  The mixture of germplasm present in the seed lot.
  <br/>
  If this seed lot only contains a single germplasm, the response should contain the name 
  and DbId of that germplasm with a mixturePercentage value of 100
  <br/>
  If the seed lot contains a mixture of different germplasm, the response should contain 
  the name and DbId every germplasm present. The mixturePercentage field should contain 
  the ratio of each germplasm in the total mixture. All of the mixturePercentage values 
  in this array should sum to equal 100.
  """
  contentMixture: [ContentMixture]
  "The time stamp for when this seed lot was created"
  createdDate: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "fromSeedLotTransactions"
  fromSeedLotTransactions: [SeedLotTransaction]
  "The timestamp for the last update to this Seed Lot (including transactions)"
  lastUpdated: String
  "The unique identifier for a Location"
  location: Location
  "observationUnits"
  observationUnits: [ObservationUnit]
  "The unique DbId of the breeding program this Seed Lot belongs to"
  program: Program
  "Unique DbId for the Seed Lot"
  seedLotDbId: String
  "A general description of this Seed Lot"
  seedLotDescription: String
  "A human readable name for this Seed Lot"
  seedLotName: String
  "The description of the source where this material was originally collected (wild, nursery, etc)"
  sourceCollection: String
  "Description the storage location"
  storageLocation: String
  "toSeedLotTransactions"
  toSeedLotTransactions: [SeedLotTransaction]
  "A description of the things being counted in a SeedLot (seeds, bulbs, kg, tree, etc)"
  units: String
}

type SeedLotTransaction {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "The number of units being transferred between SeedLots. Could be a count (seeds, bulbs, etc) or a weight (kg of seed)."
  amount: Float
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "The identifier for the Seed Lot being transferred out of"
  fromSeedLot: SeedLot
  "The identifier for the Seed Lot being transferred into"
  toSeedLot: SeedLot
  "Unique DbId for the Seed Lot Transaction"
  transactionDbId: String
  "A general description of this Seed Lot Transaction"
  transactionDescription: String
  "The time stamp for when the transaction occurred"
  transactionTimestamp: String
  "A description of the things being transferred between SeedLots in a transaction (seeds, bulbs, kg, etc)"
  units: String
}

type SeedLotsListResponse {
  data: [SeedLot]
  page: [SeedLot]
}

type SeedLotsSearchResponse {
  data: [SeedLot]
  searchResultsDbId: [SeedLot]
}

type StorageType {
  """
  The 2 digit code representing the type of storage this germplasm is kept in at a genebank. 
  
  MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 
  
  10) Seed collection 
  11) Short term 
  12) Medium term 
  13) Long term 
  20) Field collection 
  30) In vitro collection 
  40) Cryo-preserved collection 
  50) DNA collection 
  99) Other (elaborate in REMARKS field)
  """
  code: StorageTypeCode
  "A supplemental text description of the storage type"
  description: String
  "associated germplasm"
  germplasm: Germplasm
}

type StudiesListResponse {
  data: [Study]
  page: [Study]
}

type StudiesSearchResponse {
  data: [Study]
  searchResultsDbId: [Study]
}

type Study {
  "A flag to indicate if a Study is currently active and ongoing"
  active: Boolean
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  callSets: [CallSet]
  "Common name for the crop associated with this study"
  commonCropName: String
  "List of contact entities associated with this study"
  contacts: [Contact]
  "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study."
  culturalPractices: String
  "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data."
  dataLinks: [DataLink]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  """
  The date the study ends
  
  MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended
  """
  endDate: String
  """
  Environmental parameters that were kept constant throughout the study and did not change between observation units.
  
  MIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).
  """
  environmentParameters: [EnvironmentParameters]
  "events"
  events: [Event]
  "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology"
  experimentalDesign: ExperimentalDesign
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "Short description of the facility in which the study was carried out."
  growthFacility: GrowthFacility
  "The date and time when this study was last modified"
  lastUpdate: LastUpdate
  "The usage license associated with the study data"
  license: String
  "The unique identifier for a Location"
  location: Location
  """
  Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
  defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
  `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
  at the bottom of the hierarchy (ie plant > 6). 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  observationLevels: [ObservationUnitHierarchyLevel]
  "observationUnits"
  observationUnits: [ObservationUnit]
  "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study."
  observationUnitsDescription: String
  """
  The list of Observation Variables being used in this study. 
  
  This list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records. 
  """
  observationVariables: [ObservationVariable]
  "observations"
  observations: [Observation]
  "plates"
  plates: [Plate]
  "samples"
  samples: [Sample]
  "List of seasons over which this study was performed."
  seasons: [String]
  """
  The date this study started
  
  MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started
  """
  startDate: String
  "A short human readable code for a study"
  studyCode: String
  """
  The ID which uniquely identifies a study within the given database server
  
  MIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.
  """
  studyDbId: String
  """
  The description of this study
  
  MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study
  """
  studyDescription: String
  """
  The human readable name for a study
  
  MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study
  """
  studyName: String
  "A permanent unique identifier associated with this study data. For example, a URI or DOI"
  studyPUI: String
  "The type of study being performed. ex. \"Yield Trial\", etc"
  studyType: String
  "The ID which uniquely identifies a trial"
  trial: Trial
  "variantSets"
  variantSets: [VariantSet]
}

type Synonym {
  "associated germplasm"
  germplasm: Germplasm
  "Alternative name or ID used to reference this germplasm"
  synonym: String
  "A descriptive classification for this synonym"
  type: String
}

type TaxonId {
  "associated germplasm"
  germplasm: Germplasm
  "The human readable name of the taxonomy provider"
  sourceName: String
  "The identifier (name, ID, URI) of a particular taxonomy within the source provider"
  taxonId: String
}

type Trait {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention."
  alternativeAbbreviations: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\""
  attribute: String
  """
  The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
  """
  attributePUI: String
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\""
  entity: String
  """
  The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI
  <br/>A Trait can be decomposed as "Trait" = "Entity" + "Attribute", the Entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain" 
  """
  entityPUI: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "A shortened version of the human readable name for a Trait"
  mainAbbreviation: String
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReference
  "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Other trait names"
  synonyms: [String]
  """
  A classification to describe the type of trait and the context it should be considered in.
  <br/> examples- "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.
  """
  traitClass: String
  "The ID which uniquely identifies a trait"
  traitDbId: String
  "The description of a trait"
  traitDescription: String
  """
  The human readable name of a trait
  <br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
  """
  traitName: String
  "The Permanent Unique Identifier of a Trait, usually in the form of a URI"
  traitPUI: String
}

type TraitsListResponse {
  data: [Trait]
  page: [Trait]
}

type Treatment {
  """
  The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc
  
  MIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.
  """
  factor: String
  """
  The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc
  
  MIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. 
  """
  modality: String
  "associated observation Unit"
  observationUnit: ObservationUnit
}

type Trial {
  "A flag to indicate if a Trial is currently active and ongoing"
  active: Boolean
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  "Common name for the crop associated with this trial"
  commonCropName: String
  "List of contact entities associated with this trial"
  contacts: [Contact]
  "License and citation information for the data in this trial"
  datasetAuthorships: [DatasetAuthorships]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "The date this trial ends"
  endDate: String
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "observationUnits"
  observationUnits: [ObservationUnit]
  "plates"
  plates: [Plate]
  "A program identifier to search for"
  program: Program
  "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended."
  publications: [Publication]
  "samples"
  samples: [Sample]
  "The date this trial started"
  startDate: String
  studies: [Study]
  """
  The ID which uniquely identifies a trial
  
  MIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.
  """
  trialDbId: String
  """
  The human readable description of a trial
  
  MIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.
  """
  trialDescription: String
  """
  The human readable name of a trial
  
  MIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.
  """
  trialName: String
  "A permanent identifier for a trial. Could be DOI or other URI formatted identifier."
  trialPUI: String
}

type TrialsListResponse {
  data: [Trial]
  page: [Trial]
}

type TrialsSearchResponse {
  data: [Trial]
  searchResultsDbId: [Trial]
}

type ValidValues {
  "List of possible values with optional labels"
  categories: [ValidValuesCategory]
  "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC."
  maximumValue: String
  "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC."
  minimumValue: String
  "associated scale"
  scale: Scale
}

type ValidValuesCategory {
  "A text label for a category"
  label: String
  "associated valid values"
  validValues: ValidValues
  "The actual value for a category"
  value: String
}

type Variant {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  alleleMatrices: [AlleleMatrix]
  "Set of Analysis descriptors for this VariantSet"
  analysis: [String]
  calls: [Call]
  "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen)."
  ciend: [Int]
  """
  In the case of structural variants, start and end of the variant may not
  be known with an exact base position. "cipos" provides an interval with
  high confidence for the start position. The interval is provided by 0 or
  2 signed integers which are added to the start position.
  Based on the use in VCF v4.2
  """
  cipos: [Int]
  "The timestamp when this variant was created."
  created: String
  """
  This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  <br>The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated 
  by `start + referenceBases.length`.
  """
  end: Int
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value."
  filtersApplied: Boolean
  "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record."
  filtersFailed: [String]
  "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS."
  filtersPassed: Boolean
  "markerPositions"
  markerPositions: [MarkerPosition]
  "The unique identifier for a Reference"
  reference: Reference
  "The reference bases for this variant. They start at the given start position."
  referenceBases: String
  "The unique identifier for a ReferenceSet"
  referenceSet: ReferenceSet
  """
  This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  <br> The start position at which this variant occurs (0-based). This corresponds to the first base of the string 
  of reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning 
  the join of circular genomes are represented as two variants one on each side of the join (position 0).
  """
  start: Int
  "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2"
  svlen: Int
  "The time at which this variant was last updated."
  updated: String
  "The ID which uniquely identifies a `Variant`"
  variantDbId: String
  "A human readable name associated with a `Variant`"
  variantNames: [String]
  "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted."
  variantSet: VariantSet
  """
  The "variant_type" is used to denote e.g. structural variants.
  Examples:
    DUP  : duplication of sequence following "start"
    DEL  : deletion of sequence following "start"
  """
  variantType: String
}

type VariantSet {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfo
  alleleMatrices: [AlleleMatrix]
  "Set of Analysis descriptors for this VariantSet"
  analysis: [Analysis]
  """
  When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. 
  <br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)
  <br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
  """
  availableFormats: [AvailableFormat]
  "The number of CallSets included in this VariantSet"
  callSetCount: Int
  callSets: [CallSet]
  calls: [Call]
  "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI."
  externalReferences: [ExternalReference]
  """
  The 'metadataField' indicates which types of genotyping data and metadata are available in the VariantSet. 
  <br> When possible, these field names and abbreviations should follow the VCF standard 
  """
  metadataFields: [MetadataField]
  "The ID of the reference set that describes the sequences used by the variants in this set."
  referenceSet: ReferenceSet
  "The ID of the dataset this variant set belongs to."
  study: Study
  "The number of Variants included in this VariantSet"
  variantCount: Int
  "The unique identifier for a VariantSet"
  variantSetDbId: String
  "The human readable name for a VariantSet"
  variantSetName: String
  "variants"
  variants: [Variant]
}

type VariantSetsListResponse {
  data: [VariantSet]
  page: [VariantSet]
}

type VariantSetsSearchResponse {
  data: [VariantSet]
  searchResultsDbId: [VariantSet]
}

type VariantsListResponse {
  data: [Variant]
  page: [Variant]
}

type VariantsSearchResponse {
  data: [Variant]
  searchResultsDbId: [Variant]
}

"""
MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. 

100) Wild 
110) Natural 
120) Semi-natural/wild 
130) Semi-natural/sown 
200) Weedy 
300) Traditional cultivar/landrace 
400) Breeding/research material 
410) Breeders line 
411) Synthetic population 
412) Hybrid 
413) Founder stock/base population 
414) Inbred line (parent of hybrid cultivar) 
415) Segregating population 
416) Clonal selection 
420) Genetic stock 
421) Mutant (e.g. induced/insertion mutants, tilling populations) 
422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) 
423) Other genetic stocks (e.g. mapping populations) 
500) Advanced or improved cultivar (conventional breeding methods) 
600) GMO (by genetic engineering) 
999) Other (Elaborate in REMARKS field)
"""
enum BiologicalStatusOfAccessionCode {
  N100
  N110
  N120
  N130
  N200
  N300
  N400
  N410
  N411
  N412
  N413
  N414
  N415
  N416
  N420
  N421
  N422
  N423
  N500
  N600
  N999
}

enum CrossStatus {
  DONE
  SKIPPED
  TODO
}

"The type of cross make. Accepted values for this field are 'BIPARENTAL', 'SELF', 'OPEN_POLLINATED', 'BULK',  'BULK_SELFED',  'BULK_OPEN_POLLINATED' and 'DOUBLE_HAPLOID'."
enum CrossType {
  BIPARENTAL
  BULK
  BULK_OPEN_POLLINATED
  BULK_SELFED
  DOUBLE_HAPLOID
  OPEN_POLLINATED
  SELF
}

"dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)"
enum DataFormat {
  DartSeq
  Hapmap
  JSON
  VCF
  tabular
}

"The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON."
enum DataType {
  boolean
  float
  integer
  string
}

"The dimension of the matrix being paginated"
enum Dimension {
  CALLSETS
  VARIANTS
}

"The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\""
enum EntryType {
  CHECK
  FILLER
  TEST
}

"fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response."
enum FileFormat {
  application_excel
  application_json
  application_zip
  text_csv
  text_tsv
}

"The type of objects that are referenced in a List"
enum ListType {
  germplasm
  markers
  observationUnits
  observationVariables
  observations
  programs
  samples
  studies
  trials
  variants
}

"The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \\n\\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \\n\\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \\nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \\nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\\nIn this way, A could be a male parent to B, but a female parent to C. "
enum ParentType {
  CLONAL
  FEMALE
  MALE
  POPULATION
  SELF
}

"The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED')."
enum PlannedCrossStatus {
  DONE
  SKIPPED
  TODO
}

"Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format"
enum PlateFormat {
  PLATE_96
  TUBES
}

"""
The type of positional coordinate used. Must be one of the following values 

LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 

LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 

PLANTED_ROW - The physical planted row number 

PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 

GRID_ROW - The row index number of a square grid overlay 

GRID_COL - The column index number of a square grid overlay 

MEASURED_ROW - The distance in meters from a defined 0-th row 

MEASURED_COL - The distance in meters from a defined 0-th column 
"""
enum PositionCoordinateXType {
  GRID_COL
  GRID_ROW
  LATITUDE
  LONGITUDE
  MEASURED_COL
  MEASURED_ROW
  PLANTED_INDIVIDUAL
  PLANTED_ROW
}

"""
The type of positional coordinate used. Must be one of the following values 

LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 

LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 

PLANTED_ROW - The physical planted row number  

PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 

GRID_ROW - The row index number of a square grid overlay 

GRID_COL - The column index number of a square grid overlay 

MEASURED_ROW - The distance in meters from a defined 0-th row 

MEASURED_COL - The distance in meters from a defined 0-th column 
"""
enum PositionCoordinateYType {
  GRID_COL
  GRID_ROW
  LATITUDE
  LONGITUDE
  MEASURED_COL
  MEASURED_ROW
  PLANTED_INDIVIDUAL
  PLANTED_ROW
}

"""
The type of program entity this object represents
<br/> 'STANDARD' represents a standard, permanent breeding program
<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   
"""
enum ProgramType {
  PROJECT
  STANDARD
}

"The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc"
enum SampleType {
  DNA
  MIXED
  RNA
  TISSUE
}

"""
The 2 digit code representing the type of storage this germplasm is kept in at a genebank. 

MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 

10) Seed collection 
11) Short term 
12) Medium term 
13) Long term 
20) Field collection 
30) In vitro collection 
40) Cryo-preserved collection 
50) DNA collection 
99) Other (elaborate in REMARKS field)
"""
enum StorageTypeCode {
  N10
  N11
  N12
  N13
  N20
  N30
  N40
  N50
  N99
}

"""
<p>Class of the scale, entries can be</p>
<p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
<p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
<p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
<p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
<p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
<p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
<p>"Text" - A free text is used to express the trait.</p>
"""
enum TraitDataType {
  Code
  Date
  Duration
  Nominal
  Numerical
  Ordinal
  Text
}

enum Type {
  OBO
  RDF
  WEBPAGE
}

"A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
input AdditionalInfoInput {
  additionalProperties: String
}

input AlleleMatrixInput {
  "A list of unique identifiers for the CallSets contained in the matrix response. This array should match the ordering for columns in the matrix. A CallSet is a unique combination of a Sample and a sequencing event. CallSets often have a 1-to-1 relationship with Samples, but this is not always the case."
  callSets: [CallSetInput]
  "The 'dataMatrices' are an array of matrix objects that hold the allele data and associated metadata. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows."
  dataMatrices: [DataMatrixInput]
  "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)"
  expandHomozygotes: Boolean
  "Pagination for the matrix"
  pagination: [PaginationInput]
  "The string used as a separator for phased allele calls."
  sepPhased: String
  "The string used as a separator for unphased allele calls."
  sepUnphased: String
  "The string used as a representation for missing data."
  unknownString: String
  "A list of unique identifiers for the VariantSets contained in the matrix response. A VariantSet is a data set originating from a sequencing event. Often, users will only be interested in data from a single VariantSet, but in some cases a user might be interested in a matrix with data from multiple VariantSets."
  variantSets: [VariantSetInput]
  "A list of unique identifiers for the Variants contained in the matrix response. This array should match the ordering for rows in the matrix."
  variants: [VariantInput]
}

input AnalysisInput {
  "Unique identifier for this analysis description"
  analysisDbId: String
  "A human readable name for this analysis"
  analysisName: String
  "The time at which this record was created, in ISO 8601 format."
  created: String
  "A human readable description of the analysis"
  description: String
  "The software run to generate this analysis."
  software: [String]
  "The type of analysis."
  type: String
  "The time at which this record was last updated, in ISO 8601 format."
  updated: String
  "Analysis associated with a variant set"
  variantSet: VariantSetInput
}

input AvailableFormatInput {
  "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)"
  dataFormat: DataFormat
  "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)"
  expandHomozygotes: Boolean
  "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response."
  fileFormat: FileFormat
  "A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file."
  fileURL: String
  "The string used as a separator for phased allele calls."
  sepPhased: String
  "The string used as a separator for unphased allele calls."
  sepUnphased: String
  "The string used as a representation for missing data."
  unknownString: String
  "Formats associated with a variant set"
  variantSet: VariantSetInput
}

input BreedingMethodInput {
  "A shortened version of the human readable name for a Breeding Method"
  abbreviation: String
  "the unique identifier for this breeding method"
  breedingMethodDbId: String
  "the human readable identifier for this breeding method"
  breedingMethodName: String
  "human readable description of the breeding method"
  description: String
  "germplasm"
  germplasm: [GermplasmInput]
  "pedigreeNodes"
  pedigreeNodes: [PedigreeNodeInput]
}

input BreedingMethodsInput {
  "A shortened version of the human readable name for a Breeding Method"
  abbreviation: String
  "the unique identifier for this breeding method"
  breedingMethodDbId: String
  "the human readable identifier for this breeding method"
  breedingMethodName: String
  "human readable description of the breeding method"
  description: String
  "germplasm"
  germplasm: [GermplasmInput]
  "pedigreeNodes"
  pedigreeNodes: [PedigreeNodeInput]
}

input CallInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  """
  The ID of the call set this variant call belongs to.
  
  If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
  """
  callSet: CallSetInput
  "Genotype Metadata are additional layers of metadata associated with each genotype."
  genotypeMetadata: [GenotypeMetadataInput]
  "The value of this genotype call"
  genotypeValue: String
  """
  If this field is populated, this variant call's genotype ordering implies the phase of the bases and 
  is consistent with any other variant calls on the same contig which have the same phase set string.
  """
  phaseSet: String
  "The ID of the variant this call belongs to."
  variant: VariantInput
  "The unique identifier for a VariantSet"
  variantSet: VariantSetInput
}

input CallSetInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  alleleMatrices: [AlleleMatrixInput]
  "The ID which uniquely identifies a CallSet within the given database server"
  callSetDbId: String
  "The human readable name which identifies a germplasm within the given database server"
  callSetName: String
  calls: [CallInput]
  "The date this call set was created"
  created: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The Biosample entity the call set data was generated from."
  sample: SampleInput
  "The ID which uniquely identifies a study within the given database server"
  study: StudyInput
  "The time at which this call set was last updated"
  updated: String
  "The IDs of the variantSets this callSet has calls in."
  variantSets: [VariantSetInput]
}

input CallSetsInput {
  "A list of IDs which uniquely identify `CallSets` within the given database server"
  callSetDbIds: [String]
  "A list of human readable names associated with `CallSets`"
  callSetNames: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "A list of IDs which uniquely identify `Samples` within the given database server"
  sampleDbIds: [String]
  "A list of human readable names associated with `Samples`"
  sampleNames: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
  "A list of IDs which uniquely identify `VariantSets` within the given database server"
  variantSetDbIds: [String]
}

input CallsInput {
  "A list of IDs which uniquely identify `CallSets` within the given database server"
  callSetDbIds: [String]
  "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)"
  expandHomozygotes: Boolean
  "The string used as a separator for phased allele calls."
  sepPhased: String
  "The string used as a separator for unphased allele calls."
  sepUnphased: String
  "The string used as a representation for missing data."
  unknownString: String
  "A list of IDs which uniquely identify `Variant` within the given database server"
  variantDbIds: [String]
  "A list of IDs which uniquely identify `VariantSets` within the given database server"
  variantSetDbIds: [String]
}

input ContactInput {
  """
  The ID which uniquely identifies this contact
  
  MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
  """
  contactDbId: String
  """
  The contacts email address
  
  MIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.
  """
  email: String
  """
  The name of the institution which this contact is part of
  
  MIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to
  """
  instituteName: String
  """
  The full name of this contact person
  
  MIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)
  """
  name: String
  """
  The Open Researcher and Contributor ID for this contact person (orcid.org)
  
  MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
  """
  orcid: String
  """
  The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)
  
  MIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation
  """
  type: String
}

input ContentMixtureInput {
  "The cross for the germplasm using in this content mixture"
  cross: CrossInput
  "The germplasm using in this content mixture"
  germplasm: GermplasmInput
  "The percentage of the given germplasm in the seed lot mixture."
  mixturePercentage: Int
  "associated seedLot"
  seedLot: SeedLotInput
}

input CrossAttributeInput {
  "a custom attributes associated with a cross"
  cross: CrossInput
  "the human readable name of a cross attribute"
  crossAttributeName: String
  "the value of a cross attribute"
  crossAttributeValue: String
}

input CrossInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Set of custom attributes associated with a cross"
  crossAttributes: [CrossAttributeInput]
  "the unique identifier for a cross"
  crossDbId: String
  "the human readable name for a cross"
  crossName: String
  "the type of cross"
  crossType: CrossType
  "the unique identifier for a crossing project"
  crossingProject: CrossingProjectInput
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "the first parent used in the cross"
  parent1: CrossParentInput
  "the second parent used in the cross"
  parent2: CrossParentInput
  "the unique identifier for a planned cross"
  plannedCross: PlannedCrossInput
  "The list of pollination events that occurred for this cross"
  pollinationEvents: [PollinationEventInput]
}

input CrossParentInput {
  "the germplasm of the cross parent"
  germplasm: GermplasmInput
  "the Observation Unit of the cross parent"
  observationUnit: ObservationUnitInput
  "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc."
  parentType: ParentType
}

input CrossesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "Search for Cross with this unique id"
  crossDbIds: [String]
  "Search for Cross with this human readable name"
  crossNames: [String]
  "Search for Crossing Projects with this unique id"
  crossingProjectDbIds: [String]
  "The human readable name for a crossing project"
  crossingProjectNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
}

input CrossingProjectInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "the common name of a crop (for multi-crop systems)"
  commonCropName: String
  "crosses"
  crosses: [CrossInput]
  "The unique identifier for a crossing project"
  crossingProjectDbId: String
  "the description for a crossing project"
  crossingProjectDescription: String
  "The human readable name for a crossing project"
  crossingProjectName: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "pedigreeNodes"
  pedigreeNodes: [PedigreeNodeInput]
  "plannedCrosses"
  plannedCrosses: [PlannedCrossInput]
  """
  A list of all the potential parents in the crossing block, available in the crossing project
  <br/> If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.
  """
  potentialParents: [CrossParentInput]
  "the unique identifier for a program"
  program: ProgramInput
}

input CrossingProjectsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "Search for Crossing Projects with this unique id"
  crossingProjectDbIds: [String]
  "The human readable name for a crossing project"
  crossingProjectNames: [String]
  "If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object."
  includePotentialParents: Boolean
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
}

input DataLinkInput {
  """
  The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  dataFormat: String
  """
  The general description of this data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  description: String
  """
  The MIME type of the file (ie text/csv, application/excel, application/zip).
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  fileFormat: String
  """
  The name of the external data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  name: String
  "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow."
  provenance: String
  "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc"
  scientificType: String
  """
  URL describing the location of this data file to view or download
  
  MIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.
  """
  url: String
  """
  The version number for this data 
  
  MIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).
  """
  version: String
}

input DataMatrixInput {
  "Data matrices associated with an alleleMatrix"
  alleleMatrix: AlleleMatrixInput
  "The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows."
  dataMatrix: [[String]]
  """
  The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word "GT" is reserved for the allele matrix. Examples of other metadata matrices include: "GQ", "RD", and "HQ"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixAbbreviation: String
  """
  The name of the field represented in this data matrix. The key word "Genotype" is reserved for the allele matrix. Examples of other metadata matrices include: "Genotype Quality", "Read Depth", and "Haplotype Quality"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixName: String
  "The type of field represented in this data matrix. This is intended to help parse the data out of JSON."
  dataType: DataType
}

input DatasetAuthorshipsInput {
  "The DOI or other permanent unique identifier for this published dataset"
  datasetPUI: String
  "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended."
  license: String
  "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described."
  publicReleaseDate: String
  "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository."
  submissionDate: String
  "Dataset authorships associated with a trial"
  trial: TrialInput
}

input DocumentationLinkInput {
  URL: String
  "associated ontology reference"
  ontologyReference: OntologyReferenceInput
  type: Type
}

input DonorInput {
  """
  The accession number assigned by the donor
  
  MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.
  """
  donorAccessionNumber: String
  """
  The institute code for the donor institute
  <br/>MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.
  """
  donorInstituteCode: String
  "donoers associated with a germplasm"
  germplasm: GermplasmInput
}

input EnvironmentParametersInput {
  "Human-readable value of the environment parameter (defined above) constant within the experiment"
  description: String
  "Human-readable value of the environment parameter (defined above) constant within the experiment"
  environmentParametersDbId: String
  """
  Name of the environment parameter constant within the experiment
  
  MIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. 
  """
  parameterName: String
  "URI pointing to an ontology class for the parameter"
  parameterPUI: String
  "Environment parameters associated with a study"
  study: StudyInput
  "Unit of the value for this parameter"
  unit: String
  "URI pointing to an ontology class for the unit"
  unitPUI: String
  """
  Numerical or categorical value
  
  MIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.
  """
  value: String
  "URI pointing to an ontology class for the parameter value"
  valuePUI: String
}

input EventDateRangeInput {
  """
  A list of dates when the event occurred
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  discreteDates: [String]
  """
  The end of a continuous or regularly repetitive event
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  endDate: String
  "associated event"
  event: EventInput
  """
  The beginning of a continuous or regularly repetitive event
  <br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  startDate: String
}

input EventInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "An object describing when a particular Event has taken place. An Event can occur at one or more discrete time points (`discreteDates`) or an event can happen continuously over a longer period of time (`startDate`, `endDate`)"
  eventDateRange: [EventDateRangeInput]
  "Internal database identifier"
  eventDbId: String
  """
  A detailed, human-readable description of this event
  <br/>MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. 
  """
  eventDescription: String
  "A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI"
  eventParameters: [EventParameterInput]
  """
  An identifier for this event type, in the form of an ontology class reference
  <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  <br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventType: String
  """
  An identifier for this event type, in the form of an ontology class reference
  <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  <br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventTypeDbId: String
  "A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study"
  observationUnits: [ObservationUnitInput]
  "The study in which the event occurred"
  study: StudyInput
}

input EventParameterInput {
  """
  The shortened code name of an event parameter
  <br>ICASA "Code_Display"
  """
  code: String
  "A human readable description of this event parameter. This description is usually associated with the 'name' and 'code' of an event parameter."
  description: String
  "associated event"
  event: EventInput
  """
  The full name of an event parameter
  <br>ICASA "Variable_Name"
  """
  name: String
  """
  The units or data type of the 'value'. 
  <br>If the 'value' comes from a standardized vocabulary or an encoded list of values, then 'unit' should be 'code'. 
  <br>If the 'value' IS NOT a number, then 'unit' should specify a data type eg. 'text', 'boolean', 'date', etc. 
  <br>If the value IS a number, then 'unit' should specify the units used eg. 'ml', 'cm', etc
  <br>ICASA "Unit_or_type"
  """
  units: String
  "The single value of this event parameter. This single value is accurate for all the dates in the date range. If 'value' is populated then 'valuesByDate' should NOT be populated."
  value: String
  "If the event parameter 'unit' field is 'code', then use 'valueDescription' to add a human readable description to the value."
  valueDescription: String
  "An array of values corresponding to each timestamp in the 'discreteDates' array of this event. The 'valuesByDate' array should exactly match the size of the 'discreteDates' array. If 'valuesByDate' is populated then 'value' should NOT be populated."
  valuesByDate: [String]
}

input EventsInput {
  "Filter based on an Event start date."
  dateRangeEnd: String
  "Filter based on an Event start date."
  dateRangeStart: String
  "Filter based on an Event DbId."
  eventDbIds: [String]
  "Filter based on an Event Type"
  eventTypes: [String]
  "The ID which uniquely identifies an observation unit."
  observationUnitDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
}

input ExperimentalDesignInput {
  "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology."
  PUI: String
  "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'."
  description: String
  "Experimental design associated with a study"
  study: StudyInput
}

input ExternalReferenceInput {
  "The external reference ID. Could be a simple string or a URI."
  referenceId: String
  "An identifier for the source system or database of this reference"
  referenceSource: String
}

input GenomeMapInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Additional comments about a `GenomeMap`"
  comments: String
  "The common name of the `Crop`"
  commonCropName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "The number of linkage groups present in a `GenomeMap`"
  linkageGroupCount: Int
  "The unique identifier for a `GenomeMap`"
  mapDbId: String
  "The human readable identifier for a `GenomeMap`"
  mapName: String
  "The DOI or other permanent identifier for a `GenomeMap`"
  mapPUI: String
  "The number of markers present in a `GenomeMap`"
  markerCount: Int
  "markerPositions"
  markerPositions: [MarkerPositionInput]
  "The date this `GenomeMap` was published"
  publishedDate: String
  "Full scientific binomial format name. This includes Genus, Species, and Sub-species"
  scientificName: String
  "The type of map this represents, usually \"Genetic\" or \"Physical\""
  type: String
  "The units used to describe the data in a `GenomeMap`"
  unit: String
}

input GenomeMapsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The ID which uniquely identifies a `GenomeMap`"
  mapDbIds: [String]
  "The DOI or other permanent identifier for a `GenomeMap`"
  mapPUI: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "Full scientific binomial format name. This includes Genus, Species, and Sub-species"
  scientificName: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
  "The type of map, usually \"Genetic\" or \"Physical\""
  types: [String]
}

input GenotypeMetadataInput {
  "Genotype metadata associated with a call"
  call: CallInput
  "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON."
  dataType: DataType
  """
  The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: "GQ", "RD", and "HQ"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  fieldAbbreviation: String
  """
  The name of the field represented in this Genotype Field. Examples include: "Genotype Quality", "Read Depth", and "Haplotype Quality"
  <br> This maps to a FORMAT field in the VCF file standard.
  """
  fieldName: String
  "The additional metadata value associated with this genotype call"
  fieldValue: String
}

input GeoJSONGeometryInput {
  "Field for possible type 'GeoJSONPointInput'"
  geoJSONPointInput: GeoJSONPointInput
  "Field for possible type 'GeoJSONPolygonInput'"
  geoJSONPolygonInput: GeoJSONPolygonInput
}

"""
One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

Copied from RFC 7946 Section 3.1.1

A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
input GeoJSONInput {
  "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed."
  geometry: GeoJSONGeometryInput
  "Geometry associated with an image"
  germplasmOrigin: GermplasmOriginInput
  "Geometry associated with an image"
  image: ImageInput
  "Geometry associated with an image"
  observation: ObservationInput
  "Geometry associated with an image"
  observationUnit: ObservationUnitPositionInput
  "The literal string \"Feature\""
  type: String
}

"""
Copied from RFC 7946 Section 3.1.1

A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
input GeoJSONPointInput {
  "A single position"
  coordinates: [Float]
  "The literal string \"Point\""
  type: String
}

"""
An array of Linear Rings. Each Linear Ring is an array of Points. 

A Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
input GeoJSONPolygonInput {
  "An array of linear rings"
  coordinates: [[[Float]]]
  "The literal string \"Polygon\""
  type: String
}

input GeoJSONSearchAreaInput {
  "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed."
  geometry: GeoJSONGeometryInput
  "Geometry associated with an image"
  germplasmOrigin: GermplasmOriginInput
  "Geometry associated with an image"
  image: ImageInput
  "Geometry associated with an image"
  observation: ObservationInput
  "Geometry associated with an image"
  observationUnit: ObservationUnitPositionInput
  "The literal string \"Feature\""
  type: String
}

input GermplasmAttributeInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "General category for the attribute. very similar to Trait class."
  attributeCategory: String
  "The ID which uniquely identifies this attribute within the given database server"
  attributeDbId: String
  "A human readable description of this attribute"
  attributeDescription: String
  "A human readable name for this attribute"
  attributeName: String
  "The Permanent Unique Identifier of an Attribute, usually in the form of a URI"
  attributePUI: String
  "attributeValues"
  attributeValues: [GermplasmAttributeValueInput]
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: MethodInput
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReferenceInput
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: ScaleInput
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: TraitInput
}

input GermplasmAttributeValueInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The ID which uniquely identifies this attribute within the given database server"
  attribute: GermplasmAttributeInput
  "The ID which uniquely identifies this attribute value within the given database server"
  attributeValueDbId: String
  "The date the value of this attribute was determined for a given germplasm"
  determinedDate: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The ID which uniquely identifies a germplasm within the given database server"
  germplasm: GermplasmInput
  "The value of this attribute for a given germplasm"
  value: String
}

input GermplasmAttributeValuesInput {
  "List of Germplasm Attribute IDs to search for"
  attributeDbIds: [String]
  "List of human readable Germplasm Attribute names to search for"
  attributeNames: [String]
  "List of Germplasm Attribute Value IDs to search for"
  attributeValueDbIds: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of scale data types to filter search results"
  dataTypes: [TraitDataType]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "List of methods to filter search results"
  methodDbIds: [String]
  "List of ontology IDs to search for"
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "List of scales to filter search results"
  scaleDbIds: [String]
  "List of trait classes to filter search results"
  traitClasses: [String]
  "List of trait unique ID to filter search results"
  traitDbIds: [String]
}

input GermplasmAttributesInput {
  "General category for the attribute. very similar to Trait class."
  attributeCategories: [String]
  "List of Germplasm Attribute IDs to search for"
  attributeDbIds: [String]
  "List of human readable Germplasm Attribute names to search for"
  attributeNames: [String]
  "The Permanent Unique Identifier of an Attribute, usually in the form of a URI"
  attributePUIs: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of scale data types to filter search results"
  dataTypes: [TraitDataType]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "List of methods to filter search results"
  methodDbIds: [String]
  """
  Human readable name for the method
  <br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation
  """
  methodNames: [String]
  "The Permanent Unique Identifier of a Method, usually in the form of a URI"
  methodPUIs: [String]
  "List of ontology IDs to search for"
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier for a Scale"
  scaleDbIds: [String]
  """
  Name of the scale
  <br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
  """
  scaleNames: [String]
  "The Permanent Unique Identifier of a Scale, usually in the form of a URI"
  scalePUIs: [String]
  """
  **Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 
  <br>The unique ID of a studies to filter on
  """
  studyDbId: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  """
  The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
  """
  traitAttributePUIs: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\""
  traitAttributes: [String]
  "List of trait classes to filter search results"
  traitClasses: [String]
  "The unique identifier for a Trait"
  traitDbIds: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\""
  traitEntities: [String]
  """
  The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain" 
  """
  traitEntityPUIs: [String]
  """
  The human readable name of a trait
  <br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
  """
  traitNames: [String]
  "The Permanent Unique Identifier of a Trait, usually in the form of a URI"
  traitPUIs: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input GermplasmChildInput {
  "The child germplasm"
  childGermplasm: GermplasmInput
  """
  The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. 
  
  In a pedigree record, the 'parentType' describes each parent of a particular germplasm. 
  
  In a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. 
  For example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers 
  to the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.
  In this way, A could be a male parent to B, but a female parent to C. 
  """
  parentType: ParentType
  "associated pedigreeNode"
  pedigreeNode: PedigreeNodeInput
}

input GermplasmInput {
  """
  The unique identifier for a material or germplasm within a genebank
  
  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
  """
  accessionNumber: String
  """
  The date a material or germplasm was acquired by the genebank 
  
  MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or "00" [double zero].
  """
  acquisitionDate: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "attributeValues"
  attributeValues: [GermplasmAttributeValueInput]
  """
  MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. 
  
  100) Wild 
  110) Natural 
  120) Semi-natural/wild 
  130) Semi-natural/sown 
  200) Weedy 
  300) Traditional cultivar/landrace 
  400) Breeding/research material 
  410) Breeders line 
  411) Synthetic population 
  412) Hybrid 
  413) Founder stock/base population 
  414) Inbred line (parent of hybrid cultivar) 
  415) Segregating population 
  416) Clonal selection 
  420) Genetic stock 
  421) Mutant (e.g. induced/insertion mutants, tilling populations) 
  422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) 
  423) Other genetic stocks (e.g. mapping populations) 
  500) Advanced or improved cultivar (conventional breeding methods) 
  600) GMO (by genetic engineering) 
  999) Other (Elaborate in REMARKS field)
  """
  biologicalStatusOfAccessionCode: BiologicalStatusOfAccessionCode
  "Supplemental text description for 'biologicalStatusOfAccessionCode'"
  biologicalStatusOfAccessionDescription: String
  "The unique identifier for the breeding method used to create this germplasm"
  breedingMethod: BreedingMethodInput
  "A specific panel/collection/population name this germplasm belongs to."
  collection: String
  """
  Common name for the crop 
  
  MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: "malting barley", "mas".
  """
  commonCropName: String
  """
  3-letter ISO 3166-1 code of the country in which the sample was originally collected 
  
  MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was "collected".
  """
  countryOfOriginCode: String
  "Human readable name used for display purposes"
  defaultDisplayName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "List of donor institutes"
  donors: [DonorInput]
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  """
  Genus name for taxon. Initial uppercase letter required.
  
  MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.
  
  MIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.
  """
  genus: String
  """
  The ID which uniquely identifies a germplasm within the given database server 
  <br>MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
  """
  germplasmDbId: String
  """
  Name of the germplasm. It can be the preferred name and does not have to be unique.
  
  MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.
  """
  germplasmName: String
  "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm."
  germplasmOrigin: [GermplasmOriginInput]
  """
  The Permanent Unique Identifier which represents a germplasm
  
  MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
  
  MIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source
  
  MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.
  """
  germplasmPUI: String
  "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary."
  germplasmPreprocessing: String
  """
  The code for the institute that maintains the material. 
  
  MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".
  """
  instituteCode: String
  "The name of the institute that maintains the material"
  instituteName: String
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "observations"
  observations: [ObservationInput]
  "parentPedigreeNodes"
  parentPedigreeNodes: [PedigreeNodeInput]
  """
  The cross name and optional selection history.
  
  MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.
  """
  pedigree: String
  "progenyPedigreeNodes"
  progenyPedigreeNodes: [PedigreeNodeInput]
  "Germplasm associated with a reference"
  reference: ReferenceInput
  "Germplasm associated with a reference"
  referenceSet: ReferenceSetInput
  "samples"
  samples: [SampleInput]
  """
  An identifier for the source of the biological material
  <br/>MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: "mother_accession X father_accession", or, if father is unknown, as "mother_accession X UNKNOWN". For in situ material, the region of provenance may be used when an accession is not available.
  """
  seedSource: String
  """
  Description of the material source
  
  MIAPPE V1.1 (DM-56) Material source description - Description of the material source
  """
  seedSourceDescription: String
  "siblingPedigreeNodes"
  siblingPedigreeNodes: [PedigreeNodeInput]
  """
  Specific epithet portion of the scientific name in lowercase letters.
  
  MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: "sp." 
  
  MIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.
  """
  species: String
  """
  The authority organization responsible for tracking and maintaining the species name 
  
  MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.
  """
  speciesAuthority: String
  "The type of storage this germplasm is kept in at a genebank."
  storageTypes: [StorageTypeInput]
  """
  Subtaxon can be used to store any additional taxonomic identifier.
  
  MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: "subsp." (for subspecies); "convar." (for convariety); "var." (for variety); "f." (for form); "Group" (for "cultivar group").
  
  MIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).
  """
  subtaxa: String
  """
  The authority organization responsible for tracking and maintaining the subtaxon information
  
  MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.
  """
  subtaxaAuthority: String
  """
  List of alternative names or IDs used to reference this germplasm
  
  MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.
  """
  synonyms: [SynonymInput]
  """
  The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as "ncbiTaxon" preferably with a purl. The rank of this ID should be species.
  
  MIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.
  """
  taxonIds: [TaxonIdInput]
}

input GermplasmOriginInput {
  "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown."
  coordinateUncertainty: String
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  coordinates: [GeoJSONInput]
  "associated germplasm"
  germplasm: GermplasmInput
}

input GermplasmParentInput {
  "The parent germplasm"
  parentGermplasm: GermplasmInput
  """
  The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. 
  
  In a pedigree record, the 'parentType' describes each parent of a particular germplasm. 
  
  In a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. 
  For example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers 
  to the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.
  In this way, A could be a male parent to B, but a female parent to C. 
  """
  parentType: ParentType
  "associated pedigreeNode"
  pedigreeNode: PedigreeNodeInput
}

input GermplasmsInput {
  """
  A collection of unique identifiers for materials or germplasm within a genebank
  
  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
  """
  accessionNumbers: [String]
  "List of the full binomial name (scientific name) to identify a germplasm"
  binomialNames: [String]
  "A specific panel/collection/population name this germplasm belongs to."
  collections: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "A familyCode representing the family this germplasm belongs to."
  familyCodes: [String]
  "List of Genus names to identify germplasm"
  genus: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "List of Permanent Unique Identifiers to identify germplasm"
  germplasmPUIs: [String]
  """
  The code for the institute that maintains the material. 
  <br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".
  """
  instituteCodes: [String]
  "Search for Germplasm with these parents"
  parentDbIds: [String]
  "Search for Germplasm with these children"
  progenyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "List of Species names to identify germplasm"
  species: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "List of alternative names or IDs used to reference this germplasm"
  synonyms: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input GrowthFacilityInput {
  "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology."
  PUI: String
  "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out."
  description: String
  "Growth facility associated with a study"
  study: StudyInput
}

input ImageInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'"
  copyright: String
  "The human readable description of an image."
  description: String
  "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL."
  descriptiveOntologyTerms: [String]
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The unique identifier of an image"
  imageDbId: String
  "The name of the image file. Might be the same as 'imageName', but could be different."
  imageFileName: String
  "The size of the image in Bytes."
  imageFileSize: Int
  "The height of the image in Pixels."
  imageHeight: Int
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  imageLocation: GeoJSONInput
  "The human readable name of an image. Might be the same as 'imageFileName', but could be different."
  imageName: String
  "The date and time the image was taken"
  imageTimeStamp: String
  "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server."
  imageURL: String
  "The width of the image in Pixels."
  imageWidth: Int
  "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc"
  mimeType: String
  "The related observation unit identifier, if relevant."
  observationUnit: ObservationUnitInput
  "A list of observation Ids this image is associated with, if applicable."
  observations: [ObservationInput]
}

input ImagesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL."
  descriptiveOntologyTerms: [String]
  "A list of image Ids to search for"
  imageDbIds: [String]
  "Image file names to search for."
  imageFileNames: [String]
  "A maximum image file size to search for."
  imageFileSizeMax: Int
  "A minimum image file size to search for."
  imageFileSizeMin: Int
  "A maximum image height to search for."
  imageHeightMax: Int
  "A minimum image height to search for."
  imageHeightMin: Int
  imageLocation: GeoJSONSearchAreaInput
  "Human readable names to search for."
  imageNames: [String]
  "The latest timestamp to search for."
  imageTimeStampRangeEnd: String
  "The earliest timestamp to search for."
  imageTimeStampRangeStart: String
  "A maximum image width to search for."
  imageWidthMax: Int
  "A minimum image width to search for."
  imageWidthMin: Int
  "A set of image file types to search for."
  mimeTypes: [String]
  "A list of observation Ids this image is associated with to search for"
  observationDbIds: [String]
  "A set of observation unit identifiers to search for."
  observationUnitDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
}

input LastUpdateInput {
  "The date and time when this study was last modified"
  lastUpdateDbId: String
  "Last update associated with a study"
  study: StudyInput
  timestamp: String
  version: String
}

input ListInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The array of DbIds of the BrAPI objects contained in a List"
  data: [String]
  "Timestamp when the entity was first created"
  dateCreated: String
  "Timestamp when the entity was last updated"
  dateModified: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The unique identifier for a List"
  listDbId: String
  "Description of a List"
  listDescription: String
  "Human readable name of a List"
  listName: String
  "Human readable name of a List Owner. (usually a user or person)"
  listOwnerName: String
  "The unique identifier for a List Owner. (usually a user or person)"
  listOwnerPerson: PersonInput
  "The number of elements in a List"
  listSize: Int
  "The description of where a List originated from"
  listSource: String
  "A flag to indicate the type of objects that are referenced in a List"
  listType: ListType
}

input ListsInput {
  "Define the end for an interval of time and only include Lists that are created within this interval."
  dateCreatedRangeEnd: String
  "Define the beginning for an interval of time and only include Lists that are created within this interval."
  dateCreatedRangeStart: String
  "Define the end for an interval of time and only include Lists that are modified within this interval."
  dateModifiedRangeEnd: String
  "Define the beginning for an interval of time and only include Lists that are modified within this interval."
  dateModifiedRangeStart: String
  "An array of primary database identifiers to identify a set of Lists"
  listDbIds: [String]
  "An array of human readable names to identify a set of Lists"
  listNames: [String]
  "An array of names for the people or entities who are responsible for a set of Lists"
  listOwnerNames: [String]
  "An array of primary database identifiers to identify people or entities who are responsible for a set of Lists"
  listOwnerPersonDbIds: [String]
  "An array of terms identifying lists from different sources (ie 'USER', 'SYSTEM', etc)"
  listSources: [String]
  listType: ListType
}

input LocationInput {
  "A shortened version of the human readable name for a Location"
  abbreviation: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  childLocations: [LocationInput]
  "Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)"
  coordinateDescription: String
  "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown."
  coordinateUncertainty: String
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  coordinates: GeoJSONInput
  """
  [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec
  <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.'
  """
  countryCode: String
  """
  The full name of the country where a Location is located
  <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
  """
  countryName: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)"
  environmentType: String
  "Describes the level of protection/exposure for things like sun light and wind at a particular Location"
  exposure: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  """
  The street address of the institute at a particular Location
  <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteAddress: String
  """
  The full name of the institute at a particular Location
  <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteName: String
  "The unique identifier for a Location"
  locationDbId: String
  """
  A human readable name for a Location
  <br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
  """
  locationName: String
  "A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)"
  locationType: String
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  """
  The unique identifier for a Location
  <br/> The Parent Location defines the encompassing Location that a smaller Location belongs to. 
  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
  """
  parentLocation: LocationInput
  "seedLots"
  seedLots: [SeedLotInput]
  "Description of the accessibility of the location (ex. Public, Private)"
  siteStatus: String
  "Describes the approximate slope (height/distance) of a Location."
  slope: String
  studies: [StudyInput]
  "Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)"
  topography: String
}

input LocationsInput {
  "A list of shortened human readable names for a set of Locations"
  abbreviations: [String]
  "The maximum altitude to search for"
  altitudeMax: Float
  "The minimum altitude to search for"
  altitudeMin: Float
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  coordinates: GeoJSONSearchAreaInput
  "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec"
  countryCodes: [String]
  "The full name of the country to search for"
  countryNames: [String]
  "The street address of the institute to search for"
  instituteAddresses: [String]
  "The name of the institute to search for"
  instituteNames: [String]
  "The location ids to search for"
  locationDbIds: [String]
  "A human readable names to search for"
  locationNames: [String]
  "The type of location this represents (ex. Breeding Location, Storage Location, etc)"
  locationTypes: [String]
  """
  The unique identifier for a Location
  <br/> The Parent Location defines the encompassing location that this location belongs to. 
  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
  """
  parentLocationDbIds: [String]
  """
  A human readable name for a location
  <br/> The Parent Location defines the encompassing location that this location belongs to. 
  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
  """
  parentLocationNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
}

input MarkerPositionInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  """
  The Uniquely Identifiable name of a `LinkageGroup`
  <br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
  """
  linkageGroupName: String
  "The ID which uniquely identifies a `GenomeMap`"
  map: GenomeMapInput
  "The position of a marker or variant within a `LinkageGroup`"
  position: Int
  """
  The ID which uniquely identifies a `Variant` within the given database server
  <br> A `Variant` can also represent a Marker 
  """
  variant: VariantInput
}

input MarkerPositionsInput {
  "A list of Uniquely Identifiable linkage group names"
  linkageGroupNames: [String]
  "A list of IDs which uniquely identify `GenomeMaps` within the given database server"
  mapDbIds: [String]
  "The maximum position of markers in a given map"
  maxPosition: Int
  "The minimum position of markers in a given map"
  minPosition: Int
  "A list of IDs which uniquely identify `Variants` within the given database server"
  variantDbIds: [String]
}

input MetadataFieldInput {
  "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON."
  dataType: DataType
  "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\""
  fieldAbbreviation: String
  "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\""
  fieldName: String
  "Formats associated with a variant set"
  variantSet: VariantSetInput
}

input MethodInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  """
  Bibliographical reference describing the method.
  <br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
  """
  bibliographicalReference: String
  """
  Method description
  <br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
  """
  description: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation"
  formula: String
  "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)"
  methodClass: String
  "Method unique identifier"
  methodDbId: String
  """
  Human readable name for the method
  <br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation
  """
  methodName: String
  "The Permanent Unique Identifier of a Method, usually in the form of a URI"
  methodPUI: String
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReferenceInput
}

input MethodsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The unique identifier for an observation variable."
  observationVariableDbIds: [String]
  """
  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology 
  
    Use `GET /ontologies` to find the list of available ontologies on a server.
  """
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier for a method."
  scaleDbIds: [String]
}

input ObservationInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The name or identifier of the entity which collected the observation"
  collector: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  geoCoordinates: GeoJSONInput
  "The ID which uniquely identifies a germplasm"
  germplasm: GermplasmInput
  "images"
  images: [ImageInput]
  "The ID which uniquely identifies an observation"
  observationDbId: String
  "The date and time when this observation was made"
  observationTimeStamp: String
  "The ID which uniquely identifies an observation unit"
  observationUnit: ObservationUnitInput
  "The ID which uniquely identifies an observation variable"
  observationVariable: ObservationVariableInput
  season: SeasonInput
  "The ID which uniquely identifies a study within the given database server"
  study: StudyInput
  "The name or id of the user who uploaded the observation to the database system"
  uploadedBy: String
  "The value of the data collected as an observation"
  value: String
}

"""
The exact level and level code of an observation unit. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
"""
input ObservationUnitHierarchyLevelInput {
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
}

input ObservationUnitInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "the unique identifier for a cross"
  cross: CrossInput
  "events"
  events: [EventInput]
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The ID which uniquely identifies a germplasm"
  germplasm: GermplasmInput
  "images"
  images: [ImageInput]
  "The ID which uniquely identifies a location, associated with this study"
  location: LocationInput
  """
  The ID which uniquely identifies an observation unit
  
  MIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. 
  """
  observationUnitDbId: String
  "A human readable name for an observation unit"
  observationUnitName: String
  """
  A Permanent Unique Identifier for an observation unit
  
  MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.
  """
  observationUnitPUI: String
  """
  All positional and layout information related to this Observation Unit 
  
  MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) 
  or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. 
  Levels of observation must be consistent with those listed in the Study section.
  """
  observationUnitPosition: [ObservationUnitPositionInput]
  "observations"
  observations: [ObservationInput]
  "The ID which uniquely identifies a program"
  program: ProgramInput
  "samples"
  samples: [SampleInput]
  "The unique identifier for the originating Seed Lot"
  seedLot: SeedLotInput
  "The ID which uniquely identifies a study within the given database server"
  study: StudyInput
  """
  List of treatments applied to an observation unit.
  
  MIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.
  """
  treatments: [TreatmentInput]
  "The ID which uniquely identifies a trial"
  trial: TrialInput
}

"""
The exact level and level code of an observation unit. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
"""
input ObservationUnitLevelInput {
  """
  An ID code or number to represent a real thing that may or may not be an an observation unit.
  <br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  <br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. 
  """
  levelCode: String
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
}

"""
Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
at the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify 
this observation unit by each level of the hierarchy where it exists. 

For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 

**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
"""
input ObservationUnitLevelRelationshipInput {
  """
  An ID code or number to represent a real thing that may or may not be an an observation unit.
  <br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  <br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. 
  """
  levelCode: String
  """
  A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelName: String
  """
  `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers 
  are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  levelOrder: Int
  """
  The an observation unit
  <br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. 
  <br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.
  """
  observationUnit: ObservationUnitInput
}

input ObservationUnitPositionInput {
  "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\""
  entryType: EntryType
  """
  One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.
  
  Copied from RFC 7946 Section 3.1.1
  
  A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
  easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
  """
  geoCoordinates: [GeoJSONInput]
  """
  The exact level and level code of an observation unit. 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  
  MIAPPE V1.1 DM-71 Observation unit type "Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. 
  The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). 
  Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead." 
  """
  observationLevel: ObservationUnitLevelInput
  """
  Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
  defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
  `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
  at the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify 
  this observation unit by each level of the hierarchy where it exists. 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  """
  observationLevelRelationships: [ObservationUnitLevelRelationshipInput]
  "associated observation Unit"
  observationUnit: ObservationUnitInput
  "The X position coordinate for an observation unit. Different systems may use different coordinate systems."
  positionCoordinateX: String
  """
  The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  PLANTED_ROW - The physical planted row number 
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateXType: PositionCoordinateXType
  "The Y position coordinate for an observation unit. Different systems may use different coordinate systems."
  positionCoordinateY: String
  """
  The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details 
  
  PLANTED_ROW - The physical planted row number  
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateYType: PositionCoordinateYType
}

input ObservationUnitsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  """
  Use this parameter to include a list of observations embedded in each ObservationUnit object. 
  
  CAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.
  """
  includeObservations: Boolean
  "The location ids to search for"
  locationDbIds: [String]
  "A human readable names to search for"
  locationNames: [String]
  "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships"
  observationLevelRelationships: [ObservationUnitLevelRelationshipInput]
  "Searches for values in ObservationUnit->observationUnitPosition->observationLevel"
  observationLevels: [ObservationUnitLevelInput]
  "The unique id of an observation unit"
  observationUnitDbIds: [String]
  "The human readable identifier for an Observation Unit"
  observationUnitNames: [String]
  "The DbIds of Variables to search for"
  observationVariableDbIds: [String]
  "The names of Variables to search for"
  observationVariableNames: [String]
  "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI"
  observationVariablePUIs: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)"
  seasonDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input ObservationVariableInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Crop name (examples: \"Maize\", \"Wheat\")"
  commonCropName: String
  "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])"
  contextOfUse: [String]
  "Variable default value. (examples: \"red\", \"2.3\", etc.)"
  defaultValue: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "Growth stage at which measurement is made (examples: \"flowering\")"
  growthStage: String
  "Name of institution submitting the variable"
  institution: String
  "2 letter ISO 639-1 code for the language of submission of the variable."
  language: String
  """
  A description of the way an Observation should be collected. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Method "estimation" or "drone image processing". 
  """
  method: MethodInput
  """
  Variable unique identifier
  
  MIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.
  """
  observationVariableDbId: String
  """
  Variable name (usually a short name)
  
  MIAPPE V1.1 (DM-84) Variable name - Name of the variable.
  """
  observationVariableName: String
  "The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI"
  observationVariablePUI: String
  "observations"
  observations: [ObservationInput]
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReferenceInput
  """
  A Scale describes the units and acceptable values for an ObservationVariable. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Scale "inches" or "pixels".
  """
  scale: ScaleInput
  "Name of scientist submitting the variable."
  scientist: String
  "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  studies: [StudyInput]
  "Timestamp when the Variable was added (ISO 8601)"
  submissionTimestamp: String
  "Other variable names"
  synonyms: [String]
  """
  A Trait describes what property is being observed. 
  <br>For example, an ObservationVariable might be defined with a Trait of "plant height", a Scale of "meters", and a Method of "tape measure". This variable would be distinct from a variable with the Trait "Leaf length" or "Flower height". 
  """
  trait: TraitInput
}

input ObservationVariablesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of scale data types to filter search results"
  dataTypes: [TraitDataType]
  "List of methods to filter search results"
  methodDbIds: [String]
  """
  Human readable name for the method
  <br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation
  """
  methodNames: [String]
  "The Permanent Unique Identifier of a Method, usually in the form of a URI"
  methodPUIs: [String]
  "The DbIds of Variables to search for"
  observationVariableDbIds: [String]
  "The names of Variables to search for"
  observationVariableNames: [String]
  "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI"
  observationVariablePUIs: [String]
  "List of ontology IDs to search for"
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier for a Scale"
  scaleDbIds: [String]
  """
  Name of the scale
  <br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
  """
  scaleNames: [String]
  "The Permanent Unique Identifier of a Scale, usually in the form of a URI"
  scalePUIs: [String]
  """
  **Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 
  <br>The unique ID of a studies to filter on
  """
  studyDbId: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  """
  The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
  """
  traitAttributePUIs: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\""
  traitAttributes: [String]
  "List of trait classes to filter search results"
  traitClasses: [String]
  "The unique identifier for a Trait"
  traitDbIds: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\""
  traitEntities: [String]
  """
  The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain" 
  """
  traitEntityPUIs: [String]
  """
  The human readable name of a trait
  <br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
  """
  traitNames: [String]
  "The Permanent Unique Identifier of a Trait, usually in the form of a URI"
  traitPUIs: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input ObservationsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "The location ids to search for"
  locationDbIds: [String]
  "A human readable names to search for"
  locationNames: [String]
  "The unique id of an Observation"
  observationDbIds: [String]
  "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships"
  observationLevelRelationships: [ObservationUnitLevelRelationshipInput]
  "Searches for values in ObservationUnit->observationUnitPosition->observationLevel"
  observationLevels: [ObservationUnitLevelInput]
  "Timestamp range end"
  observationTimeStampRangeEnd: String
  "Timestamp range start"
  observationTimeStampRangeStart: String
  "The unique id of an Observation Unit"
  observationUnitDbIds: [String]
  "The DbIds of Variables to search for"
  observationVariableDbIds: [String]
  "The names of Variables to search for"
  observationVariableNames: [String]
  "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI"
  observationVariablePUIs: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)"
  seasonDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input OntologiesInput {
  """
  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology 
  
    Use `GET /ontologies` to find the list of available ontologies on a server.
  """
  ontologyDbIds: [String]
  "The human readable identifier for an ontology definition."
  ontologyNames: [String]
}

input OntologyInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Ontology's list of authors (no specific format)"
  authors: String
  "Ontology copyright"
  copyright: String
  "Human readable description of Ontology"
  description: String
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Ontology licence"
  licence: String
  "Ontology database unique identifier"
  ontologyDbId: String
  "Ontology name"
  ontologyName: String
  "Ontology version (no specific format)"
  version: String
}

input OntologyReferenceInput {
  "links to various ontology documentation"
  documentationLinks: [DocumentationLinkInput]
  "The Ontology for this reference"
  ontology: OntologyInput
  "The ID which uniquely identifies a ontology reference"
  ontologyReferenceDbId: String
  "Ontology version (no specific format)"
  version: String
}

input OntologyTermInput {
  "Species associated with a reference"
  reference: ReferenceInput
  "Species associated with a referenceSet"
  referenceSet: ReferenceSetInput
  "Ontology term - the label of the ontology term the termId is pointing to."
  term: String
  "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation."
  termURI: String
}

input PageInput {
  page: Int
  pageSize: Int
}

input PaginationInput {
  "Pagination associated with an alleleMatrix"
  alleleMatrix: AlleleMatrixInput
  "The dimension of the matrix being paginated"
  dimension: Dimension
  "the requested page number (zero indexed)"
  page: Int
  "the maximum number of elements per page in this dimension of the matrix"
  pageSize: Int
  "The total number of elements that are available on the server and match the requested query parameters."
  totalCount: Int
  """
  The total number of pages of elements available on the server. This should be calculated with the following formula. 
  <br/>totalPages = CEILING( totalCount / requested_page_size)
  """
  totalPages: Int
}

input PedigreeNodeInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The unique identifier for the breeding method used to create this germplasm"
  breedingMethod: BreedingMethodInput
  "The crossing project used to generate this germplasm"
  crossingProject: CrossingProjectInput
  "The year the parents were originally crossed"
  crossingYear: Int
  "Human readable name used for display purposes"
  defaultDisplayName: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The code representing the family of this germplasm"
  familyCode: String
  "The ID which uniquely identifies a germplasm"
  germplasm: GermplasmInput
  """
  A list of parent germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> Typically, this array should only have one parent (clonal or self) or two parents (cross). In some special cases, there may be more parents, usually when the exact parent is not known. 
  <br/> If the parameter 'includeParents' is set to false, then this array should be empty, null, or not present in the response.
  """
  parents: [GermplasmParentInput]
  "The ID which uniquely identifies a pedigree node"
  pedigreeNodeDbId: String
  "The string representation of the pedigree for this germplasm in PURDY notation"
  pedigreeString: String
  """
  A list of germplasm references that are direct children of this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> The given germplasm could have a large number of progeny, across a number of different breeding methods. The 'parentType' shows 
        the type of parent this germplasm is to each of the child germplasm references.
  <br/> If the parameter 'includeProgeny' is set to false, then this array should be empty, null, or not present in the response.
  """
  progeny: [GermplasmChildInput]
  """
  A list of sibling germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.
  <br/> Siblings share at least one parent with the given germplasm. 
  <br/> If the parameter 'includeSiblings' is set to false, then this array should be empty, null, or not present in the response.
  """
  siblings: [GermplasmInput]
}

input PedigreeNodesInput {
  """
  A collection of unique identifiers for materials or germplasm within a genebank
  
  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. "PI 113869").
  """
  accessionNumbers: [String]
  "List of the full binomial name (scientific name) to identify a germplasm"
  binomialNames: [String]
  "A specific panel/collection/population name this germplasm belongs to."
  collections: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "A familyCode representing the family this germplasm belongs to."
  familyCodes: [String]
  "List of Genus names to identify germplasm"
  genus: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "List of Permanent Unique Identifiers to identify germplasm"
  germplasmPUIs: [String]
  "If this parameter is true, recursively include ALL of the nodes available in this pedigree tree"
  includeFullTree: Boolean
  "If this parameter is true, include the array of parents in the response"
  includeParents: Boolean
  "If this parameter is true, include the array of progeny in the response"
  includeProgeny: Boolean
  "If this parameter is true, include the array of siblings in the response"
  includeSiblings: Boolean
  """
  The code for the institute that maintains the material. 
  <br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with "obsolete" codes, see "Common formatting rules (v)".
  """
  instituteCodes: [String]
  "Recursively include this number of levels up the tree in the response (parents, grand-parents, great-grand-parents, etc)"
  pedigreeDepth: Int
  "Recursively include this number of levels down the tree in the response (children, grand-children, great-grand-children, etc)"
  progenyDepth: Int
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "List of Species names to identify germplasm"
  species: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "List of alternative names or IDs used to reference this germplasm"
  synonyms: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input PersonInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "description of this person"
  description: String
  "email address for this person"
  emailAddress: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "Persons first name"
  firstName: String
  "Persons last name"
  lastName: String
  lists: [ListInput]
  "physical address of this person"
  mailingAddress: String
  "Persons middle name"
  middleName: String
  "Unique ID for a person"
  personDbId: String
  "phone number of this person"
  phoneNumber: String
  programs: [ProgramInput]
  "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system."
  userID: String
}

input PersonsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "email address for this person"
  emailAddresses: [String]
  "Persons first name"
  firstNames: [String]
  "Persons last name"
  lastNames: [String]
  "physical address of this person"
  mailingAddresses: [String]
  "Persons middle name"
  middleNames: [String]
  "Unique ID for this person"
  personDbIds: [String]
  "phone number of this person"
  phoneNumbers: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system."
  userIDs: [String]
}

input PlannedCrossInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "the type of cross"
  crossType: CrossType
  "crosses"
  crosses: [CrossInput]
  "the unique identifier for a crossing project"
  crossingProject: CrossingProjectInput
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "the first parent used in the cross"
  parent1: CrossParentInput
  "the second parent used in the cross"
  parent2: CrossParentInput
  "the unique identifier for a planned cross"
  plannedCrossDbId: String
  "the human readable name for a planned cross"
  plannedCrossName: String
  "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED')."
  status: PlannedCrossStatus
}

input PlannedCrossesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "Search for Crossing Projects with this unique id"
  crossingProjectDbIds: [String]
  "The human readable name for a crossing project"
  crossingProjectNames: [String]
  "Search for Planned Cross with this unique id"
  plannedCrossDbIds: [String]
  "Search for Planned Cross with this human readable name"
  plannedCrossNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED')."
  statuses: [CrossStatus]
}

input PlateInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "A unique identifier physically attached to a `Plate`"
  plateBarcode: String
  "The ID which uniquely identifies a `Plate`"
  plateDbId: String
  "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format"
  plateFormat: PlateFormat
  "A human readable name for a `Plate`"
  plateName: String
  "The ID which uniquely identifies a `Program` within the given database server"
  program: ProgramInput
  "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc"
  sampleType: SampleType
  "samples"
  samples: [SampleInput]
  "The ID which uniquely identifies a `Study` within the given database server"
  study: StudyInput
  "The ID which uniquely identifies a `Trial` within the given database server"
  trial: TrialInput
}

input PlatesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The ID which uniquely identifies a germplasm"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "The ID which uniquely identifies an observation unit"
  observationUnitDbIds: [String]
  "A unique identifier physically attached to the plate"
  plateBarcodes: [String]
  "The ID which uniquely identifies a plate of samples"
  plateDbIds: [String]
  "The human readable name of a plate of samples"
  plateNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The ID which uniquely identifies a sample"
  sampleDbIds: [String]
  "The unique identifier for a group of related Samples"
  sampleGroupDbIds: [String]
  "The human readable name of the sample"
  sampleNames: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input PollinationEventInput {
  "Pollination events associated with a cross"
  cross: CrossInput
  "The unique identifier for this pollination event"
  pollinationNumber: String
  "True if the pollination was successful"
  pollinationSuccessful: Boolean
  "The timestamp when the pollination took place"
  pollinationTimeStamp: String
}

input ProgramInput {
  "A shortened version of the human readable name for a Program"
  abbreviation: String
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Common name for the crop which this program is for"
  commonCropName: String
  "crossingProjects"
  crossingProjects: [CrossingProjectInput]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "Information describing the grant or funding source for this program"
  fundingInformation: String
  "The unique identifier of the program leader"
  leadPerson: PersonInput
  "The primary objective of the program"
  objective: String
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "plates"
  plates: [PlateInput]
  "The ID which uniquely identifies the program"
  programDbId: String
  "Human readable name of the program"
  programName: String
  """
  The type of program entity this object represents
  <br/> 'STANDARD' represents a standard, permanent breeding program
  <br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   
  """
  programType: ProgramType
  "samples"
  samples: [SampleInput]
  "seedLots"
  seedLots: [SeedLotInput]
  trials: [TrialInput]
}

input ProgramsInput {
  "A list of shortened human readable names for a set of Programs"
  abbreviations: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The person DbIds of the program leader to search for"
  leadPersonDbIds: [String]
  "The names of the program leader to search for"
  leadPersonNames: [String]
  "A program objective to search for"
  objectives: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  """
  The type of program entity this object represents
  <br/> 'STANDARD' represents a standard, permanent breeding program
  <br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding 
  """
  programTypes: [ProgramType]
}

input PublicationInput {
  publicationPUI: String
  publicationReference: String
  "Publications associated with a trial"
  trial: TrialInput
}

input ReferenceInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Common name for the crop"
  commonCropName: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases."
  isDerived: Boolean
  "The length of this `Reference` sequence."
  length: Int
  "The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM)."
  md5checksum: String
  "The unique identifier for a `Reference`"
  referenceDbId: String
  "The human readable name of a `Reference` within a `ReferenceSet`."
  referenceName: String
  "The unique identifier for a `ReferenceSet`"
  referenceSet: ReferenceSetInput
  "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`."
  sourceAccessions: [String]
  "The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from."
  sourceDivergence: Float
  "All known corresponding Germplasm"
  sourceGermplasm: [GermplasmInput]
  "The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI."
  sourceURI: String
  "An ontology term describing an attribute."
  species: OntologyTermInput
  "variants"
  variants: [VariantInput]
}

input ReferenceSetInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`."
  assemblyPUI: String
  "Common name for the crop"
  commonCropName: String
  "Optional free text description of this reference set."
  description: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`)."
  isDerived: Boolean
  """
  Order-independent MD5 checksum which identifies this `ReferenceSet`.
  
  To compute this checksum, make a list of `Reference.md5checksum` for all
  `Reference` s in this set. Then sort that list, and take the MD5 hash of
  all the strings concatenated together. Express the hash as a lower-case
  hexadecimal string.
  """
  md5checksum: String
  "The unique identifier for a ReferenceSet"
  referenceSetDbId: String
  "The human readable name of a ReferenceSet"
  referenceSetName: String
  "references"
  references: ReferenceInput
  "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`."
  sourceAccessions: [String]
  "All known corresponding Germplasm"
  sourceGermplasm: [GermplasmInput]
  "Specifies a FASTA format file/string."
  sourceURI: String
  "An ontology term describing an attribute."
  species: OntologyTermInput
  "variantSets"
  variantSets: [VariantSetInput]
  "variants"
  variants: [VariantInput]
}

input ReferenceSetsInput {
  "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match)."
  accessions: [String]
  "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match)."
  assemblyPUIs: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match)."
  md5checksums: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The `ReferenceSets` to search."
  referenceSetDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input ReferencesInput {
  "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match)."
  accessions: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases."
  isDerived: Boolean
  "The minimum length of this `References` sequence."
  maxLength: Int
  "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match)."
  md5checksums: [String]
  "The minimum length of this `References` sequence."
  minLength: Int
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "A list of IDs which uniquely identify `References` within the given database server"
  referenceDbIds: [String]
  "A list of IDs which uniquely identify `ReferenceSets` within the given database server"
  referenceSetDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input SampleInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  callSets: [CallSetInput]
  "The Column identifier for this `Sample` location in the `Plate`"
  column: Int
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The ID which uniquely identifies a `Germplasm`"
  germplasm: GermplasmInput
  "The ID which uniquely identifies an `ObservationUnit`"
  observationUnit: ObservationUnitInput
  "The ID which uniquely identifies a `Plate` of `Sample`"
  plate: PlateInput
  "The ID which uniquely identifies a `Program` within the given database server"
  program: ProgramInput
  "The Row identifier for this `Sample` location in the `Plate`"
  row: String
  "A unique identifier physically attached to the `Sample`"
  sampleBarcode: String
  """
  The ID which uniquely identifies a `Sample`
  <br> MIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.
  """
  sampleDbId: String
  """
  Description of a `Sample`
  <br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.
  """
  sampleDescription: String
  "The ID which uniquely identifies a group of `Samples`"
  sampleGroupId: String
  "The human readable name of the `Sample`"
  sampleName: String
  """
  A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)
  <br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. 
  """
  samplePUI: String
  """
  The date and time a `Sample` was collected from the field
  <br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested
  """
  sampleTimestamp: String
  "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc"
  sampleType: String
  "The ID which uniquely identifies a `Study` within the given database server"
  study: StudyInput
  "The name or identifier of the entity which took the `Sample` from the field"
  takenBy: String
  """
  The type of tissue sampled. ex. 'Leaf', 'Root', etc.
  <br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).
  """
  tissueType: String
  "The ID which uniquely identifies a `Trial` within the given database server"
  trial: TrialInput
  "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`."
  well: String
}

input SamplesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The ID which uniquely identifies a `Germplasm`"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "The ID which uniquely identifies an `ObservationUnit`"
  observationUnitDbIds: [String]
  "The ID which uniquely identifies a `Plate` of `Samples`"
  plateDbIds: [String]
  "The human readable name of a `Plate` of `Samples`"
  plateNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The ID which uniquely identifies a `Sample`"
  sampleDbIds: [String]
  "The unique identifier for a group of related `Samples`"
  sampleGroupDbIds: [String]
  "The human readable name of the `Sample`"
  sampleNames: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input ScaleInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  """
  <p>Class of the scale, entries can be</p>
  <p>"Code" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. "75VD" means "75 %" of the plant is infected and the plant is very delayed.</p>
  <p>"Date" - The date class is for events expressed in a time format, See ISO 8601</p>
  <p>"Duration" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>
  <p>"Nominal" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>
  <p>"Numerical" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>
  <p>"Ordinal" - Ordinal scales are scales composed of ordered categories</p>
  <p>"Text" - A free text is used to express the trait.</p>
  """
  dataType: DataType
  "For numerical, number of decimal places to be reported"
  decimalPlaces: Int
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReferenceInput
  "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID."
  scaleDbId: String
  """
  Name of the scale
  <br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
  """
  scaleName: String
  "The Permanent Unique Identifier of a Scale, usually in the form of a URI"
  scalePUI: String
  """
  This field can be used to describe the units used for this scale. This should be the abbreviated 
  form of the units, intended to be displayed with every value using this scale. Usually this only 
  applies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.
  """
  units: String
  validValues: ValidValuesInput
}

input ScalesInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The unique identifier for an observation variable."
  observationVariableDbIds: [String]
  """
  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology 
  
    Use `GET /ontologies` to find the list of available ontologies on a server.
  """
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier for a scale."
  scaleDbIds: [String]
}

input SeasonInput {
  "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'"
  seasonDbId: String
  "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc."
  seasonName: String
  "The 4 digit year of the season."
  year: Int
}

input SeasonsInput {
  "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'."
  seasonDbIds: [String]
  "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\"."
  seasonNames: [String]
  "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\"."
  seasons: [String]
  "The 4 digit year of a season. Example \"2017\""
  years: [String]
}

input SeedLotInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The current balance of the amount of material in a SeedLot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed)."
  amount: Float
  """
  The mixture of germplasm present in the seed lot.
  <br/>
  If this seed lot only contains a single germplasm, the response should contain the name 
  and DbId of that germplasm with a mixturePercentage value of 100
  <br/>
  If the seed lot contains a mixture of different germplasm, the response should contain 
  the name and DbId every germplasm present. The mixturePercentage field should contain 
  the ratio of each germplasm in the total mixture. All of the mixturePercentage values 
  in this array should sum to equal 100.
  """
  contentMixture: [ContentMixtureInput]
  "The time stamp for when this seed lot was created"
  createdDate: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "fromSeedLotTransactions"
  fromSeedLotTransactions: [SeedLotTransactionInput]
  "The timestamp for the last update to this Seed Lot (including transactions)"
  lastUpdated: String
  "The unique identifier for a Location"
  location: LocationInput
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "The unique DbId of the breeding program this Seed Lot belongs to"
  program: ProgramInput
  "Unique DbId for the Seed Lot"
  seedLotDbId: String
  "A general description of this Seed Lot"
  seedLotDescription: String
  "A human readable name for this Seed Lot"
  seedLotName: String
  "The description of the source where this material was originally collected (wild, nursery, etc)"
  sourceCollection: String
  "Description the storage location"
  storageLocation: String
  "toSeedLotTransactions"
  toSeedLotTransactions: [SeedLotTransactionInput]
  "A description of the things being counted in a SeedLot (seeds, bulbs, kg, tree, etc)"
  units: String
}

input SeedLotTransactionInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "The number of units being transferred between SeedLots. Could be a count (seeds, bulbs, etc) or a weight (kg of seed)."
  amount: Float
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "The identifier for the Seed Lot being transferred out of"
  fromSeedLot: SeedLotInput
  "The identifier for the Seed Lot being transferred into"
  toSeedLot: SeedLotInput
  "Unique DbId for the Seed Lot Transaction"
  transactionDbId: String
  "A general description of this Seed Lot Transaction"
  transactionDescription: String
  "The time stamp for when the transaction occurred"
  transactionTimestamp: String
  "A description of the things being transferred between SeedLots in a transaction (seeds, bulbs, kg, etc)"
  units: String
}

input SeedLotsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "Search for Cross with this unique id"
  crossDbIds: [String]
  "Search for Cross with this human readable name"
  crossNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "Unique id for a seed lot on this server"
  seedLotDbIds: [String]
}

input StorageTypeInput {
  """
  The 2 digit code representing the type of storage this germplasm is kept in at a genebank. 
  
  MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 
  
  10) Seed collection 
  11) Short term 
  12) Medium term 
  13) Long term 
  20) Field collection 
  30) In vitro collection 
  40) Cryo-preserved collection 
  50) DNA collection 
  99) Other (elaborate in REMARKS field)
  """
  code: StorageTypeCode
  "A supplemental text description of the storage type"
  description: String
  "associated germplasm"
  germplasm: GermplasmInput
}

input StudiesInput {
  "A flag to indicate if a Study is currently active and ongoing"
  active: Boolean
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of IDs which uniquely identify germplasm to search for"
  germplasmDbIds: [String]
  "List of human readable names to identify germplasm to search for"
  germplasmNames: [String]
  "The location ids to search for"
  locationDbIds: [String]
  "A human readable names to search for"
  locationNames: [String]
  "The DbIds of Variables to search for"
  observationVariableDbIds: [String]
  "The names of Variables to search for"
  observationVariableNames: [String]
  "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI"
  observationVariablePUIs: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The ID which uniquely identifies a season"
  seasonDbIds: [String]
  "A short human readable code for a study"
  studyCodes: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "Permanent unique identifier associated with study data. For example, a URI or DOI"
  studyPUIs: [String]
  "The type of study being performed. ex. \"Yield Trial\", etc"
  studyTypes: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
}

input StudyInput {
  "A flag to indicate if a Study is currently active and ongoing"
  active: Boolean
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  callSets: [CallSetInput]
  "Common name for the crop associated with this study"
  commonCropName: String
  "List of contact entities associated with this study"
  contacts: [ContactInput]
  "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study."
  culturalPractices: String
  "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data."
  dataLinks: [DataLinkInput]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  """
  The date the study ends
  
  MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended
  """
  endDate: String
  """
  Environmental parameters that were kept constant throughout the study and did not change between observation units.
  
  MIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).
  """
  environmentParameters: [EnvironmentParametersInput]
  "events"
  events: [EventInput]
  "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology"
  experimentalDesign: ExperimentalDesignInput
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "Short description of the facility in which the study was carried out."
  growthFacility: GrowthFacilityInput
  "The date and time when this study was last modified"
  lastUpdate: LastUpdateInput
  "The usage license associated with the study data"
  license: String
  "The unique identifier for a Location"
  location: LocationInput
  """
  Observation levels indicate the granularity level at which the measurements are taken. `levelName` 
  defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. 
  `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are 
  at the bottom of the hierarchy (ie plant > 6). 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the <a target="_blank" href="https://wiki.brapi.org/index.php/Observation_Levels">Observation Levels documentation</a>. 
  """
  observationLevels: [ObservationUnitHierarchyLevelInput]
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study."
  observationUnitsDescription: String
  """
  The list of Observation Variables being used in this study. 
  
  This list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records. 
  """
  observationVariables: [ObservationVariableInput]
  "observations"
  observations: [ObservationInput]
  "plates"
  plates: [PlateInput]
  "samples"
  samples: [SampleInput]
  "List of seasons over which this study was performed."
  seasons: [String]
  """
  The date this study started
  
  MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started
  """
  startDate: String
  "A short human readable code for a study"
  studyCode: String
  """
  The ID which uniquely identifies a study within the given database server
  
  MIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.
  """
  studyDbId: String
  """
  The description of this study
  
  MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study
  """
  studyDescription: String
  """
  The human readable name for a study
  
  MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study
  """
  studyName: String
  "A permanent unique identifier associated with this study data. For example, a URI or DOI"
  studyPUI: String
  "The type of study being performed. ex. \"Yield Trial\", etc"
  studyType: String
  "The ID which uniquely identifies a trial"
  trial: TrialInput
  "variantSets"
  variantSets: [VariantSetInput]
}

input SynonymInput {
  "associated germplasm"
  germplasm: GermplasmInput
  "Alternative name or ID used to reference this germplasm"
  synonym: String
  "A descriptive classification for this synonym"
  type: String
}

input TaxonIdInput {
  "associated germplasm"
  germplasm: GermplasmInput
  "The human readable name of the taxonomy provider"
  sourceName: String
  "The identifier (name, ID, URI) of a particular taxonomy within the source provider"
  taxonId: String
}

input TraitInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention."
  alternativeAbbreviations: [String]
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\""
  attribute: String
  """
  The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI
  <br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
  """
  attributePUI: String
  "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\""
  entity: String
  """
  The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI
  <br/>A Trait can be decomposed as "Trait" = "Entity" + "Attribute", the Entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain" 
  """
  entityPUI: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "A shortened version of the human readable name for a Trait"
  mainAbbreviation: String
  """
  MIAPPE V1.1
  
  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology
  
  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).
  
  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).
  """
  ontologyReference: OntologyReferenceInput
  "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)"
  status: String
  "Other trait names"
  synonyms: [String]
  """
  A classification to describe the type of trait and the context it should be considered in.
  <br/> examples- "morphological", "phenological", "agronomical", "physiological", "abiotic stress", "biotic stress", "biochemical", "quality traits", "fertility", etc.
  """
  traitClass: String
  "The ID which uniquely identifies a trait"
  traitDbId: String
  "The description of a trait"
  traitDescription: String
  """
  The human readable name of a trait
  <br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
  """
  traitName: String
  "The Permanent Unique Identifier of a Trait, usually in the form of a URI"
  traitPUI: String
}

input TraitsInput {
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The unique identifier for an observation variable."
  observationVariableDbIds: [String]
  """
  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology 
  
    Use `GET /ontologies` to find the list of available ontologies on a server.
  """
  ontologyDbIds: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier for a trait."
  traitDbIds: [String]
}

input TreatmentInput {
  """
  The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc
  
  MIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.
  """
  factor: String
  """
  The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc
  
  MIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. 
  """
  modality: String
  "associated observation Unit"
  observationUnit: ObservationUnitInput
}

input TrialInput {
  "A flag to indicate if a Trial is currently active and ongoing"
  active: Boolean
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  "Common name for the crop associated with this trial"
  commonCropName: String
  "List of contact entities associated with this trial"
  contacts: [ContactInput]
  "License and citation information for the data in this trial"
  datasetAuthorships: [DatasetAuthorshipsInput]
  "A URL to the human readable documentation of an object"
  documentationURL: String
  "The date this trial ends"
  endDate: String
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "observationUnits"
  observationUnits: [ObservationUnitInput]
  "plates"
  plates: [PlateInput]
  "A program identifier to search for"
  program: ProgramInput
  "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended."
  publications: [PublicationInput]
  "samples"
  samples: [SampleInput]
  "The date this trial started"
  startDate: String
  studies: [StudyInput]
  """
  The ID which uniquely identifies a trial
  
  MIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.
  """
  trialDbId: String
  """
  The human readable description of a trial
  
  MIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.
  """
  trialDescription: String
  """
  The human readable name of a trial
  
  MIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.
  """
  trialName: String
  "A permanent identifier for a trial. Could be DOI or other URI formatted identifier."
  trialPUI: String
}

input TrialsInput {
  "A flag to indicate if a Trial is currently active and ongoing"
  active: Boolean
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "List of contact entities associated with this trial"
  contactDbIds: [String]
  "The location ids to search for"
  locationDbIds: [String]
  "A human readable names to search for"
  locationNames: [String]
  "The DbIds of Variables to search for"
  observationVariableDbIds: [String]
  "The names of Variables to search for"
  observationVariableNames: [String]
  "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI"
  observationVariablePUIs: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  """
  The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.
  
  Return a Trial entity if any of the following cases are true
  
  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null 
  
  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`
  
  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null
  
  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`
  """
  searchDateRangeEnd: String
  """
  The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.
  
  Return a Trial entity if any of the following cases are true
  
  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null 
  
  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`
  
  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null
  
  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`
  """
  searchDateRangeStart: String
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
  "A permanent identifier for a trial. Could be DOI or other URI formatted identifier."
  trialPUIs: [String]
}

input ValidValuesCategoryInput {
  "A text label for a category"
  label: String
  "associated valid values"
  validValues: ValidValuesInput
  "The actual value for a category"
  value: String
}

input ValidValuesInput {
  "List of possible values with optional labels"
  categories: [ValidValuesCategoryInput]
  "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC."
  maximumValue: String
  "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC."
  minimumValue: String
  "associated scale"
  scale: ScaleInput
}

input VariantInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  alleleMatrices: [AlleleMatrixInput]
  "Set of Analysis descriptors for this VariantSet"
  analysis: [String]
  calls: [CallInput]
  "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen)."
  ciend: [Int]
  """
  In the case of structural variants, start and end of the variant may not
  be known with an exact base position. "cipos" provides an interval with
  high confidence for the start position. The interval is provided by 0 or
  2 signed integers which are added to the start position.
  Based on the use in VCF v4.2
  """
  cipos: [Int]
  "The timestamp when this variant was created."
  created: String
  """
  This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  <br>The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated 
  by `start + referenceBases.length`.
  """
  end: Int
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value."
  filtersApplied: Boolean
  "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record."
  filtersFailed: [String]
  "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS."
  filtersPassed: Boolean
  "markerPositions"
  markerPositions: [MarkerPositionInput]
  "The unique identifier for a Reference"
  reference: ReferenceInput
  "The reference bases for this variant. They start at the given start position."
  referenceBases: String
  "The unique identifier for a ReferenceSet"
  referenceSet: ReferenceSetInput
  """
  This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  <br> The start position at which this variant occurs (0-based). This corresponds to the first base of the string 
  of reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning 
  the join of circular genomes are represented as two variants one on each side of the join (position 0).
  """
  start: Int
  "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2"
  svlen: Int
  "The time at which this variant was last updated."
  updated: String
  "The ID which uniquely identifies a `Variant`"
  variantDbId: String
  "A human readable name associated with a `Variant`"
  variantNames: [String]
  "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted."
  variantSet: VariantSetInput
  """
  The "variant_type" is used to denote e.g. structural variants.
  Examples:
    DUP  : duplication of sequence following "start"
    DEL  : deletion of sequence following "start"
  """
  variantType: String
}

input VariantSetInput {
  "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
  additionalInfo: AdditionalInfoInput
  alleleMatrices: [AlleleMatrixInput]
  "Set of Analysis descriptors for this VariantSet"
  analysis: [AnalysisInput]
  """
  When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. 
  <br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)
  <br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
  """
  availableFormats: [AvailableFormatInput]
  "The number of CallSets included in this VariantSet"
  callSetCount: Int
  callSets: [CallSetInput]
  calls: [CallInput]
  "Filter by External References"
  externalReferences: [ExternalReferenceInput]
  """
  The 'metadataField' indicates which types of genotyping data and metadata are available in the VariantSet. 
  <br> When possible, these field names and abbreviations should follow the VCF standard 
  """
  metadataFields: [MetadataFieldInput]
  "The ID of the reference set that describes the sequences used by the variants in this set."
  referenceSet: ReferenceSetInput
  "The ID of the dataset this variant set belongs to."
  study: StudyInput
  "The number of Variants included in this VariantSet"
  variantCount: Int
  "The unique identifier for a VariantSet"
  variantSetDbId: String
  "The human readable name for a VariantSet"
  variantSetName: String
  "variants"
  variants: [VariantInput]
}

input VariantSetsInput {
  "The unique identifier representing a CallSet"
  callSetDbIds: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  "The unique identifier representing a genotype Reference"
  referenceDbIds: [String]
  "The unique identifier representing a genotype ReferenceSet"
  referenceSetDbIds: [String]
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
  "The unique identifier representing a Variant"
  variantDbIds: [String]
  "The unique identifier representing a VariantSet"
  variantSetDbIds: [String]
}

input VariantsInput {
  """
  **Deprecated in v2.1** Parameter unnecessary. Github issue number #474 
  <br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.
  """
  callSetDbIds: [String]
  """
  The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.
  
  Use this parameter to only return results associated with the given crops. 
  
  Use `GET /commoncropnames` to find the list of available crops on a server.
  """
  commonCropNames: [String]
  "The end of the window (0-based, exclusive) for which overlapping variants should be returned."
  end: Int
  """
  A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. 
  
  Use this parameter to only return results associated with the given programs. 
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programDbIds: [String]
  """
  Use this parameter to only return results associated with the given program names. Program names are not required to be unique.
  
  Use `GET /programs` to find the list of available programs on a server.
  """
  programNames: [String]
  """
  **Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472
  <br/>Only return variants on this reference.
  """
  referenceDbId: String
  "The unique identifier representing a genotype `Reference`"
  referenceDbIds: [String]
  "The unique identifier representing a genotype `ReferenceSet`"
  referenceSetDbIds: [String]
  "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0)."
  start: Int
  "List of study identifiers to search for"
  studyDbIds: [String]
  "List of study names to filter search results"
  studyNames: [String]
  "The ID which uniquely identifies a trial to search for"
  trialDbIds: [String]
  "The human readable name of a trial to search for"
  trialNames: [String]
  "A list of IDs which uniquely identify `Variants`"
  variantDbIds: [String]
  "A list of IDs which uniquely identify `VariantSets`"
  variantSetDbIds: [String]
}
